/*!
 * LMV v7.96.0
 *
 * Copyright 2024 Autodesk, Inc.
 * All rights reserved.
 *
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 *
 * Autodesk Viewer SDK Usage Limitations:
 *
 * The Autodesk Viewer SDK JavaScript must be delivered from an
 * Autodesk-hosted URL.
 */
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/
(() => { // webpackBootstrap
    /******/
    var __webpack_modules__ = ({

        /***/
        "./extensions/Section/Section.js":
            /*!***************************************!*\
              !*** ./extensions/Section/Section.js ***!
              \***************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SectionExtension: () => (/* binding */ SectionExtension)\n/* harmony export */ });\n/* harmony import */ var _SectionTool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SectionTool */ \"./extensions/Section/SectionTool.js\");\n/* harmony import */ var _Section_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Section.css */ \"./extensions/Section/Section.css\");\n\n\n\nconst avp = Autodesk.Viewing.Private;\nconst AVU = Autodesk.Viewing.UI;\nconst analytics = avp.analytics;\n\n/**\n * The SectionExtension provides ways to cut the geometry using planes or a cube.\n * The extension adds a toolbar button to access the feature.\n *\n * The extension id is: `Autodesk.Section`\n *\n * @param {Viewer3D} viewer - Viewer instance\n * @param {object} options - Configurations for the extension\n * @example \n * viewer.loadExtension('Autodesk.Section')\n * @memberof Autodesk.Viewing.Extensions\n * @alias Autodesk.Viewing.Extensions.SectionExtension\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n * @class\n */\nvar SectionExtension = function (viewer, options) {\n  Autodesk.Viewing.Extension.call(this, viewer, options);\n  this.viewer = viewer;\n  this.name = 'section';\n  this.modes = ['x', 'y', 'z', 'box'];\n  this.buttons = {};\n\n  this.onViewerSetView = this.onViewerSetView.bind(this);\n  this._onCutPlanesChanged = this._onCutPlanesChanged.bind(this);\n  this._onShowAll = this._onShowAll.bind(this);\n};\n\nSectionExtension.prototype = Object.create(Autodesk.Viewing.Extension.prototype);\nSectionExtension.prototype.constructor = SectionExtension;\n\nvar proto = SectionExtension.prototype;\n\n/**\n * Registers the SectionTool, hotkeys and event handlers.\n *\n * @returns {boolean}\n */\nproto.load = function () {\n  var that = this;\n  var viewer = this.viewer;\n\n  this.tool = new _SectionTool__WEBPACK_IMPORTED_MODULE_0__.SectionTool(viewer, {\n    tintColor: { r: 1, g: 1, b: 0 },\n    tintIntensity: 0.2\n  });\n\n  viewer.toolController.registerTool(this.tool, this.setActive.bind(this));\n  this.sectionStyle = null;\n  this.supportedStyles = [\"X\", \"Y\", \"Z\", \"BOX\"];\n\n  this.displaySectionHatches = this.displaySectionHatches.bind(this);\n\n  this.viewer.prefs.addListeners(avp.Prefs3D.DISPLAY_SECTION_HATCHES, this.displaySectionHatches);\n\n  viewer.addEventListener(Autodesk.Viewing.SET_VIEW_EVENT, this.onViewerSetView);\n\n  // consider cutplane changes of other tools, so that cap meshes consider them too\n  viewer.addEventListener(Autodesk.Viewing.CUTPLANES_CHANGE_EVENT, this._onCutPlanesChanged);\n  viewer.addEventListener(Autodesk.Viewing.SHOW_ALL_EVENT, this._onShowAll);\n  viewer.addEventListener(Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT, that.tool.notifyRenderOptionChanged);\n\n  this.HOTKEYS_ID = \"Autodesk.Section.Hotkeys\";\n  var hotkeys = [{\n    keycodes: [\n    Autodesk.Viewing.KeyCode.ESCAPE],\n\n    onRelease: function () {\n      if (that.viewer.getAggregateSelection().length === 0)\n      return that.deactivate();\n    }\n  }];\n  viewer.getHotkeyManager().pushHotkeys(this.HOTKEYS_ID, hotkeys);\n\n  // Invoked when the context menu is about to get opened.\n  this.viewer.registerContextMenuCallback('Autodesk.Section', (menu, status) => {\n    onContextMenu(this, menu, status);\n  });\n\n  //Load the required dependency (and return the pending load as the load completion Promise)\n  return this.viewer.loadExtension('Autodesk.CompGeom');\n};\n\n/**\n * Unregisters the SectionTool, hotkeys and event handlers.\n *\n * @returns {boolean}\n */\nproto.unload = function () {\n  var viewer = this.viewer;\n\n  viewer.unregisterContextMenuCallback('Autodesk.Section');\n\n  // remove hotkey\n  viewer.getHotkeyManager().popHotkeys(this.HOTKEYS_ID);\n\n  this.destroyUI();\n\n  viewer.removeEventListener(Autodesk.Viewing.SET_VIEW_EVENT, this.onViewerSetView);\n  viewer.removeEventListener(Autodesk.Viewing.CUTPLANES_CHANGE_EVENT, this._onCutPlanesChanged);\n  viewer.removeEventListener(Autodesk.Viewing.SHOW_ALL_EVENT, this._onShowAll);\n  viewer.removeEventListener(Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT, this.tool.notifyRenderOptionChanged);\n\n  this.viewer.prefs.removeListeners(avp.Prefs3D.DISPLAY_SECTION_HATCHES, this.displaySectionHatches);\n\n  viewer.toolController.deregisterTool(this.tool);\n  this.tool = null;\n\n  return true;\n};\n\n/**\n * Toggles activeness of section planes.\n *\n * @returns {boolean} Whether the section plane is active or not.\n * @alias Autodesk.Viewing.Extensions.SectionExtension#toggle\n */\nproto.toggle = function () {\n  if (this.isActive()) {\n    this.enableSectionTool(false);\n  } else {\n    var style = this.sectionStyle || \"X\";\n    this.setSectionStyle(style, true);\n  }\n  return this.isActive(); // Need to check for isActive() again.\n};\n\n/**\n * Returns the current type of plane that will cut-though the geometry.\n *\n * @returns {null | string} Either \"X\" or \"Y\" or \"Z\" or \"BOX\" or null.\n * @alias Autodesk.Viewing.Extensions.SectionExtension#getSectionStyle\n */\nproto.getSectionStyle = function () {\n  return this.sectionStyle;\n};\n\n/**\n * Sets the Section plane style.\n *\n * @param {string} style - Accepted values are 'X', 'Y', 'Z' and 'BOX' (in Caps)\n * @param {boolean} [preserveSection] - Whether sending the current style value resets the cut planes.\n * @alias Autodesk.Viewing.Extensions.SectionExtension#setSectionStyle\n */\nproto.setSectionStyle = function (style, preserveSection) {\n\n  if (this.supportedStyles.indexOf(style) === -1) {\n    return false;\n  }\n\n  var bActive = this.isActive();\n  var bNewStyle = this.sectionStyle !== style || !preserveSection;\n  this.sectionStyle = style;\n\n  if (bActive && bNewStyle) {\n    this.tool.setSection(style);\n  } else\n  if (!bActive) {\n    this.enableSectionTool(true);\n    if (bNewStyle) {\n      this.tool.setSection(style);\n    } else {\n      this.tool.attachControl(true);\n    }\n  }\n  return true;\n};\n\n/**\n * Use to set the section from an externally defined plane. For showing with line pattern\n * Tool itself will be disabled when setting the plane\n *\n * @param {THREE.Vector4} cutplane - send null to clear the section\n */\nproto.setSectionFromPlane = function (cutplane) {\n  this.deactivate();\n\n  if (cutplane) {\n    this.tool.setSectionFromPlane(cutplane);\n    this.tool.attachControl(false);\n    // LMV-5299\n    if (!this.isActive()) {\n      this.tool.showPlane(false);\n    }\n  } else {\n    this.tool.clearSection();\n    var prevLock = this.viewer.toolController.setIsLocked(false);\n    this.enableSectionTool(false);\n    this.viewer.toolController.setIsLocked(prevLock);\n  }\n};\n\n/**\n * Returns the planes belonging only to the Section tool's set*\n */\nproto.getSectionPlanes = function () {\n  return this.tool.getSectionPlanes();\n};\n\n/**\n *\n * @param enable\n * @param keepCutPlanes - keep existing cut planes when deactivating the tool.\n * @returns {boolean}\n * @private\n */\nproto.enableSectionTool = function (enable) {let keepCutPlanes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var toolController = this.viewer.toolController,\n    isActive = this.tool.isActive();\n\n  if (enable && !isActive) {\n    toolController.activateTool(\"section\");\n    if (this.sectionToolButton) {\n      this.sectionToolButton.setState(Autodesk.Viewing.UI.Button.State.ACTIVE);\n    }\n    return true;\n\n  } else if (!enable && isActive) {\n    const prevKeepCutPlanes = this.tool.keepCutPlanesOnDeactivate;\n    this.tool.keepCutPlanesOnDeactivate = keepCutPlanes;\n    toolController.deactivateTool(\"section\");\n    this.tool.keepCutPlanesOnDeactivate = prevKeepCutPlanes;\n\n    if (this.sectionToolButton) {\n      this.sectionToolButton.setState(Autodesk.Viewing.UI.Button.State.INACTIVE);\n    }\n    return true;\n  } else if (enable) {\n    toolController.activateToolModality(\"section\");\n  }\n  return false;\n};\n\n/**\n * Returns an object that reperesents the state of the section planes\n * currently applied to the viewer by this extension.\n * \n * @param {THREE.Vector3 | object} [ignoreGlobalOffset=false]\n * \n * @returns {object | null}\n */\nproto.getViewValues = function (ignoreGlobalOffset) {\n\n  var boxValues = this.tool.getSectionBoxValues(ignoreGlobalOffset);\n  if (boxValues)\n  return boxValues;\n\n  var planeValues = this.tool.getSectionPlaneValues(ignoreGlobalOffset);\n  if (planeValues)\n  return planeValues;\n\n  return null;\n};\n\n/**\n * Gets the extension state as a plain object. Invoked automatically by viewer.getState()\n *\n * @param {object} viewerState - Object to inject extension values.\n * @alias Autodesk.Viewing.Extensions.SectionExtension#getState\n */\nproto.getState = function (viewerState) {\n  const model = this.viewer.getFirstModel();\n  if (!model || model.is2d()) {\n    return;\n  }\n\n  viewerState.cutplanes = viewerState.cutplanes || [];\n  var planes = this.tool.getSectionPlaneSet();\n  for (var i = 0; i < planes.length; i++) {\n    viewerState.cutplanes.push(planes[i].toArray());\n  }\n};\n\n/**\n * Restores the extension state from a given object. Invoked automatically by viewer.restoreState()\n *\n * @param {object} viewerState - Viewer state.\n * @returns {boolean} True if restore operation was successful.\n * @alias Autodesk.Viewing.Extensions.SectionExtension#restoreState\n */\nproto.restoreState = function (viewerState) {\n  // If viewerState doesn't contain cutplanes, we should leave it as is.\n  if (!viewerState.cutplanes) {\n    return;\n  }\n  const cutplanes = this.getSectionPlanes();\n  this.setSectionFromPlane(null); // Unload any existing planes first\n  if (cutplanes.length === 1) {\n    this.setSectionFromPlane(cutplanes[0]);\n  }\n\n  return true;\n};\n\n/**\n * @private\n */\nproto._onCutPlanesChanged = function /*event*/ () {\n  this.tool.notifyCutplanesChanged();\n};\n\n\n/**\n * @private\n */\nproto._onShowAll = function /*event*/ () {\n  this.deactivate();\n};\n\n/**\n * Set a section box around the passed in THREE.Box3.\n * This method will also enable the section tool.\n *\n * @param {THREE.Box3} box - used to set the section box.\n * @alias Autodesk.Viewing.Extensions.SectionExtension#setSectionBox\n */\nproto.setSectionBox = function (box) {\n  if (!box) return;\n  this.enableSectionTool(true);\n  if (this.tool.setSectionBox(box)) {var _this$buttons$this$mo;\n    this.activeStatus = true;\n    this.viewer.clearSelection();\n\n    // Update current mode and button state.\n    this.mode = 'box';\n    (_this$buttons$this$mo = this.buttons[this.mode]) === null || _this$buttons$this$mo === void 0 || _this$buttons$this$mo.setState(AVU.Button.State.ACTIVE);\n  } else {\n    this.enableSectionTool(false);\n  }\n};\n\n/**\n * Place a section plane on the Intersection.\n * This method will also enable the section tool.\n *\n * @param {THREE.Vector3} normal - plane normal.\n * @param {THREE.Vector3} point - position to place the plane.\n * @param enableRotationGizmo\n * @alias Autodesk.Viewing.Extensions.SectionExtension#setSectionPlane\n */\nproto.setSectionPlane = function (normal, point, enableRotationGizmo) {\n  if (!normal || !point) return;\n  this.enableSectionTool(true);\n  if (this.tool.setSectionPlane(normal, point, enableRotationGizmo)) {var _this$buttons$this$mo2;\n    this.activeStatus = true;\n    this.viewer.clearSelection();\n\n    // Update current mode and button state.\n    this.mode = this.calculateNearestAxis(normal);\n    (_this$buttons$this$mo2 = this.buttons[this.mode]) === null || _this$buttons$this$mo2 === void 0 || _this$buttons$this$mo2.setState(AVU.Button.State.ACTIVE);\n  } else {\n    this.enableSectionTool(false);\n  }\n};\n\n/**\n * Given a normal, return the x, y or z, according to the nearest world axis.\n * \n * @param {THREE.Vector3} normal - plane normal.\n */\nproto.calculateNearestAxis = function (normal) {\n  // absolute values for direction cosines, bigger value equals closer to basis axis\n  const xn = Math.abs(normal.x);\n  const yn = Math.abs(normal.y);\n  const zn = Math.abs(normal.z);\n\n  if (xn >= yn && xn >= zn) {\n    return 'x';\n  } else if (yn > xn && yn >= zn) {\n    return 'y';\n  } else {\n    return `z`;\n  }\n};\n\n/**\n * @private\n */\nproto.onViewerSetView = function /*event*/ () {\n  this.deactivate();\n};\n\n/**\n * @param toolbar\n */\nproto.onToolbarCreated = function (toolbar) {\n\n  this.sectionToolButton = new AVU.ComboButton(\"toolbar-sectionTool\");\n  this.sectionToolButton.setToolTip('Section analysis');\n  this.sectionToolButton.setIcon(\"adsk-icon-section-analysis\");\n  this.createSubmenu(this.sectionToolButton);\n\n  // make sure inspect tools is visible\n  var modelTools = toolbar.getControl(Autodesk.Viewing.TOOLBAR.MODELTOOLSID);\n\n  // place section tool before reset tool\n  if (modelTools) {\n    var resetTool = modelTools.getControl(\"toolbar-resetTool\");\n    if (resetTool) {\n      modelTools.addControl(this.sectionToolButton, { index: modelTools.indexOf(resetTool.getId()) });\n    } else {\n      modelTools.addControl(this.sectionToolButton, { index: 0 });\n    }\n  }\n};\n\n/**\n *\n * @param parentButton\n * @private\n */\nproto.createSubmenu = function (parentButton)\n{\n  var that = this;\n  var viewer = this.viewer;\n\n  /**\n   * @param button\n   * @param name\n   * @private\n   */\n  function createNavToggler(button, name) {\n    that.buttons[name] = button;\n\n    return function () {\n      var state = button.getState();\n      var enable = function () {\n        if (button instanceof AVU.ComboButton === false) {\n          that.activate(name);\n        } else {\n          that.enableSectionTool(true);\n          that.tool.attachControl(true);\n        }\n      };\n\n      const sectionType = name.toLowerCase().indexOf('box') !== -1 ? 'Box' : 'Plane';\n\n      if (state === AVU.Button.State.INACTIVE) {\n        button.setState(AVU.Button.State.ACTIVE);\n        // Long initialization may cause issues on touch enabled devices, make it async\n        if (Autodesk.Viewing.isMobileDevice()) {\n          setTimeout(enable, 1);\n        } else {\n          enable();\n        }\n        analytics.track('viewer.section', {\n          from: 'Toolbar',\n          type: sectionType,\n          action: 'Enable'\n        });\n      } else if (state === AVU.Button.State.ACTIVE) {\n        button.setState(AVU.Button.State.INACTIVE);\n        that.deactivate();\n        analytics.track('viewer.section', {\n          from: 'Toolbar',\n          type: sectionType,\n          action: 'Disable'\n        });\n      }\n      that.sectionStyle = name.toUpperCase();\n    };\n  }\n\n  /**\n   *\n   */\n  function updateSectionButtons() {\n    var areVectorsEqual = function () {\n      var v = new THREE.Vector3();\n      return function (a, b, sqtol) {\n        v.subVectors(a, b);\n        return v.lengthSq() < sqtol;\n      };\n    }();\n\n    var unitx = new THREE.Vector3(1, 0, 0);\n    var unity = new THREE.Vector3(0, 1, 0);\n    var unitz = new THREE.Vector3(0, 0, 1);\n    var right = viewer.autocam.getWorldRightVector();\n    var up = viewer.autocam.getWorldUpVector();\n    var front = viewer.autocam.getWorldFrontVector();\n\n    var tol = 0.0001;\n    if (areVectorsEqual(up, unitx, tol)) {\n      that.sectionYButton.setIcon(\"adsk-icon-plane-x\");\n    } else if (areVectorsEqual(up, unitz, tol)) {\n      that.sectionYButton.setIcon(\"adsk-icon-plane-z\");\n    } else {\n      that.sectionYButton.setIcon(\"adsk-icon-plane-y\");\n    }\n\n    if (areVectorsEqual(right, unity, tol)) {\n      that.sectionXButton.setIcon(\"adsk-icon-plane-y\");\n    } else if (areVectorsEqual(right, unitz, tol)) {\n      that.sectionXButton.setIcon(\"adsk-icon-plane-z\");\n    } else {\n      that.sectionXButton.setIcon(\"adsk-icon-plane-x\");\n    }\n\n    if (areVectorsEqual(front, unitx, tol)) {\n      that.sectionZButton.setIcon(\"adsk-icon-plane-x\");\n    } else if (areVectorsEqual(front, unity, tol)) {\n      that.sectionZButton.setIcon(\"adsk-icon-plane-y\");\n    } else {\n      that.sectionZButton.setIcon(\"adsk-icon-plane-z\");\n    }\n\n  }\n\n  var sectionXButton = this.sectionXButton = new AVU.Button(\"toolbar-sectionTool-x\");\n  sectionXButton.setToolTip('Add X plane');\n  sectionXButton.setIcon(\"adsk-icon-plane-x\");\n  sectionXButton.onClick = createNavToggler(sectionXButton, 'x');\n  parentButton.addControl(sectionXButton);\n\n  var sectionYButton = this.sectionYButton = new AVU.Button(\"toolbar-sectionTool-y\");\n  sectionYButton.setToolTip('Add Y plane');\n  sectionYButton.setIcon(\"adsk-icon-plane-y\");\n  sectionYButton.onClick = createNavToggler(sectionYButton, 'y');\n  parentButton.addControl(sectionYButton);\n\n  var sectionZButton = this.sectionZButton = new AVU.Button(\"toolbar-sectionTool-z\");\n  sectionZButton.setToolTip('Add Z plane');\n  sectionZButton.setIcon(\"adsk-icon-plane-z\");\n  sectionZButton.onClick = createNavToggler(sectionZButton, 'z');\n  parentButton.addControl(sectionZButton);\n\n  var sectionBoxButton = this.sectionBoxButton = new AVU.Button(\"toolbar-sectionTool-box\");\n  sectionBoxButton.setToolTip('Add box');\n  sectionBoxButton.setIcon(\"adsk-icon-box\");\n  sectionBoxButton.onClick = createNavToggler(sectionBoxButton, 'box');\n  parentButton.addControl(sectionBoxButton);\n\n  const model = viewer.getFirstModel();\n  if (model !== null && model !== void 0 && model.is3d()) {\n    updateSectionButtons();\n  } else {\n    viewer.addEventListener(Autodesk.Viewing.MODEL_ADDED_EVENT, updateSectionButtons, { once: true });\n  }\n};\n\n/**\n * @private\n */\nproto.destroyUI = function () {\n\n  if (this.sectionToolButton) {\n    this.sectionToolButton.removeFromParent();\n    this.sectionToolButton = null;\n\n    this.buttons = {};\n  }\n};\n\n/**\n * Activates a section plane for user to interact with.\n * It performs the same action as the UI button.\n * \n * @param {string} mode - Accepted values are 'x', 'y', 'z' and 'box' (in lowercase)\n * @returns {boolean} - true if the activation was successful.\n * @alias Autodesk.Viewing.Extensions.SectionExtension#activate\n */\nproto.activate = function (mode) {\n  if (this.activeStatus && this.mode === mode) {\n    return;\n  }\n  this.enableSectionTool(true);\n  switch (mode) {\n    default:\n    case 'x':\n      this.tool.setSection('X');\n      this.mode = 'x';\n      break;\n    case 'y':\n      this.tool.setSection('Y');\n      this.mode = 'y';\n      break;\n    case 'z':\n      this.tool.setSection('Z');\n      this.mode = 'z';\n      break;\n    case 'box':\n      this.tool.setSection('BOX');\n      this.mode = 'box';\n      break;\n  }\n  this.activeStatus = true;\n  return true;\n};\n\n/**\n * Removes the section plane/box from the 3D canvas.\n * \n * @param keepCutPlanes - keep existing cut planes when deactivating the tool. Default is false.\n *\n * @alias Autodesk.Viewing.Extensions.SectionExtension#deactivate\n * @returns {boolean} - returns true if deactivated, false otherwise.\n */\nproto.deactivate = function (keepCutPlanes) {\n  if (this.activeStatus) {\n    this.tool.setActiveMode(\"\");\n    this.enableSectionTool(false, keepCutPlanes);\n    this.activeStatus = false;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Turns display hatches on or off.\n * @param {boolean} value - if true all section planes will get the hatches applied, otherwise, the section planes will not have the hatches.\n */\nproto.displaySectionHatches = function (value) {\n\n  this.tool.setDisplaySectionHatches(value);\n\n  if (this.activeStatus) {\n    const planes = this.getSectionPlanes();\n    this.tool.clearSection();\n    // update the hatches for each existing plane\n    planes.forEach((plane) => {\n      this.tool.updateCapMeshes(new THREE.Plane().setComponents(plane.x, plane.y, plane.z, plane.w));\n    });\n  }\n};\n\n\n/**\n * Invoked when the context menu is about to be created.\n * Adds additional entries to the context menu.\n *\n * @param section\n * @param menu\n * @param status\n * @private\n */\nfunction onContextMenu(section, menu, status) {var _intersection$face;\n\n  if (!status.hasSelected)\n  return;\n\n  const viewer = section.viewer;\n\n  const aggregateSelection = viewer.getAggregateSelection();\n\n  // This case is relevant mostly for hypermodel viewing, when there are 2D planes living in a 3D scene.\n  // In this case, it make no sense to allow \"section-box\" to a plane.\n  if (aggregateSelection.length === 1 && aggregateSelection[0].model.is2d()) {\n    return;\n  }\n\n  const bbox = viewer.impl.selector.getSelectionBounds();\n\n  const menuEntry = {\n    title: \"Section\",\n    target: []\n  };\n\n  menuEntry.target.push({\n    title: 'Section Box',\n    target: () => {\n      section.setSectionBox(bbox);\n      analytics.track('viewer.section', {\n        from: 'Contextual',\n        type: 'Box',\n        action: 'Enable'\n      });\n    }\n  });\n\n  const selected = aggregateSelection.map((selectionObject) => selectionObject.selection).flat();\n  const modelIds = aggregateSelection.map((selectionObject) => selectionObject.model.id);\n  const intersection = viewer.impl.hitTest(status.canvasX, status.canvasY, false, selected, modelIds);\n\n  // Ensure that the selected object is the on that recieved the context click.\n  if (intersection !== null && intersection !== void 0 && (_intersection$face = intersection.face) !== null && _intersection$face !== void 0 && _intersection$face.normal && intersection.model && selected.indexOf(intersection.dbId) !== -1) {var _intersection$model$g;\n\n    const worldMatrix = new THREE.Matrix4();\n    (_intersection$model$g = intersection.model.getFragmentList()) === null || _intersection$model$g === void 0 || _intersection$model$g.getWorldMatrix(intersection.fragId, worldMatrix);\n    const normalMatrix = new THREE.Matrix3().getNormalMatrix(worldMatrix);\n    const normal = intersection.face.normal.clone().applyMatrix3(normalMatrix).normalize();\n\n    menuEntry.target.push({\n      title: 'Section Plane',\n      target: () => {\n        section.setSectionPlane(normal, intersection.point, false);\n        analytics.track('viewer.section', {\n          from: 'Contextual',\n          type: 'Plane',\n          action: 'Enable'\n        });\n      }\n    });\n  }\n\n  menu.push(menuEntry);\n}\n\n\n// Make the extension available\nAutodesk.Viewing.theExtensionManager.registerExtension('Autodesk.Section', SectionExtension);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Section/Section.js\n");

                /***/
            }),

        /***/
        "./extensions/Section/SectionTool.js":
            /*!*******************************************!*\
              !*** ./extensions/Section/SectionTool.js ***!
              \*******************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SectionTool: () => (/* binding */ SectionTool)\n/* harmony export */ });\n/* harmony import */ var _thirdparty_three_js_TransformControls__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../thirdparty/three.js/TransformControls */ \"./thirdparty/three.js/TransformControls.js\");\n\n\nconst debounce = __webpack_require__(/*! lodash/debounce */ \"./node_modules/lodash/debounce.js\");\n\n// Declared at the bottom, inside a function.\nvar SectionMeshClass = null;\nvar avp = Autodesk.Viewing.Private;\n\n/**\n * Tool that provides visual controls for the user to change the cutplane's position and angle.\n * It can (and should) be hooked to [ToolController's registerTool]{@Autodesk.Viewing.ToolController#registerTool}\n *\n * The tool can operate in a rotated coordinate system to align cutplanes and boxes for example with the project\n * north instead of true north. Cutplanes, normals etc. are internally managed in local space to align with canonical axes.\n * Therefore the coordinate system transformation has to be applied when passing values in and out.\n * By default alignment with project north of the first 3D model is used if loaded with 'applyRefPoint=true', true north otherwise.\n *\n * @param {Autodesk.Viewing.Viewer3D} viewer - Viewer3D instance\n * @param {Object} config - Configuration values\n * @param {Object} options.tintColor - Object containing attributes r, g, b in the range [0..1]\n * @param {Number} options.tintIntensity - Value range [0..1]\n * @param {Number} [options.gizmoOffsetRight] - Right bound for the gizmo position in pixel\n * @param {Number} [options.gizmoOffsetLeft] - Left bound for the gizmo position in pixel\n * @param {Number} [options.gizmoOffsetTop] - Top bound for the gizmo position in pixel\n * @param {Number} [options.gizmoOffsetBottom] - Bottom bound for the gizmo position in pixel\n * @constructor\n */\nvar SectionTool = function (viewer, options)\n{\n  var _viewer = viewer.impl;\n\n  var _names = [\"section\"];\n  var _active = false;\n\n  var _isDragging = false;\n  var _boxChanged = false;\n  var _isPlaneOn = true;\n  var _tintColor = options.tintColor;\n  var _tintIntensity = options.tintIntensity;\n\n  var _transRotControl;\n  var _transControl;\n  var _gizmoOffsetRight = isNaN(options.gizmoOffsetRight) ? 200 : options.gizmoOffsetRight; // 200 So the gizmo won't be covered by the View Cube.\n  var _gizmoOffsetLeft = isNaN(options.gizmoOffsetLeft) ? 80 : options.gizmoOffsetLeft;\n  var _gizmoOffsetTop = isNaN(options.gizmoOffsetTop) ? 80 : options.gizmoOffsetTop;\n  var _gizmoOffsetBottom = isNaN(options.gizmoOffsetBottom) ? 80 : options.gizmoOffsetBottom;\n  var _controlOffset = new THREE.Vector3();\n  var _controlNewPosition = new THREE.Vector3();\n\n  var _sectionGroups = [];\n  var _sectionPlanes = [];\n  var _sectionPicker = [];\n  var _activeMode = \"\";\n  var _overlayName = \"gizmo\";\n  var _touchType = null;\n  var _initialized = false;\n  var _visibleAtFirst = true;\n  var _outlineIndices = [\n  0, 1,\n  1, 3,\n  3, 2,\n  2, 0];\n\n  var _priority = 70;\n  var _selectionOpacity = 0.25;\n  var _selectionColor = 0x287EEA;\n\n  var _displaySectionHatches = true;\n\n  let _transform, _inverseTransform, _normalMatrix, _inverseNormalMatrix;\n\n  let _auxVec3 = new THREE.Vector3();\n\n  /**\n   * Stores a custom transform to apply to the section planes and gizmos\n   * @param {THREE.Matrix4} transform - Transformation\n   */\n  function setTransform(transform) {\n    _transform = transform;\n    _inverseTransform = _transform.clone().invert();\n    _normalMatrix = new THREE.Matrix3().getNormalMatrix(_transform);\n    _inverseNormalMatrix = new THREE.Matrix3().getNormalMatrix(_inverseTransform);\n  }\n\n  /**\n   * If the RefPoint transform is applied to the first model (we ignore other models at the moment), we return\n   * the rotational part of it to align the section planes to project north. Otherwise we return an identity transform\n   * to align with true north.\n   *\n   * @returns {THREE.Matrix4} Transformation matrix\n   */\n  function getDefaultTransform() {var _viewer$get3DModels$, _first3DModelData$loa;\n    let transform = new THREE.Matrix4();\n\n    const first3DModelData = (_viewer$get3DModels$ = _viewer.get3DModels()[0]) === null || _viewer$get3DModels$ === void 0 ? void 0 : _viewer$get3DModels$.getData();\n    if (first3DModelData && (_first3DModelData$loa = first3DModelData.loadOptions) !== null && _first3DModelData$loa !== void 0 && _first3DModelData$loa.applyRefPoint && first3DModelData.refPointTransform) {\n      const refPointTransform = first3DModelData.refPointTransform;\n\n      const position = new THREE.Vector3();\n      const quaternion = new THREE.Quaternion();\n      const scale = new THREE.Vector3();\n      refPointTransform.decompose(position, quaternion, scale);\n\n      transform.makeRotationFromQuaternion(quaternion);\n    }\n\n    return transform;\n  }\n\n  setTransform(getDefaultTransform());\n\n  const sendAnalyticsDebounced = debounce((from, type, action) => {\n    avp.analytics.track('viewer.section', {\n      from: from,\n      type: type,\n      action: action\n    });\n  }, 2000);\n\n  (0,_thirdparty_three_js_TransformControls__WEBPACK_IMPORTED_MODULE_0__.init_TransformGizmos)();\n  init_SectionMesh();\n\n  function initControl() {\n\n    if (_initialized) {\n      // Verify overlays are added.\n      _viewer.addOverlay(_overlayName, _transRotControl);\n      _viewer.addOverlay(_overlayName, _transControl);\n      return;\n    }\n\n    _transRotControl = new THREE.TransformControls(_viewer.camera, _viewer.canvas, \"transrotate\");\n    _transRotControl.addEventListener('change', updateViewer);\n    _transRotControl.setSnap(Math.PI / 2, Math.PI / 36); // snap to 90 degs within 5 degs range\n\n    _transControl = new THREE.TransformControls(_viewer.camera, _viewer.canvas, \"translate\");\n    _transControl.addEventListener('change', updateViewer);\n    _transControl.addEventListener('change', adjustGizmoToBounds);\n\n    // add to overlay scene\n    if (_viewer.overlayScenes[_overlayName] === undefined) {\n      _viewer.createOverlayScene(_overlayName);\n    }\n    _viewer.addOverlay(_overlayName, _transRotControl);\n    _viewer.addOverlay(_overlayName, _transControl);\n\n    viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, updateControls);\n    viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, updateSections);\n    viewer.addEventListener(Autodesk.Viewing.HIDE_EVENT, updateSections);\n    viewer.addEventListener(Autodesk.Viewing.SHOW_EVENT, updateSections);\n    viewer.addEventListener(Autodesk.Viewing.MODEL_TRANSFORM_CHANGED_EVENT, updateSections);\n    viewer.addEventListener(Autodesk.Viewing.FRAGMENTS_LOADED_EVENT, updateSections);\n    viewer.addEventListener(Autodesk.Viewing.FRAGMENTS_UNLOADED_EVENT, updateSections);\n    viewer.addEventListener(Autodesk.Viewing.SCENE_UPDATED_EVENT, onSceneUpdated);\n\n    _initialized = true;\n  }\n\n  function deinitControl() {\n\n    if (!_initialized)\n    return;\n\n    _viewer.removeOverlay(_overlayName, _transRotControl);\n    _transRotControl.removeEventListener('change', updateViewer);\n    _transRotControl = null;\n    _viewer.removeOverlay(_overlayName, _transControl);\n    _transControl.removeEventListener('change', updateViewer);\n    _transControl.removeEventListener('change', adjustGizmoToBounds);\n    _transControl = null;\n    _viewer.removeOverlayScene(_overlayName);\n\n    viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, updateControls);\n    viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, updateSections);\n    viewer.removeEventListener(Autodesk.Viewing.HIDE_EVENT, updateSections);\n    viewer.removeEventListener(Autodesk.Viewing.SHOW_EVENT, updateSections);\n    viewer.removeEventListener(Autodesk.Viewing.MODEL_TRANSFORM_CHANGED_EVENT, updateSections);\n    viewer.removeEventListener(Autodesk.Viewing.FRAGMENTS_LOADED_EVENT, updateSections);\n    viewer.removeEventListener(Autodesk.Viewing.FRAGMENTS_UNLOADED_EVENT, updateSections);\n    viewer.removeEventListener(Autodesk.Viewing.SCENE_UPDATED_EVENT, onSceneUpdated);\n\n    _initialized = false;\n  }\n\n  function updateViewer() {\n    _viewer.invalidate(false, false, true);\n  }\n\n  function updateControls() {\n\n    adjustGizmoToBounds();\n\n    if (_transRotControl) {\n      _transRotControl.update();\n    }\n    if (_transControl) {\n      _transControl.update();\n    }\n  }\n\n  /**\n   * Clamp position to screen bounds\n   * @param {THREE.Vector3} position - Position in world space to test\n   * @returns {THREE.Vector3|undefined} Clamped if position was out of bounds, undefined otherwise\n   */\n  function getClampedGizmoPosition(position) {\n    const client = _viewer.worldToClient(position);\n    const rect = _viewer.getCanvasBoundingClientRect();\n    let target = new THREE.Vector3().copy(client);\n\n    if (client.x < _gizmoOffsetLeft) {\n      target.x = _gizmoOffsetLeft;\n    } else if (client.x > rect.width - _gizmoOffsetRight) {\n      target.x = rect.width - _gizmoOffsetRight;\n    }\n\n    if (client.y < _gizmoOffsetTop) {\n      target.y = _gizmoOffsetTop;\n    } else if (client.y > rect.height - _gizmoOffsetBottom) {\n      target.y = rect.height - _gizmoOffsetBottom;\n    }\n\n    return target.x !== client.x || target.y !== client.y ? target : undefined;\n  }\n\n  /**\n   * Try to keep the gizmo in the valid screen bounds\n   */\n  function adjustGizmoToBounds() {\n\n    if (!_transRotControl || !_transRotControl.object) {\n      return;\n    }\n\n    // Adjust gizmo position if it is out of bounds\n    let gizmoNewClientPos = getClampedGizmoPosition(_transRotControl.position);\n    if (gizmoNewClientPos) {\n      const intersection = THREE.TransformControls.intersectObjects(gizmoNewClientPos.x, gizmoNewClientPos.y, [_transRotControl.object], _viewer.camera, false);\n      if (intersection) {\n        _transRotControl.object.getWorldPosition(_controlOffset);\n        _controlNewPosition.copy(intersection.point).sub(_controlOffset);\n        _transRotControl.setGizmoOffset(_controlNewPosition);\n      }\n    }\n  }\n\n  function updateSections() {\n    if (_active && _sectionPlanes.length === 1) {\n      updatePlaneMeshes(true);\n      updateControls();\n      updateCapMeshes(new THREE.Plane().setComponents(_sectionPlanes[0].x, _sectionPlanes[0].y, _sectionPlanes[0].z, _sectionPlanes[0].w));\n    }\n  }\n\n  function onSceneUpdated(_ref) {let { objectsMoved } = _ref;\n    if (objectsMoved) {\n      updateSections();\n    }\n  }\n\n  /*function mix(a, b, val) {\n      return a * (1.0 - val) + b * val;\n  }*/\n\n  function getDiffuseColor(material) {\n    return material && material.color || new THREE.Color(0xffffff);\n  }\n\n  /*function getSpecularColor(material) {\n      return (material && material.specular) || new THREE.Color(0xffffff);\n  }\n   function tintColor(c) {\n      var intensity = Autodesk.Viewing.Extensions.Section.tintIntensity;\n      var tc = _tintColor;\n      c.r = mix(c.r, tc.r, intensity);\n      c.g = mix(c.g, tc.g, intensity);\n      c.b = mix(c.b, tc.b, intensity);\n  }*/\n\n\n  // Use the same fragment iterator for all fragments\n  var _fragIterator = new avp.FragmentIterator({ delay: 50 });\n\n  function updateCapMeshes(plane) {\n    if (!_displaySectionHatches) {\n      // LMV-5781: Do not render the section hatches if the preference is turned on.\n      return;\n    }\n    const cg = Autodesk.Viewing.Extensions.CompGeom;\n\n    //When drawing a 2D material in 3D space we will want to skip binding the G-buffer\n    //when rendering the scene that contains that material\n    _viewer.sceneAfter.skipDepthTarget = true;\n\n    _removeSections();\n\n    var section3D = new THREE.Object3D();\n    section3D.name = \"section3D\";\n    _viewer.scene.add(section3D);\n\n    var section2D = new THREE.Object3D();\n    section2D.name = \"section2D\";\n    _viewer.sceneAfter.add(section2D);\n\n    var toPlaneCoords = cg.makePlaneBasis(plane);\n    var fromPaneCoords = toPlaneCoords.clone().invert();\n\n    var mat2dname = _viewer.matman().create2DMaterial(null, { skipCircles: true, skipEllipticals: true, isScreenSpace: true, noIdOutput: true }, false, false);\n    var mat2d = _viewer.matman().findMaterial(null, mat2dname);\n    mat2d.transparent = true;\n    mat2d.depthTest = true;\n    mat2d.polygonOffset = true;\n    mat2d.polygonOffsetFactor = -1;\n    mat2d.polygonOffsetUnits = 0.1; // 1.0 is usually way too high, see LMV-1072\n    mat2d.cutplanes = _otherCutPlanes; // make sure that cap meshes respect cutplanes from other tools\n    mat2d.doNotCut = true;\n\n    var box = new THREE.Box3();\n\n    var models = _viewer.modelQueue().getModels().filter((m) => !m.getDoNotCut());\n\n    var intersects = [];\n    var material;\n    const matrixWorld = new THREE.Matrix4();\n\n    // Start iterating the fragments\n    _fragIterator.start(models, function (fragId, dbId, model, lastFrag) {\n\n      // Collect intersections for this fragment\n      var frags = model.getFragmentList();\n      if (frags.isFragVisible(fragId)) {\n        frags.getWorldBounds(fragId, box);\n        if (cg.xBoxPlane(plane, box)) {\n          const geometry = frags.getGeometry(fragId);\n          const _material = frags.getMaterial(fragId);\n\n          if (geometry && !geometry.is2d && !geometry.isLines && _material.cutplanes) {\n            material = _material;\n            frags.getWorldMatrix(fragId, matrixWorld);\n            cg.xMeshPlane(plane, { geometry, matrixWorld, fragId }, intersects);\n          }\n        }\n      }\n\n      // If this is the last fragment for dbId, process the intersections\n      if (lastFrag) {\n        if (intersects.length) {\n\n          var bbox = new THREE.Box3();\n          cg.convertToPlaneCoords(toPlaneCoords, intersects, bbox);\n\n          //Create the 2D line geometry\n          var vbb = new avp.VertexBufferBuilder(false, 8 * intersects.length);\n\n          var color = getDiffuseColor(material);\n          var r = 0 | color.r * 0.25 * 255.5;\n          var g = 0 | color.g * 0.25 * 255.5;\n          var b = 0 | color.b * 0.25 * 255.5;\n\n          var c = 0xff000000 | b << 16 | g << 8 | r;\n\n\n          var eset = new cg.EdgeSet(intersects, bbox, bbox.getSize(new THREE.Vector3()).length() * 1e-6);\n          eset.snapEdges();\n          eset.sanitizeEdges();\n          eset.stitchContours();\n\n          //Create the 3D mesh\n          var cset = eset.triangulate({ skipOpenContour: true });\n\n          if (cset) {\n\n            for (let j = 0; j < cset.contours.length; j++) {\n\n              var cntr = cset.contours[j];\n\n              for (var k = 1; k < cntr.length; k++) {\n                var pt1 = cset.pts[cntr[k - 1]];\n                var pt2 = cset.pts[cntr[k]];\n                vbb.addSegment(pt1.x, pt1.y, pt2.x, pt2.y, 0, -2.0, /*isClosed ? c : rc*/c, dbId, 0);\n              }\n\n            }\n\n\n            var mdata = { mesh: vbb.toMesh() };\n\n            var bg2d = avp.BufferGeometryUtils.meshToGeometry(mdata);\n\n            bg2d.streamingDraw = true;\n            bg2d.streamingIndex = true;\n\n            var mesh2d = new THREE.Mesh(bg2d, mat2d);\n\n            mesh2d.matrix.copy(fromPaneCoords);\n            mesh2d.matrixAutoUpdate = false;\n            mesh2d.frustumCulled = false;\n            mesh2d.modelId = model.id; // So we can look it up later\n            mesh2d.dbId = dbId;\n            section2D.add(mesh2d);\n\n            //Create triangulated capping polygon\n            {\n              if (!cset.triangulationFailed) {\n\n                var bg = cset.toPolygonMesh(material.packedNormals);\n\n                var mat = _viewer.matman().cloneMaterial(material, model);\n\n                // If the material is prism, clear all the map definitions.\n                if (mat.prismType != null) {\n                  mat.defines = {};\n                  mat.defines[mat.prismType.toUpperCase()] = \"\";\n                  if (mat.prismType == \"PrismWood\") {\n                    mat.defines[\"NO_UVW\"] = \"\";\n                  }\n                }\n\n                mat.packedNormals = material.packedNormals;\n                mat.mrtIdBuffer = material.mrtIdBuffer;\n                mat.mrtNormals = material.mrtNormals;\n                mat.cutplanes = _otherCutPlanes; // make sure that cap meshes respect cutplanes from other tools\n                mat.side = THREE.FrontSide;\n                mat.depthTest = true;\n                mat.map = null;\n                mat.bumpMap = null;\n                mat.normalMap = null;\n                mat.alphaMap = null;\n                mat.specularMap = null;\n                mat.transparent = false;\n                mat.depthWrite = true;\n                mat.hatchPattern = true;\n                mat.needsUpdate = true;\n                mat.doNotCut = true;\n\n                var materialId = material.id + 2;\n                var angle = materialId * Math.PI * 0.125;\n                var tan = Math.tan(angle);\n                mat.hatchParams = new THREE.Vector2(tan, 10.0);\n                mat.hatchTintColor = new THREE.Color(_tintColor.r, _tintColor.g, _tintColor.b);\n                mat.hatchTintIntensity = _tintIntensity;\n\n                var capmesh = new THREE.Mesh(bg, mat);\n                capmesh.matrix.copy(fromPaneCoords);\n                capmesh.matrixAutoUpdate = false;\n                capmesh.modelId = model.id; // So we can look it up later\n                capmesh.dbId = dbId;\n                capmesh.fragId = intersects.fragId;\n\n                section3D.add(capmesh);\n              }\n\n            }\n\n          }\n        }\n\n        // Clear intersections for the next dbId\n        intersects.length = 0;\n      } // last Fragment for dbId\n\n    }, () => {\n      // The cap scene is in sceneAfter, so we need to redraw the model to see the caps.\n      // LMV-2571 - clear the render, as otherwise we will draw transparent objects atop themselves.\n      _viewer.invalidate(true, true);\n    }); //_fragIterator.start\n\n  }\n\n  // We use an own cut plane set to distinguish our own cut planes from others.\n  var _ownCutPlaneSet = 'Autodesk.Viewing.Extension.Section.SectionTool';\n\n  // Make sure that the viewer always uses the SectionTool's plane to adjust 2D rendering resolution.\n  _viewer.setCutPlaneSetFor2DRendering(_ownCutPlaneSet);\n\n  // Keep track of cutplanes that are not our own, because we have to apply them to our cap meshes\n  var _otherCutPlanes = [];\n\n  // Trigger update of cap mesh materials if number of cutplanes have changed by other tools\n  function updateCapMaterials(mrtOnly) {\n\n    function update(section) {\n      // apply cutplanes to all active cap meshes\n      if (!section) {\n        return;\n      }\n\n      section.traverse(function (obj) {\n        // we only care for THREE.Mesh with material\n        if (!(obj instanceof THREE.Mesh) || !obj.material) {\n          return;\n        }\n        if (mrtOnly) {\n          _viewer.matman().adjustMaterialMRTSetting(obj.material);\n        } else {\n          obj.material.needsUpdate = true;\n        }\n      });\n    }\n\n    update(_viewer.scene.getObjectByName(\"section3D\"));\n    update(_viewer.sceneAfter.getObjectByName(\"section2D\"));\n  }\n\n  /**\n   * Returns all transformed bounding box corners\n   * @param {THREE.Box3} bbox - Input Bounding Box\n   * @param {THREE.Matrix4} transform - Transformation to apply to each point\n   * @returns {THREE.Vector3[]} Transformed corners\n   */\n  function getBBoxCorners(bbox, transform) {\n    var points = [\n    new THREE.Vector3(bbox.min.x, bbox.min.y, bbox.min.z).applyMatrix4(transform),\n    new THREE.Vector3(bbox.min.x, bbox.min.y, bbox.max.z).applyMatrix4(transform),\n    new THREE.Vector3(bbox.min.x, bbox.max.y, bbox.min.z).applyMatrix4(transform),\n    new THREE.Vector3(bbox.min.x, bbox.max.y, bbox.max.z).applyMatrix4(transform),\n    new THREE.Vector3(bbox.max.x, bbox.min.y, bbox.min.z).applyMatrix4(transform),\n    new THREE.Vector3(bbox.max.x, bbox.min.y, bbox.max.z).applyMatrix4(transform),\n    new THREE.Vector3(bbox.max.x, bbox.max.y, bbox.min.z).applyMatrix4(transform),\n    new THREE.Vector3(bbox.max.x, bbox.max.y, bbox.max.z).applyMatrix4(transform)];\n\n    return points;\n  }\n\n  /**\n   * Creates quadratic triangle and outline meshes for the given plane\n   * @param {THREE.Plane} plane\n   * @param {THREE.Vector3} position - Mesh position, will be reprojected to plane\n   * @param {Number} [size] - Size of the plane mesh\n   * @returns {SectionMesh}\n   */\n  function createPlaneMesh(plane, position) {let size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var quat = new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 0, 1), plane.normal);\n    var geometry;\n\n    geometry = new THREE.PlaneBufferGeometry(size, size);\n\n    var material = new THREE.MeshBasicMaterial({\n      opacity: 0,\n      color: _selectionColor,\n      side: THREE.DoubleSide,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n\n    var mesh = new SectionMeshClass(geometry, material, plane);\n    const pt = plane.projectPoint(position, new THREE.Vector3());\n    mesh.position.copy(pt);\n    mesh.quaternion.multiply(quat);\n\n    // add outline with inverted background color\n    var presetIndex = _viewer.currentLightPreset();\n    presetIndex = Math.max(0, presetIndex);\n    var bgColor = Autodesk.Viewing.Private.LightPresets[presetIndex].bgColorGradient;\n    // TODO: these calculations can lead to float colors, which are ignored by three.js and instead interpreted as white\n    // In r125 the float colors generate an \"Unknown color\" warning\n    var color = \"rgb(\" + (255 - bgColor[0]) + \",\" + (255 - bgColor[1]) + \",\" + (255 - bgColor[2]) + \")\";\n    var lineMaterial = new THREE.LineBasicMaterial({ color: color, linewidth: 1, depthTest: false, depthWrite: false, transparent: true });\n\n    var pos = mesh.geometry.getAttribute('position');\n    const vertices = [];\n    for (var i = 0; i < _outlineIndices.length; i++) {\n      vertices.push(new THREE.Vector3().fromBufferAttribute(pos, _outlineIndices[i]));\n    }\n\n    const line = new THREE.Line(new THREE.BufferGeometry().setFromPoints(vertices), lineMaterial);\n    mesh.add(line);\n    mesh.outline = line;\n\n    return mesh;\n  }\n\n  function updatePlaneMeshes(rebuild) {\n\n    traverseSections(function (child) {\n      if (child instanceof SectionMeshClass) {\n\n        let pos;\n        if (child.connectivity.length > 0) {\n          // section box\n          var minv = child.matrixWorld.clone().invert();\n          const pt = new THREE.Vector3();\n          pos = child.geometry.getAttribute('position');\n          for (let i = 0; i < pos.count; i++) {\n            var connect = child.connectivity[i];\n            if (intersectPlanes(child.plane, connect[0], connect[1], pt) !== null) {\n              pt.applyMatrix4(minv);\n              pos.setXYZ(i, pt.x, pt.y, pt.z);\n            }\n          }\n          pos.needsUpdate = true;\n          child.geometry.computeBoundingBox();\n          child.geometry.computeBoundingSphere();\n        } else if (rebuild) {\n          // section plane\n          var bbox = _viewer.getVisibleBounds();\n          var size = 2.0 * bbox.getBoundingSphere(new THREE.Sphere()).radius;\n          const pt = child.plane.projectPoint(bbox.getCenter(new THREE.Vector3()), new THREE.Vector3());\n          child.geometry = new THREE.PlaneBufferGeometry(size, size);\n          child.position.copy(pt);\n\n          pos = child.geometry.getAttribute('position');\n        }\n        if (pos) {\n          for (let i = 0; i < _outlineIndices.length; i++) {\n            child.outline.geometry.attributes.position.setXYZ(i,\n            pos.getX(_outlineIndices[i]),\n            pos.getY(_outlineIndices[i]),\n            pos.getZ(_outlineIndices[i])\n            );\n          }\n          child.outline.geometry.attributes.position.needsUpdate = true;\n        }\n      }\n    });\n  }\n\n  function traverseSections(callback) {\n    for (var i = 0; i < _sectionGroups.length; i++) {\n      _sectionGroups[i].traverse(callback);\n    }\n  }\n\n  function setSectionPlanes() {let fireEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    traverseSections(function (child) {\n      if (child instanceof SectionMeshClass) {\n        child.update();\n      }\n    });\n    if (_sectionPlanes.length === 1) {\n      updateCapMeshes(new THREE.Plane().setComponents(_sectionPlanes[0].x, _sectionPlanes[0].y, _sectionPlanes[0].z, _sectionPlanes[0].w));\n    }\n    _viewer.setCutPlaneSet(_ownCutPlaneSet, _sectionPlanes, fireEvent);\n  }\n\n  function showPlane(set) {\n    for (var i = 0; i < _sectionGroups.length; i++) {\n      _sectionGroups[i].visible = set;\n    }\n\n    if (_isPlaneOn !== set)\n    updateViewer();\n\n    _isPlaneOn = set;\n  }\n\n  function showSection(set) {\n    if (set && _sectionPlanes.length > 0) {\n      if (_sectionPlanes.length === 1) {\n        updateCapMeshes(new THREE.Plane().setComponents(_sectionPlanes[0].x, _sectionPlanes[0].y, _sectionPlanes[0].z, _sectionPlanes[0].w));\n      }\n      _viewer.setCutPlaneSet(_ownCutPlaneSet, _sectionPlanes);\n    }\n    showPlane(set);\n  }\n\n  function attachControl(control, mesh) {\n    control.attach(mesh);\n    control.setPosition(mesh.position);\n    control.visible = true;\n  }\n\n  /**\n   * Checks whether the normal points away from the camera and if so flips it\n   * @param {THREE.Vector3} normal\n   * @returns true, if normal was flipped\n   */\n  function checkNormal(normal) {\n    // flip normal if facing inward as eye direction\n    var eyeVec = _viewer.api.navigation.getEyeVector();\n    if (eyeVec.dot(normal) > 0) {\n      normal.negate();\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Does the normal need to be flipped to point to the camera ?\n   * @param {THREE.Vector3} normal\n   * @returns {Boolean} True, if it needs to be flipped\n   */\n  function shouldFlipNormal(normal) {\n    // flip normal if facing inward as eye direction\n    var eyeVec = _viewer.api.navigation.getEyeVector();\n    return eyeVec.dot(normal) > 0;\n  }\n\n  /**\n   * Define plane in local space\n   * @param {THREE.Vector3} normal - Plane normal in local space\n   */\n  this.setPlaneLocal = function (normal) {\n    let normalWorld = normal.clone().applyMatrix3(_normalMatrix).normalize();\n    this.setPlane(normalWorld, undefined, true, true);\n  };\n\n  /**\n   * Define plane in world space\n   * @param {THREE.Vector3} normal - Plane normal in world space\n   * @param {Number} [distance] - Plane distance in world space,\n   *                              uses distance to intersection through screen center if none is provided\n   * @param {Boolean} [fireEvent] - If ture, fire cutplane change event\n   * @param {Boolean} [checkNormal] - If true, plane gets oriented towards the camera\n   */\n  this.setPlane = function (normal, distance) {let fireEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;let checkNormal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var obbox = _viewer.getVisibleBounds();\n    var center = obbox.getCenter(new THREE.Vector3());\n    var group = new THREE.Group();\n\n    group.applyMatrix4(_transform);\n    group.updateMatrixWorld();\n\n    if (!distance)\n    distance = this.getSectionDistance(normal);\n\n    if (checkNormal && shouldFlipNormal(normal)) {\n      normal.negate();\n      distance = -distance;\n    }\n\n    // Calculate the plane signed distance using the dot product of the center point of the scene bounding box\n    // and the normal vector.\n    distance = distance !== undefined ? distance : -1 * center.dot(normal);\n\n    // Plane and mesh are defined in local space so we need to transform normal and center first\n    var plane = new THREE.Plane(normal.clone().applyMatrix3(_inverseNormalMatrix).normalize(), distance);\n    var mesh = createPlaneMesh(plane,\n    center.clone().applyMatrix4(_inverseTransform),\n    2.0 * obbox.getBoundingSphere(new THREE.Sphere()).radius);\n\n    group.add(mesh);\n\n    // Apply transformations before using the plane info\n    mesh.update();\n\n    _sectionPlanes.push(mesh.planeVec);\n    _sectionGroups.push(group);\n    _viewer.addOverlay(_overlayName, group);\n    if (_transRotControl) {\n      attachControl(_transRotControl, mesh);\n      mesh.material.opacity = 0;\n      centerPlaneArrow(mesh);\n      _transRotControl.showRotationGizmos(true);\n      _sectionPicker = _transRotControl.getPicker();\n\n    }\n    setSectionPlanes(fireEvent);\n    if (_active) {\n      updateControls();\n    }\n  };\n\n  function getCenterPoint(mesh) {\n    var middle = new THREE.Vector3();\n    var geometry = mesh.geometry;\n\n    geometry.computeBoundingBox();\n\n    middle.x = (geometry.boundingBox.max.x + geometry.boundingBox.min.x) / 2;\n    middle.y = (geometry.boundingBox.max.y + geometry.boundingBox.min.y) / 2;\n    middle.z = (geometry.boundingBox.max.z + geometry.boundingBox.min.z) / 2;\n\n    mesh.localToWorld(middle);\n    return middle;\n  }\n\n  /**\n   * Places the arrow at the center of the passed mesh.\n   * @param {THREE.Mesh} mesh - Plane mesh\n   * @returns {Boolean} True, if the arrow could be placed\n   */\n  function centerPlaneArrow(mesh) {\n    if (!_transRotControl || !mesh) return false;\n    // Get the center of the plane and\n    // calculate the x,y,z offset between the plane position and the plane center\n    var centerOffset = getCenterPoint(mesh).sub(mesh.getWorldPosition(new THREE.Vector3()));\n\n    // Set the gizmo offset\n    _transRotControl.setGizmoOffset(centerOffset);\n    return true;\n  }\n\n  /**\n   * Computes the maximal distance between the transformed corner points of the AABox and a plane\n   * @param {THREE.Box3} bbox - Axis Aligned Bounding Box\n   * @param {THREE.Plane} plane\n   * @param {THREE.Matrix4} [transform] - Transform to apply\n   * @returns {Number} Maximal distance\n   */\n  function getMaxDistanceToPlane(bbox, plane) {let transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new THREE.Matrix4();\n    let points = getBBoxCorners(bbox, transform);\n    let max = Number.MIN_VALUE;\n\n    for (let i = 0; i < points.length; ++i) {\n      const perpendicularMagnitude = plane.distanceToPoint(points[i]);\n      if (perpendicularMagnitude > max)\n      max = perpendicularMagnitude;\n    }\n    return max;\n  }\n\n  function setBox(planeSet) {\n    var normals = [\n    new THREE.Vector3(1, 0, 0),\n    new THREE.Vector3(0, 1, 0),\n    new THREE.Vector3(0, 0, 1),\n    new THREE.Vector3(-1, 0, 0),\n    new THREE.Vector3(0, -1, 0),\n    new THREE.Vector3(0, 0, -1)];\n\n\n    var connectivities = [\n    [[1, 2], [1, 5], [2, 4], [4, 5]], // 0\n    [[3, 5], [0, 5], [2, 3], [0, 2]], // 1\n    [[1, 3], [0, 1], [3, 4], [0, 4]], // 2\n    [[1, 5], [1, 2], [4, 5], [2, 4]], // 3\n    [[2, 3], [0, 2], [3, 5], [0, 5]], // 4\n    [[0, 1], [3, 1], [0, 4], [3, 4]] // 5\n    ];\n\n    var group = new THREE.Group();\n    var obbox = _viewer.getVisibleBounds();\n    var bbox = new THREE.Box3(obbox.min, obbox.getCenter(new THREE.Vector3()));\n    var centerGlobal = bbox.getCenter(new THREE.Vector3());\n    var planes = [],meshes = [];\n    var mesh, plane;\n\n    // Initialize from planeSet ONLY if it's an AABB.\n    var loadingBox = false;\n    if (planeSet && planeSet.length === 6) {\n      // Transform planes to local space\n      for (let i = 0; i < planeSet.length; ++i) {\n        let plane = new THREE.Plane(new THREE.Vector3(planeSet[i].x, planeSet[i].y, planeSet[i].z), planeSet[i].w);\n        plane.applyMatrix4(_inverseTransform);\n        planes.push(plane);\n      }\n\n      if (1.0 - planes[0].normal.x <= Number.EPSILON) {\n        // Assume that the order on planes is the same as in Array of normals defined above\n        bbox = new THREE.Box3(\n          new THREE.Vector3(planes[3].constant, planes[4].constant, planes[5].constant),\n          new THREE.Vector3(-planes[0].constant, -planes[1].constant, -planes[2].constant)\n        );\n\n        centerGlobal = bbox.getCenter(new THREE.Vector3()).applyMatrix4(_transform);\n        loadingBox = true;\n      }\n    }\n\n    ////center = obbox.max;   // Use this to initialize the box around the model\n    ////bbox = obbox.clone(); // Use this to initialize the box around the model\n\n    group.applyMatrix4(_transform);\n    group.updateMatrixWorld();\n\n    for (let i = 0; i < normals.length; i++) {\n      if (!loadingBox) {\n        plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normals[i], centerGlobal.clone().applyMatrix4(_inverseTransform));\n        let offset = getMaxDistanceToPlane(bbox, plane, _inverseTransform);\n\n        plane.constant -= offset;\n        planes.push(plane);\n      }\n\n      mesh = createPlaneMesh(planes[i], centerGlobal);\n\n      group.add(mesh);\n      meshes.push(mesh);\n      mesh.update();\n\n      _sectionPlanes.push(mesh.planeVec);\n    }\n\n    // build connectivity\n    for (let i = 0; i < meshes.length; i++) {\n      mesh = meshes[i];\n      var connectivity = connectivities[i];\n      for (var j = 0; j < connectivity.length; j++) {\n        var nc = [];\n        var ct = connectivity[j];\n        for (var k = 0; k < ct.length; k++) {\n          nc.push(planes[ct[k]]);\n        }\n        mesh.connectivity.push(nc);\n      }\n    }\n\n    _sectionGroups.push(group);\n    _viewer.addOverlay(_overlayName, group);\n\n    setSectionPlanes();\n    updatePlaneMeshes();\n\n    plane = _sectionGroups[0].children[0];\n    attachControl(_transRotControl, plane);\n    // Set the plane opacity\n    plane.material.opacity = _selectionOpacity;\n    centerPlaneArrow(plane);\n\n    attachControl(_transControl, _sectionGroups[0]);\n    _transRotControl.showRotationGizmos(false);\n    _sectionPicker = _transRotControl.getPicker().concat(_transControl.getPicker());\n    // Calculate the offset to the max point of the bounding box.\n    var cornerOffset = new THREE.Vector3();\n    if (intersectPlanes(planes[0], planes[1], planes[2], cornerOffset) !== null) {\n      _transControl.setGizmoOffset(cornerOffset.add(new THREE.Vector3().setFromMatrixPosition(_transform).negate()));\n    }\n  }\n\n  var intersectPlanes = function () {\n    var m = new THREE.Matrix3();\n    var n23 = new THREE.Vector3();\n    var n31 = new THREE.Vector3();\n    var n12 = new THREE.Vector3();\n    return function (plane1, plane2, plane3, optionalTarget) {\n      m.set(plane1.normal.x, plane1.normal.y, plane1.normal.z,\n      plane2.normal.x, plane2.normal.y, plane2.normal.z,\n      plane3.normal.x, plane3.normal.y, plane3.normal.z);\n\n      var det = m.determinant();\n      if (det === 0) return null;\n\n      n23.crossVectors(plane2.normal, plane3.normal).multiplyScalar(-plane1.constant);\n      n31.crossVectors(plane3.normal, plane1.normal).multiplyScalar(-plane2.constant);\n      n12.crossVectors(plane1.normal, plane2.normal).multiplyScalar(-plane3.constant);\n\n      var result = optionalTarget || new THREE.Vector3();\n      return result.copy(n23).add(n31).add(n12).divideScalar(det);\n    };\n  }();\n\n  var intersectObjects = function (pointer, objects, recursive) {\n    return THREE.TransformControls.intersectObjects(pointer.canvasX, pointer.canvasY, objects, _viewer.camera, recursive);\n  };\n\n  // public functions\n\n  /**\n   * When active, the geometry will be sectioned by the current set cut plane.\n   * @returns {boolean}\n   */\n  this.isActive = function () {\n    return _active;\n  };\n\n  /**\n   * Returns the signed distance of the sectioning plane from the origin\n   * @returns {Number} distance. Null distance is returned if there is no hit found from raycast\n   */\n  this.getSectionDistance = function (normal) {\n    // Find a target point in the direction of the camera\n    var eyeVec = _viewer.api.navigation.getEyeVector();\n    var hit = _viewer.rayIntersect(new THREE.Ray(_viewer.camera.position, eyeVec));\n\n    // Distance\n    return hit && hit.intersectPoint && -1 * hit.intersectPoint.dot(normal);\n  };\n\n  /**\n   * Enables the cut planes that were created by the viewer.setCutPlanes() function.\n   * @param {boolean} [fireEvent] - if set to false the av.CUTPLANES_CHANGE_EVENT event will not be fired.\n   */\n  this.setViewerSection = function () {let fireEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.clearSection(fireEvent);\n    var normal;\n    // Attempt to initialize the tool with a plane that is already set.\n    var planeSet = _viewer.getCutPlaneSet('__set_view');\n    if (planeSet.length !== 1) return;\n\n    _transRotControl.clientScale = 1;\n    var v4 = planeSet[0];\n    normal = new THREE.Vector3(v4.x, v4.y, v4.z);\n    var distance = v4.w;\n    this.setPlane(normal, distance, fireEvent);\n    _activeMode = 'SET_VIEW_PLANE';\n    // Clear sections from Viewer3D::setView\n    _viewer.setCutPlaneSet('__set_view', undefined, fireEvent);\n  };\n\n\n\n  /**\n   * Facilitates the initialization of a cut plane\n   *\n   * @param {String} name - Either 'X', 'Y', 'Z', 'BOX', 'OBJ_BOX', 'OBJ_SET_VIEW_PLANE' or 'SET_VIEW_PLANE'\n   */\n  this.setSection = function (name) {\n    this.clearSection();\n    var normal;\n    _transRotControl.clientScale = 1;\n\n    // Attempt to initialize the tool with a plane that is already set.\n    var planeSet = _viewer.getCutPlaneSet('__set_view');\n    if (planeSet.length === 1 && name !== 'BOX' && name !== 'OBJ_SET_VIEW_PLANE') {\n      name = 'SET_VIEW_PLANE';\n    }\n    switch (name) {\n      case 'X':\n        normal = new THREE.Vector3(1, 0, 0);\n        this.setPlaneLocal(normal);\n        break;\n      case 'Y':\n        normal = new THREE.Vector3(0, 1, 0);\n        this.setPlaneLocal(normal);\n        break;\n      case 'Z':\n        normal = new THREE.Vector3(0, 0, 1);\n        this.setPlaneLocal(normal);\n        break;\n      case 'OBJ_SET_VIEW_PLANE':\n      case 'SET_VIEW_PLANE':\n        var v4 = planeSet[0];\n        normal = new THREE.Vector3(v4.x, v4.y, v4.z);\n        this.setPlane(normal, v4.w);\n        break;\n      case 'OBJ_BOX':\n      case 'BOX':\n        setBox(planeSet);\n        _transRotControl.clientScale = 2;\n        this.recomputePivot();\n        break;\n    }\n    _activeMode = name;\n\n    // Clear sections from Viewer3D::setView\n    _viewer.setCutPlaneSet('__set_view', undefined);\n  };\n\n  /**\n   * Facilitates the initialization of a cut plane from a normal and distance\n   *\n   * @param {THREE.Vector4} normal (x,y,z) and distance (w)\n   * @param {Number} distance\n   */\n  this.setSectionFromPlane = function (cutplane) {\n    this.clearSection();\n    this.setPlane(new THREE.Vector3(cutplane.x, cutplane.y, cutplane.z), cutplane.w);\n    _activeMode = \"\";\n\n    // Clear sections from Viewer3D::setView\n    _viewer.setCutPlaneSet('__set_view', undefined);\n  };\n\n  /**\n   * Set the active mode\n   * @param {string} [name] - active mode name\n   * @private\n   */\n  this.setActiveMode = function (name) {\n    _activeMode = name || \"\";\n  };\n\n  /**\n   * Remove the section graphics\n   */\n  function _removeSections() {\n    var oldsection3D = _viewer.scene.getObjectByName(\"section3D\");\n    if (oldsection3D)\n    _viewer.scene.remove(oldsection3D);\n    var oldsection2D = _viewer.sceneAfter.getObjectByName(\"section2D\");\n    if (oldsection2D)\n    _viewer.sceneAfter.remove(oldsection2D);\n  }\n\n  this.setDisplaySectionHatches = function (value) {\n    _displaySectionHatches = value;\n  };\n\n  this.clearCapMeshes = function () {\n    _removeSections();\n  };\n\n  this.updateCapMeshes = function (plane, capMeshOnly) {\n    if (!plane) {\n      return;\n    }\n\n    if (!capMeshOnly) {\n      this.setPlane(plane.normal, plane.constant);\n    }\n    updateCapMeshes(plane);\n  };\n\n  /**\n   * Removes any (and all) currently set cut plane(s).\n   * @param {boolean} [fireEvent] - if set to false the av.CUTPLANES_CHANGE_EVENT event will not be fired.\n   */\n  this.clearSection = function () {let fireEvent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    if (_transRotControl)\n    _transRotControl.detach();\n\n    if (_transControl)\n    _transControl.detach();\n\n    // remove all sections\n    while (_sectionPlanes.length > 0) {\n      _sectionPlanes.pop();\n    }\n\n    while (_sectionGroups.length > 0) {\n      var group = _sectionGroups.pop();\n      _viewer.removeOverlay(_overlayName, group);\n    }\n\n    _fragIterator.start(null); // Shutdown iterator\n    _removeSections();\n\n    _viewer.setCutPlaneSet(_ownCutPlaneSet, null, fireEvent);\n  };\n\n  this.isPlaneOn = function () {\n    return _isPlaneOn;\n  };\n\n  this.showPlane = function (set) {\n    showPlane(set);\n  };\n\n  /**\n   * Whether translation and rotation controls are visible or not.\n   * @param {Boolean} set\n   */\n  this.attachControl = function (set) {\n    if (!_transRotControl || !_transControl) {\n      return;\n    }\n\n    if (set) {\n      attachControl(_transRotControl, _sectionGroups[0].children[0]);\n      _transRotControl.highlight();\n      if (_activeMode === 'BOX')\n      attachControl(_transControl, _sectionGroups[0]);\n    } else {\n      _transRotControl.detach();\n      _transControl.detach();\n    }\n  };\n\n  /**\n   * Invokes setSection with the last set of parameters used.\n   */\n  this.resetSection = function () {\n    this.setSection(_activeMode);\n  };\n\n  // tool interface\n\n  this.getNames = function () {\n    return _names;\n  };\n\n  this.getName = function () {\n    return _names[0];\n  };\n\n  this.register = function () {\n  };\n\n  this.deregister = function () {\n    this.clearSection();\n    deinitControl();\n  };\n\n  this.getPriority = function () {\n    return _priority;\n  };\n\n  /**\n   * [ToolInterface] Activates the tool\n   * @param {String} name - unused\n   */\n  this.activate = function /*name*/ () {\n\n    setTransform(getDefaultTransform());\n\n    initControl();\n\n    _active = true;\n    _isDragging = false;\n    _visibleAtFirst = true;\n\n    // keep only one section all the time per design\n    _sectionPlanes = _sectionPlanes || [];\n\n    showSection(true);\n  };\n\n  /**\n   * [ToolInterface] Deactivates the tool\n   * @param {String} name - unused\n   */\n  this.deactivate = function /*name*/ () {\n    _active = false;\n    _isDragging = false;\n\n    if (!this.keepCutPlanesOnDeactivate) {\n      // Clean sections and gizmos when deactivating the tool.\n      _fragIterator.start(null); // Shutdown iterator\n      _removeSections();\n\n      showSection(false);\n      _viewer.setCutPlaneSet(_ownCutPlaneSet);\n    } else {\n      // In case that keepCutPlanesOnDeactivate is set, the control gizmos will disappear, but the sections will stay.\n      _viewer.removeOverlay(_overlayName, _transRotControl);\n      _viewer.removeOverlay(_overlayName, _transControl);\n\n      for (let i = 0; i < _sectionGroups.length; i++) {\n        _viewer.removeOverlay(_overlayName, _sectionGroups[i]);\n      }\n    }\n\n    _transRotControl.detach();\n    _transControl.detach();\n  };\n\n  this.update = function /*highResTimestamp*/ () {\n    return false;\n  };\n\n  this.handleSingleClick = function (event /*, button*/) {var _sectionGroups$;\n    var pointer = event;\n    var result = intersectObjects(pointer, (_sectionGroups$ = _sectionGroups[0]) === null || _sectionGroups$ === void 0 ? void 0 : _sectionGroups$.children);\n    _sectionGroups[0].children.forEach(function (child) {\n      child.material.opacity = 0;\n    });\n\n    if (result) {var _sectionGroups$2;\n      const prevObject = _transRotControl.object;\n      attachControl(_transRotControl, result.object);\n      _transRotControl.highlight();\n      result.object.material.opacity = _sectionPlanes.length > 1 ? _selectionOpacity : 0;\n      // Only in case of a section box, and only when clicking on a different plane - re-center the arrow.\n      if (((_sectionGroups$2 = _sectionGroups[0]) === null || _sectionGroups$2 === void 0 ? void 0 : _sectionGroups$2.children.length) > 1 && prevObject !== result.object) {\n        centerPlaneArrow(result.object);\n      }\n      updateViewer();\n      adjustGizmoToBounds();\n    }\n\n    return false;\n  };\n\n  this.handleDoubleClick = function /*event, button*/ () {\n    return false;\n  };\n\n  this.handleSingleTap = function (event) {\n    return this.handleSingleClick(event, 0);\n  };\n\n  this.handleDoubleTap = function /*event*/ () {\n    return false;\n  };\n\n  this.handleKeyDown = function /*event, keyCode*/ () {\n    return false;\n  };\n\n  this.handleKeyUp = function /*event, keyCode*/ () {\n    return false;\n  };\n\n  this.handleWheelInput = function /*delta*/ () {\n    return false;\n  };\n\n  this.handleButtonDown = function (event /*, button*/) {\n    _isDragging = true;\n    if (_transControl.onPointerDown(event))\n    return true;\n    return _transRotControl.onPointerDown(event);\n  };\n\n  this.handleButtonUp = function (event /*, button*/) {\n    _isDragging = false;\n    if (_boxChanged) {\n      _boxChanged = false;\n      this.recomputePivot();\n    }\n    if (_transControl.onPointerUp(event))\n    return true;\n    return _transRotControl.onPointerUp(event);\n  };\n\n  this.handleMouseMove = function (event) {\n    if (_isDragging) {\n      if (_transControl.onPointerMove(event)) {\n        _boxChanged = true;\n        setSectionPlanes();\n        _transRotControl.update();\n\n        sendAnalyticsDebounced('Canvas', 'Box', 'translate');\n\n        return true;\n      }\n      if (_transRotControl.onPointerMove(event)) {\n        _boxChanged = true;\n        setSectionPlanes();\n        updatePlaneMeshes();\n        // TODO: Try to position the triad to the max corner of the section box when moving the plane arrow.\n        // Currently, it is positioned at the max point of the section box.\n\n        if (_activeMode.includes('BOX'))\n        sendAnalyticsDebounced('Canvas', 'Box', 'transform');else\n        {\n          const mode = _transRotControl.axis.search(\"R\") != -1 ? \"rotate\" : \"translate\";\n          sendAnalyticsDebounced('Canvas', 'Plane', mode);\n        }\n\n        return true;\n      }\n    }\n\n    _transControl.visible = _transControl.object !== undefined;\n\n    if (event.pointerType !== 'touch') {var _sectionGroups$3;\n      var pointer = event;\n      var result = intersectObjects(pointer, (_sectionGroups$3 = _sectionGroups[0]) === null || _sectionGroups$3 === void 0 ? void 0 : _sectionGroups$3.children);\n      if (result) {\n        _visibleAtFirst = false;\n      }\n\n      // show gizmo + plane when intersecting on non-touch\n      var visible = _visibleAtFirst || result || intersectObjects(pointer, _sectionPicker, true) ? true : false;\n      _transRotControl.visible = visible;\n      _transControl.visible = _transControl.visible && visible;\n      showPlane(visible);\n    }\n\n    if (_transControl.onPointerHover(event))\n    return true;\n\n    return _transRotControl.onPointerHover(event);\n  };\n\n  this.handleGesture = function (event) {\n    switch (event.type) {\n      case \"dragstart\":\n        _touchType = \"drag\";\n        // Single touch, fake the mouse for now...\n        return this.handleButtonDown(event, 0);\n\n      case \"dragmove\":\n        return _touchType === \"drag\" ? this.handleMouseMove(event) : false;\n\n      case \"dragend\":\n        if (_touchType === \"drag\") {\n          _touchType = null;\n          return this.handleButtonUp(event, 0);\n        }\n        return false;\n    }\n    return false;\n  };\n\n  this.handleBlur = function /*event*/ () {\n    return false;\n  };\n\n  this.handleResize = function () {\n  };\n\n  this.handlePressHold = function /*event*/ () {\n    // When this method returns true, it will not call the DefaultHandler's handlePressHold.\n    // This makes it not possible to open the context menu on mobile.\n    return false;\n  };\n\n  this.recomputePivot = function () {\n\n    var values = this.getSectionBoxValues(true);\n    if (!values) return;\n\n    var aabb = values.sectionBox;\n\n    _viewer.api.navigation.setPivotPoint(new THREE.Vector3(\n      aabb[0] + (aabb[3] - aabb[0]) * 0.5,\n      aabb[1] + (aabb[4] - aabb[1]) * 0.5,\n      aabb[2] + (aabb[5] - aabb[2]) * 0.5\n    ));\n  };\n\n  this.getSectionBoxValues = function (ignoreGlobalOffset) {\n\n    var group = _sectionGroups[0];\n    if (!group) {\n      return null;\n    }\n\n    var planes = group.children;\n    if (planes.length < 6) {\n      return null;\n    }\n\n    var right = planes[0].position.x;\n    var top = planes[1].position.y;\n    var front = planes[2].position.z;\n    var left = planes[3].position.x;\n    var bttm = planes[4].position.y;\n    var back = planes[5].position.z;\n\n    var off = { x: 0, y: 0, z: 0 };\n    if (!ignoreGlobalOffset) {\n      off = _viewer.model.getData().globalOffset || off;\n    }\n\n    var aabb = [\n    Math.min(left, right) + off.x,\n    Math.min(top, bttm) + off.y,\n    Math.min(front, back) + off.z,\n    Math.max(left, right) + off.x,\n    Math.max(top, bttm) + off.y,\n    Math.max(front, back) + off.z];\n\n\n    // Box doesn't support rotation at the moment.\n    // Will have to take it into account if that becomes a feature.\n    var transform = new THREE.Matrix4().identity().toArray();\n\n    return {\n      sectionBox: aabb,\n      sectionBoxTransform: transform\n    };\n  };\n\n  this.getSectionPlaneValues = function (ignoreGlobalOffset) {\n\n    var group = _sectionGroups[0];\n    if (!group) {\n      return null;\n    }\n\n    var planes = group.children;\n    if (planes.length !== 1) {\n      return null;\n    }\n\n    var off = { x: 0, y: 0, z: 0 };\n    if (!ignoreGlobalOffset) {\n      off = _viewer.model.getData().globalOffset || off;\n    }\n\n    var plane = planes[0].plane;\n    var constant = plane.constant - THREE.Vector3.prototype.dot.call(off, plane.normal);\n\n    return {\n      sectionPlane: [\n      plane.normal.x,\n      plane.normal.y,\n      plane.normal.z,\n      constant]\n\n    };\n  };\n\n  this.getSectionPlaneSet = function () {\n    return _viewer.getCutPlaneSet(_ownCutPlaneSet);\n  };\n\n  this.getSectionPlanes = function () {\n    // When restoring a viewer state it is put in __set_view, so return from that set\n    // However, the notifyCutplanesChanged function can call setViewerSection which would\n    // move the planes from __set_view into _ownCutPlaneSet\n    const viewSet = _viewer.getCutPlaneSet('__set_view');\n    if (viewSet.length > 0) {\n      return viewSet;\n    }\n\n    return _viewer.getCutPlaneSet(_ownCutPlaneSet);\n  };\n\n  // Called by viewer if any cutplanes are modified. It makes sure that cutplanes controlled by separate tools\n  // (with own cutplane sets) are considered by our cap meshes.\n  this.notifyCutplanesChanged = function () {\n\n    var numCutPlanesBefore = _otherCutPlanes.length;\n\n    // Collect all active cutplanes from other tools\n    //\n    // NOTE: It's essential that we don't create a new array, but just refill the same one.\n    //       Since the cap meshes are created async, the cutPlaneChange event may come in the middle of\n    //       the cap mesh generation. For consistency, we want all cap meshes to share the same cutplane array.\n    _otherCutPlanes.length = 0;\n    var cpSets = _viewer.getCutPlaneSets();\n    for (var i = 0; i < cpSets.length; i++) {\n\n      // skip our own cut planes\n      var cpName = cpSets[i];\n      if (cpName === _ownCutPlaneSet) {\n        continue;\n      }\n\n      // add cutplanes of this set\n      var cp = _viewer.getCutPlaneSet(cpName);\n      for (var j = 0; j < cp.length; j++) {\n        _otherCutPlanes.push(cp[j]);\n      }\n    }\n\n    // Set the section tool to the viewer defined cutplane.\n    if (cpSets.includes(\"__set_view\") && _activeMode !== \"\" && _activeMode.indexOf(\"OBJ_\") === -1) {\n      this.setViewerSection(false);\n    }\n\n    // If the number of cutplanes changed, this requires a shader recompile of the cap materials\n    if (numCutPlanesBefore !== _otherCutPlanes.length) {\n      updateCapMaterials(false);\n    }\n  };\n\n  // Sections use cloned materials outside the control of MaterialManager. Thus, when rendering options change, materials need to get recompiled\n  this.notifyRenderOptionChanged = function () {\n    updateCapMaterials(true);\n  };\n\n  /**\n   * Set a section box around the passed in bounding box.\n   * @param {THREE.Box3} box\n   * @returns {boolean} - true if the section box was set\n   */\n  this.setSectionBox = function (box) {\n    if (!box) return false;\n    const name = 'OBJ_BOX';\n    // Convert the bounding box to planes\n\n    let bbox = box;\n    let transform = box.transform;\n\n    // If a transform is specified on the bbox, we use it, otherwise we align the box with project north\n    if (!box.transform) {\n      bbox = bbox.clone().applyMatrix4(_inverseTransform);\n      transform = _transform;\n    }\n\n    const planes = Autodesk.Viewing.Private.SceneMath.box2CutPlanes(bbox, transform);\n    _activeMode = name;\n    _viewer.setCutPlaneSet('__set_view', planes);\n    this.setSection(name);\n    return true;\n  };\n\n  /**\n   * Set a section plane at the intersection position.\n   * @param {Three.Vector3} normal - plane normal.\n   * @param {Three.Vector3} position - position to place the plane.\n   * @returns {boolean} - true if the section plane was set\n   */\n  this.setSectionPlane = function (normal, position) {var _transRotControl2, _transRotControl3;let enableRotationGizmo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!normal || !position) return false;\n\n    const name = 'OBJ_SET_VIEW_PLANE';\n    const distance = -1 * position.dot(normal);\n    const plane = new THREE.Plane(normal, distance);\n    _activeMode = name;\n    const planeVecs = [new THREE.Vector4(plane.normal.x, plane.normal.y, plane.normal.z, plane.constant)];\n    _viewer.setCutPlaneSet('__set_view', planeVecs);\n    this.setSection(name);\n    // RotationGizmos are turned on by default.\n    // The option to disable it, is for cases like activating the section tool from the context menu.\n    (_transRotControl2 = _transRotControl) === null || _transRotControl2 === void 0 || _transRotControl2.showRotationGizmos(enableRotationGizmo);\n\n    const pos = position.clone().sub(_sectionGroups[0].children[0].getWorldPosition(_auxVec3));\n    (_transRotControl3 = _transRotControl) === null || _transRotControl3 === void 0 || _transRotControl3.setGizmoOffset(pos);\n\n    return true;\n  };\n};\n\nfunction init_SectionMesh() {\n\n  if (SectionMeshClass)\n  return;\n\n  const tmpWorldPosition = new THREE.Vector3();\n  const tmpNormalMatrix = new THREE.Matrix3();\n\n  class SectionMesh extends THREE.Mesh {\n    constructor(geometry, material, plane) {\n\n      super(geometry, material, false);\n\n      this.plane = plane;\n      this.planeVec = new THREE.Vector4(plane.normal.x, plane.normal.y, plane.normal.z, plane.constant);\n      this.connectivity = [];\n      this.outline = null;\n    }\n\n    update() {\n      this.updateMatrixWorld();\n      this.plane.normal.set(0, 0, 1);\n\n      var normal = this.plane.normal;\n      normal.applyMatrix3(tmpNormalMatrix.getNormalMatrix(this.matrixWorld));\n\n      var d = -1 * this.getWorldPosition(tmpWorldPosition).dot(normal);\n      this.planeVec.set(normal.x, normal.y, normal.z, d);\n      this.plane.constant = d;\n    }\n  }\n  SectionMeshClass = SectionMesh;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Section/SectionTool.js\n");

                /***/
            }),

        /***/
        "./thirdparty/three.js/TransformControls.js":
            /*!**************************************************!*\
              !*** ./thirdparty/three.js/TransformControls.js ***!
              \**************************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   init_TransformGizmos: () => (/* binding */ init_TransformGizmos)\n/* harmony export */ });\n/**\n * @author arodic / https://github.com/arodic\n *\n * @author chiena -- Modified for Autodesk LMV web viewer\n */\n/*jshint sub:true*/\n\nfunction init_TransformGizmos() {\n\n  'use strict';\n\n  class GizmoMaterial extends THREE.MeshBasicMaterial {\n    constructor(parameters) {\n\n      super();\n\n      this.depthTest = false;\n      this.depthWrite = false;\n      this.side = THREE.FrontSide;\n      this.transparent = true;\n\n      this.setValues(parameters);\n\n      this.oldColor = this.color.clone();\n      this.oldOpacity = this.opacity;\n\n      this.highlight = function (highlighted) {\n\n        if (highlighted) {\n\n          this.color.setRGB(1, 230 / 255, 3 / 255);\n          this.opacity = 1;\n\n        } else {\n\n          this.color.copy(this.oldColor);\n          this.opacity = this.oldOpacity;\n\n        }\n\n      };\n\n    }\n  }\n\n  class GizmoLineMaterial extends THREE.LineBasicMaterial {\n\n    constructor(parameters) {\n\n      super();\n\n      this.depthTest = false;\n      this.depthWrite = false;\n      this.transparent = true;\n      this.linewidth = 1;\n\n      this.setValues(parameters);\n\n      this.oldColor = this.color.clone();\n      this.oldOpacity = this.opacity;\n\n      this.highlight = function (highlighted) {\n\n        if (highlighted) {\n\n          this.color.setRGB(1, 230 / 255, 3 / 255);\n          this.opacity = 1;\n\n        } else {\n\n          this.color.copy(this.oldColor);\n          this.opacity = this.oldOpacity;\n\n        }\n\n      };\n\n    }\n  }\n\n  var createCircleGeometry = function (radius, facing, arc) {\n    const vertices = [];\n    arc = arc ? arc : 1;\n    for (var i = 0; i <= 64 * arc; ++i) {\n      if (facing == 'x') vertices.push(new THREE.Vector3(0, Math.cos(i / 32 * Math.PI), Math.sin(i / 32 * Math.PI)).multiplyScalar(radius));\n      if (facing == 'y') vertices.push(new THREE.Vector3(Math.cos(i / 32 * Math.PI), 0, Math.sin(i / 32 * Math.PI)).multiplyScalar(radius));\n      if (facing == 'z') vertices.push(new THREE.Vector3(Math.sin(i / 32 * Math.PI), Math.cos(i / 32 * Math.PI), 0).multiplyScalar(radius));\n    }\n\n    return new THREE.BufferGeometry().setFromPoints(vertices);\n  };\n\n  var createArrowGeometry = function (radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded) {\n    const arrowGeometry = new THREE.CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded);\n    return arrowGeometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0.5, 0));\n  };\n\n  var createLineGeometry = function (axis) {\n    const vertices = [];\n    if (axis === 'X')\n    vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(1, 0, 0));else\n    if (axis === 'Y')\n    vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 1, 0));else\n    if (axis === 'Z')\n    vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1));\n\n    return new THREE.BufferGeometry().setFromPoints(vertices);\n  };\n\n  class TransformGizmo extends THREE.Object3D {\n    constructor(includeAxis) {\n\n      super();\n\n      var scope = this;\n      var showPickers = false; //debug\n      var showActivePlane = false; //debug\n\n\n      this.init = function () {\n        this.handles = new THREE.Object3D();\n        this.pickers = new THREE.Object3D();\n        this.planes = new THREE.Object3D();\n        this.highlights = new THREE.Object3D();\n        this.hemiPicker = new THREE.Object3D();\n        this.subPickers = new THREE.Object3D();\n\n        this.add(this.handles);\n        this.add(this.pickers);\n        this.add(this.planes);\n        this.add(this.highlights);\n        this.add(this.hemiPicker);\n        this.add(this.subPickers);\n\n        //// PLANES\n\n        var planeGeometry = new THREE.PlaneBufferGeometry(50, 50, 2, 2);\n        var planeMaterial = new THREE.MeshBasicMaterial({ wireframe: true });\n        planeMaterial.side = THREE.DoubleSide;\n\n        var planes = {\n          \"XY\": new THREE.Mesh(planeGeometry, planeMaterial),\n          \"YZ\": new THREE.Mesh(planeGeometry, planeMaterial),\n          \"XZ\": new THREE.Mesh(planeGeometry, planeMaterial),\n          \"XYZE\": new THREE.Mesh(planeGeometry, planeMaterial)\n        };\n\n        this.activePlane = planes[\"XYZE\"];\n\n        planes[\"YZ\"].rotation.set(0, Math.PI / 2, 0);\n        planes[\"XZ\"].rotation.set(-Math.PI / 2, 0, 0);\n\n        for (var i in planes) {\n          planes[i].name = i;\n          this.planes.add(planes[i]);\n          this.planes[i] = planes[i];\n          planes[i].visible = false;\n        }\n\n        this.setupGizmos();\n        this.activeMode = \"\";\n\n        // reset Transformations\n\n        this.traverse(function (child) {\n          if (child instanceof THREE.Mesh) {\n            child.updateMatrix();\n\n            const tempGeometry = child.geometry.clone();\n            tempGeometry.applyMatrix4(child.matrix);\n            child.geometry = tempGeometry;\n\n            child.position.set(0, 0, 0);\n            child.rotation.set(0, 0, 0);\n            child.scale.set(1, 1, 1);\n          }\n        });\n\n      };\n\n      this.hide = function () {\n        this.traverse(function (child) {\n          child.visible = false;\n        });\n      };\n\n      this.show = function () {\n        this.traverse(function (child) {\n          child.visible = true;\n          if (child.parent == scope.pickers || child.parent == scope.hemiPicker) child.visible = showPickers;\n          if (child.parent == scope.planes) child.visible = false;\n        });\n        this.activePlane.visible = showActivePlane;\n      };\n\n      this.highlight = function (axis) {\n        this.traverse(function (child) {\n          if (child.material && child.material.highlight) {\n            if (child.name == axis) {\n              child.material.highlight(true);\n            } else {\n              child.material.highlight(false);\n            }\n          }\n        });\n      };\n\n      this.setupGizmos = function () {\n\n        var addGizmos = function (gizmoMap, parent) {\n\n          for (var name in gizmoMap) {\n\n            for (var i = gizmoMap[name].length; i--;) {\n\n              var object = gizmoMap[name][i][0];\n              var position = gizmoMap[name][i][1];\n              var rotation = gizmoMap[name][i][2];\n              var visble = gizmoMap[name][i][3];\n\n              object.name = name;\n\n              if (position) object.position.set(position[0], position[1], position[2]);\n              if (rotation) object.rotation.set(rotation[0], rotation[1], rotation[2]);\n              if (visble) object.visble = visble;\n\n              parent.add(object);\n\n            }\n\n          }\n\n        };\n\n        this.setHandlePickerGizmos();\n\n        if (includeAxis) {\n          var axisNames = Object.keys(this.handleGizmos);\n\n          for (var i = 0; i < axisNames.length; i++) {\n            var axisName = axisNames[i];\n\n            if (includeAxis.indexOf(axisName) === -1) {\n              delete this.handleGizmos[axisName];\n              delete this.pickerGizmos[axisName];\n              delete this.hemiPickerGizmos[axisName];\n            }\n          }\n        }\n\n        addGizmos(this.handleGizmos, this.handles);\n        addGizmos(this.pickerGizmos, this.pickers);\n        addGizmos(this.highlightGizmos, this.highlights);\n        addGizmos(this.hemiPickerGizmos, this.hemiPicker);\n        addGizmos(this.subPickerGizmos, this.subPickers);\n\n        this.hide();\n        this.show();\n\n      };\n\n    }\n\n    update(rotation, eye) {\n\n      var vec1 = new THREE.Vector3(0, 0, 0);\n      var vec2 = new THREE.Vector3(0, 1, 0);\n      var lookAtMatrix = new THREE.Matrix4();\n\n      this.traverse(function (child) {\n        if (child.name) {\n          if (child.name.search(\"E\") != -1) {\n            child.quaternion.setFromRotationMatrix(lookAtMatrix.lookAt(eye, vec1, vec2));\n          } else if (child.name.search(\"X\") != -1 || child.name.search(\"Y\") != -1 || child.name.search(\"Z\") != -1) {\n            child.quaternion.setFromEuler(rotation);\n          }\n        }\n      });\n\n    }\n  }\n  THREE.TransformGizmo = TransformGizmo;\n\n  class TransformGizmoTranslate extends TransformGizmo {\n    constructor(includeAxis) {\n\n      super(includeAxis);\n\n      this.setHandlePickerGizmos = function () {\n\n        var arrowGeometry = createArrowGeometry(0, 0.05, 0.2, 12, 1, false);\n        var lineXGeometry = createLineGeometry('X');\n        var lineYGeometry = createLineGeometry('Y');\n        var lineZGeometry = createLineGeometry('Z');\n\n        this.handleGizmos = {\n          X: [\n          [new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0xf12c2c })), [0.5, 0, 0], [0, 0, -Math.PI / 2]],\n          [new THREE.Line(lineXGeometry, new GizmoLineMaterial({ color: 0xf12c2c }))]],\n\n          Y: [\n          [new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x0bb80b })), [0, 0.5, 0]],\n          [new THREE.Line(lineYGeometry, new GizmoLineMaterial({ color: 0x0bb80b }))]],\n\n          Z: [\n          [new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x2c2cf1 })), [0, 0, 0.5], [Math.PI / 2, 0, 0]],\n          [new THREE.Line(lineZGeometry, new GizmoLineMaterial({ color: 0x2c2cf1 }))]],\n\n          XYZ: [\n          [new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.1, 0), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 })), [0, 0, 0], [0, 0, 0]]],\n\n          XY: [\n          [new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0xffff00, opacity: 0.25 })), [0.15, 0.15, 0]]],\n\n          YZ: [\n          [new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0x00ffff, opacity: 0.25 })), [0, 0.15, 0.15], [0, Math.PI / 2, 0]]],\n\n          XZ: [\n          [new THREE.Mesh(new THREE.PlaneBufferGeometry(0.29, 0.29), new GizmoMaterial({ color: 0xff00ff, opacity: 0.25 })), [0.15, 0, 0.15], [-Math.PI / 2, 0, 0]]]\n\n        };\n\n        this.pickerGizmos = {\n          X: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n\n          Y: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x00ff00, opacity: 0.25 })), [0, 0.6, 0]]],\n\n          Z: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n\n          XYZ: [\n          [new THREE.Mesh(new THREE.OctahedronBufferGeometry(0.2, 0), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 }))]],\n\n          XY: [\n          [new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({ color: 0xffff00, opacity: 0.25 })), [0.2, 0.2, 0]]],\n\n          YZ: [\n          [new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({ color: 0x00ffff, opacity: 0.25 })), [0, 0.2, 0.2], [0, Math.PI / 2, 0]]],\n\n          XZ: [\n          [new THREE.Mesh(new THREE.PlaneBufferGeometry(0.4, 0.4), new GizmoMaterial({ color: 0xff00ff, opacity: 0.25 })), [0.2, 0, 0.2], [-Math.PI / 2, 0, 0]]]\n\n        };\n\n        this.hemiPickerGizmos = {\n          XYZ: [\n          [new THREE.Mesh(new THREE.BoxBufferGeometry(1.2, 1.2, 1.2), new GizmoMaterial({ color: 0x0000ff })), [0.5, 0.5, 0.5], null, false]]\n\n        };\n\n      };\n\n      this.setActivePlane = function (axis, eye, isLocalSpace) {\n\n        var tempMatrix = new THREE.Matrix4();\n        eye.applyMatrix4(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld).invert());\n\n        if (axis == \"X\") {\n          this.activePlane = this.planes[\"XY\"];\n          if (!isLocalSpace && Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n        }\n\n        if (axis == \"Y\") {\n          this.activePlane = this.planes[\"XY\"];\n          if (!isLocalSpace && Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis == \"Z\") {\n          this.activePlane = this.planes[\"XZ\"];\n          if (!isLocalSpace && Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis == \"XYZ\") this.activePlane = this.planes[\"XYZE\"];\n\n        if (axis == \"XY\") this.activePlane = this.planes[\"XY\"];\n\n        if (axis == \"YZ\") this.activePlane = this.planes[\"YZ\"];\n\n        if (axis == \"XZ\") this.activePlane = this.planes[\"XZ\"];\n\n        this.hide();\n        this.show();\n\n      };\n\n      this.init();\n\n    }\n  }\n  THREE.TransformGizmoTranslate = TransformGizmoTranslate;\n\n  class TransformGizmoRotate extends TransformGizmo {\n    constructor(includeAxis) {\n\n      super(includeAxis);\n\n      this.setHandlePickerGizmos = function () {\n\n        this.handleGizmos = {\n          RX: [\n          [new THREE.Line(createCircleGeometry(1, 'x', 0.5), new GizmoLineMaterial({ color: 0xff0000 }))]],\n\n          RY: [\n          [new THREE.Line(createCircleGeometry(1, 'y', 0.5), new GizmoLineMaterial({ color: 0x00ff00 }))]],\n\n          RZ: [\n          [new THREE.Line(createCircleGeometry(1, 'z', 0.5), new GizmoLineMaterial({ color: 0x0000ff }))]],\n\n          RE: [\n          [new THREE.Line(createCircleGeometry(1.25, 'z', 1), new GizmoLineMaterial({ color: 0x00ffff }))]],\n\n          RXYZE: [\n          [new THREE.Line(createCircleGeometry(1, 'z', 1), new GizmoLineMaterial({ color: 0xff00ff }))]]\n\n        };\n\n        this.pickerGizmos = {\n          RX: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2]]],\n\n          RY: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({ color: 0x00ff00, opacity: 0.25 })), [0, 0, 0], [Math.PI / 2, 0, 0]]],\n\n          RZ: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.12, 4, 12, Math.PI), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0], [0, 0, -Math.PI / 2]]],\n\n          RE: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1.25, 0.12, 2, 24), new GizmoMaterial({ color: 0x00ffff, opacity: 0.25 }))]],\n\n          RXYZE: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.12, 2, 24), new GizmoMaterial({ color: 0xff00ff, opacity: 0.25 }))]]\n\n        };\n\n      };\n\n      this.setActivePlane = function (axis) {\n\n        if (axis == \"RE\") this.activePlane = this.planes[\"XYZE\"];\n\n        if (axis == \"RX\") this.activePlane = this.planes[\"YZ\"];\n\n        if (axis == \"RY\") this.activePlane = this.planes[\"XZ\"];\n\n        if (axis == \"RZ\") this.activePlane = this.planes[\"XY\"];\n\n        this.hide();\n        this.show();\n\n      };\n\n      this.update = function (rotation, eye2) {\n\n        THREE.TransformGizmo.prototype.update.apply(this, arguments);\n\n        var tempMatrix = new THREE.Matrix4();\n        var worldRotation = new THREE.Euler(0, 0, 1);\n        var tempQuaternion = new THREE.Quaternion();\n        var unitX = new THREE.Vector3(1, 0, 0);\n        var unitY = new THREE.Vector3(0, 1, 0);\n        var unitZ = new THREE.Vector3(0, 0, 1);\n        var quaternionX = new THREE.Quaternion();\n        var quaternionY = new THREE.Quaternion();\n        var quaternionZ = new THREE.Quaternion();\n        var eye = eye2.clone();\n\n        worldRotation.copy(this.planes[\"XY\"].rotation);\n        tempQuaternion.setFromEuler(worldRotation);\n\n        tempMatrix.makeRotationFromQuaternion(tempQuaternion).invert();\n        eye.applyMatrix4(tempMatrix);\n\n        this.traverse(function (child) {\n\n          tempQuaternion.setFromEuler(worldRotation);\n\n          if (child.name == \"RX\") {\n            quaternionX.setFromAxisAngle(unitX, Math.atan2(-eye.y, eye.z));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n            child.quaternion.copy(tempQuaternion);\n          }\n\n          if (child.name == \"RY\") {\n            quaternionY.setFromAxisAngle(unitY, Math.atan2(eye.x, eye.z));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n            child.quaternion.copy(tempQuaternion);\n          }\n\n          if (child.name == \"RZ\") {\n            quaternionZ.setFromAxisAngle(unitZ, Math.atan2(eye.y, eye.x));\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n            child.quaternion.copy(tempQuaternion);\n          }\n\n        });\n\n      };\n\n      this.init();\n\n    }\n  }\n  THREE.TransformGizmoRotate = TransformGizmoRotate;\n\n  class TransformGizmoTranslateRotate extends TransformGizmo {\n    constructor(includeAxis) {\n\n      super(includeAxis);\n\n      var scope = this;\n\n      this.setHandlePickerGizmos = function () {\n\n        var arrowGeometry = createArrowGeometry(0, 0.05, 0.2, 12, 1, false);\n        var theta = 0.15;\n\n        this.handleGizmos = {\n          Z: [\n          [new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0xffffff })), [0, 0, 0.25], [Math.PI / 2, 0, 0]],\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.015, 0.015, 0.6, 4, 1, false), new GizmoMaterial({ color: 0xffffff })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n\n          RX: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.015, 12, 60, theta * 2 * Math.PI), new GizmoMaterial({ color: 0xff0000 })), [0, 0, 0], [theta * Math.PI, -Math.PI / 2, 0]],\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.05, 0.05, 0.015, 60, 1, false), new GizmoMaterial({ color: 0xff0000 })), [0, 0, 1], [Math.PI / 2, 0, 0]]],\n\n          RY: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.015, 12, 60, theta * 2 * Math.PI), new GizmoMaterial({ color: 0x0000ff })), [0, 0, 0], [Math.PI / 2, 0, (0.5 - theta) * Math.PI]],\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.05, 0.05, 0.01, 60, 1, false), new GizmoMaterial({ color: 0x0000ff })), [0, 0, 1]]]\n\n        };\n\n        this.pickerGizmos = {\n          Z: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.12, 0.12, 0.65, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]],\n\n          RX: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.12, 4, 12, theta * 2 * Math.PI), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0, 0, 0], [theta * Math.PI, -Math.PI / 2, 0]]],\n\n          RY: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.12, 4, 12, theta * 2 * Math.PI), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0], [Math.PI / 2, 0, (0.5 - theta) * Math.PI]]]\n\n        };\n\n        this.subPickerGizmos = {\n          Z: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.12, 0.12, 0.65, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.5], [Math.PI / 2, 0, 0]]]\n\n        };\n\n        this.highlightGizmos = {\n          Z: [],\n\n          RX: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.02, 12, 60, 2 * Math.PI), new GizmoMaterial({ color: 0xff0000, opacity: 1 })), [0, 0, 0], [0, -Math.PI / 2, -Math.PI / 2], false]],\n\n          RY: [\n          [new THREE.Mesh(new THREE.TorusBufferGeometry(1, 0.02, 12, 60, 2 * Math.PI), new GizmoMaterial({ color: 0x0000ff, opacity: 1 })), [0, 0, 0], [Math.PI / 2, 0, 0], false]]\n\n        };\n\n        this.hemiPickerGizmos = {\n          XYZ: [\n          [new THREE.Mesh(new THREE.SphereBufferGeometry(1.2, 8, 8, 0, Math.PI), new GizmoMaterial({ color: 0x0000ff })), null, null, false]]\n\n        };\n\n      };\n\n      this.setActivePlane = function (axis, eye, isLocalSpace) {\n\n        if (this.activeMode == \"translate\") {\n\n          var tempMatrix = new THREE.Matrix4();\n          eye.applyMatrix4(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld).invert());\n\n          if (axis == \"X\") {\n            this.activePlane = this.planes[\"XY\"];\n            if (!isLocalSpace && Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n          }\n\n          if (axis == \"Y\") {\n            this.activePlane = this.planes[\"XY\"];\n            if (!isLocalSpace && Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n          }\n\n          if (axis == \"Z\") {\n            this.activePlane = this.planes[\"XZ\"];\n            if (!isLocalSpace && Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n          }\n\n        } else if (this.activeMode == \"rotate\") {\n\n          if (axis == \"RX\") this.activePlane = this.planes[\"YZ\"];\n\n          if (axis == \"RY\") this.activePlane = this.planes[\"XZ\"];\n\n          if (axis == \"RZ\") this.activePlane = this.planes[\"XY\"];\n\n        }\n\n        this.hide();\n        this.show();\n\n      };\n\n      this.update = function (rotation, eye2) {\n\n        if (this.activeMode == \"translate\") {\n\n          THREE.TransformGizmo.prototype.update.apply(this, arguments);\n\n        } else if (this.activeMode == \"rotate\") {\n\n          THREE.TransformGizmo.prototype.update.apply(this, arguments);\n\n          var tempMatrix = new THREE.Matrix4();\n          var worldRotation = new THREE.Euler(0, 0, 1);\n          var tempQuaternion = new THREE.Quaternion();\n          var unitX = new THREE.Vector3(1, 0, 0);\n          var unitY = new THREE.Vector3(0, 1, 0);\n          var unitZ = new THREE.Vector3(0, 0, 1);\n          var quaternionX = new THREE.Quaternion();\n          var quaternionY = new THREE.Quaternion();\n          var quaternionZ = new THREE.Quaternion();\n          var eye = eye2.clone();\n\n          worldRotation.copy(this.planes[\"XY\"].rotation);\n          tempQuaternion.setFromEuler(worldRotation);\n\n          tempMatrix.makeRotationFromQuaternion(tempQuaternion).invert();\n          eye.applyMatrix4(tempMatrix);\n\n          this.traverse(function (child) {\n\n            tempQuaternion.setFromEuler(worldRotation);\n\n            if (child.name == \"RX\") {\n              quaternionX.setFromAxisAngle(unitX, Math.atan2(-eye.y, eye.z));\n              tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n              child.quaternion.copy(tempQuaternion);\n            }\n\n            if (child.name == \"RY\") {\n              quaternionY.setFromAxisAngle(unitY, Math.atan2(eye.x, eye.z));\n              tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n              child.quaternion.copy(tempQuaternion);\n            }\n\n            if (child.name == \"RZ\") {\n              quaternionZ.setFromAxisAngle(unitZ, Math.atan2(eye.y, eye.x));\n              tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n              child.quaternion.copy(tempQuaternion);\n            }\n\n          });\n\n        }\n\n      };\n\n      this.show = function () {\n        this.traverse(function (child) {\n          if (scope.parent == null || scope.parent.useAllPickers || child.parent != scope.handles) child.visible = true;\n          if (child.material) child.material.opacity = child.material.oldOpacity;\n          if (child.parent == scope.pickers || child.parent == scope.hemiPicker || child.parent == scope.subPickers) child.visible = false;\n          if (child.parent == scope.planes || child.parent == scope.highlights) child.visible = false;\n        });\n        this.activePlane.visible = false;\n      };\n\n      this.highlight = function (axis) {\n        this.traverse(function (child) {\n          if (child.material && child.material.highlight) {\n            if (child.name == axis) {\n              if (child.parent == scope.highlights || child.parent == scope.handles) child.visible = true;\n              child.material.highlight(true);\n            } else {\n              child.material.highlight(false);\n              child.material.opacity = 0.1;\n            }\n          }\n        });\n      };\n\n      this.init();\n\n    }\n  }\n  THREE.TransformGizmoTranslateRotate = TransformGizmoTranslateRotate;\n\n  class TransformGizmoScale extends TransformGizmo {\n    constructor(includeAxis) {\n\n      super(includeAxis);\n\n      this.setHandlePickerGizmos = function () {\n\n        var arrowGeometry = createArrowGeometry(0.125, 0.125, 0.125);\n        var lineXGeometry = createLineGeometry('X');\n        var lineYGeometry = createLineGeometry('Y');\n        var lineZGeometry = createLineGeometry('Z');\n\n        this.handleGizmos = {\n          X: [\n          [new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0xff0000 })), [0.5, 0, 0], [0, 0, -Math.PI / 2]],\n          [new THREE.Line(lineXGeometry, new GizmoLineMaterial({ color: 0xff0000 }))]],\n\n          Y: [\n          [new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x00ff00 })), [0, 0.5, 0]],\n          [new THREE.Line(lineYGeometry, new GizmoLineMaterial({ color: 0x00ff00 }))]],\n\n          Z: [\n          [new THREE.Mesh(arrowGeometry, new GizmoMaterial({ color: 0x0000ff })), [0, 0, 0.5], [Math.PI / 2, 0, 0]],\n          [new THREE.Line(lineZGeometry, new GizmoLineMaterial({ color: 0x0000ff }))]],\n\n          XYZ: [\n          [new THREE.Mesh(new THREE.BoxBufferGeometry(0.125, 0.125, 0.125), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 }))]]\n\n        };\n\n        this.pickerGizmos = {\n          X: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0xff0000, opacity: 0.25 })), [0.6, 0, 0], [0, 0, -Math.PI / 2]]],\n\n          Y: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x00ff00, opacity: 0.25 })), [0, 0.6, 0]]],\n\n          Z: [\n          [new THREE.Mesh(new THREE.CylinderBufferGeometry(0.2, 0, 1, 4, 1, false), new GizmoMaterial({ color: 0x0000ff, opacity: 0.25 })), [0, 0, 0.6], [Math.PI / 2, 0, 0]]],\n\n          XYZ: [\n          [new THREE.Mesh(new THREE.BoxBufferGeometry(0.4, 0.4, 0.4), new GizmoMaterial({ color: 0xffffff, opacity: 0.25 }))]]\n\n        };\n\n      };\n\n      this.setActivePlane = function (axis, eye, isLocalSpace) {\n\n        var tempMatrix = new THREE.Matrix4();\n        eye.applyMatrix4(tempMatrix.extractRotation(this.planes[\"XY\"].matrixWorld).invert());\n\n        if (axis == \"X\") {\n          this.activePlane = this.planes[\"XY\"];\n          if (!isLocalSpace && Math.abs(eye.y) > Math.abs(eye.z)) this.activePlane = this.planes[\"XZ\"];\n        }\n\n        if (axis == \"Y\") {\n          this.activePlane = this.planes[\"XY\"];\n          if (!isLocalSpace && Math.abs(eye.x) > Math.abs(eye.z)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis == \"Z\") {\n          this.activePlane = this.planes[\"XZ\"];\n          if (!isLocalSpace && Math.abs(eye.x) > Math.abs(eye.y)) this.activePlane = this.planes[\"YZ\"];\n        }\n\n        if (axis == \"XYZ\") this.activePlane = this.planes[\"XYZE\"];\n\n        this.hide();\n        this.show();\n\n      };\n\n      this.init();\n\n    }\n  }\n  THREE.TransformGizmoScale = TransformGizmoScale;\n\n  const _pointerVector = new THREE.Vector3();\n  const _pointerDir = new THREE.Vector3();\n  const _ray = new THREE.Raycaster();\n  class TransformControls extends THREE.Object3D {\n    constructor(camera, domElement, mode, includeAxis) {\n\n      // TODO: Make non-uniform scale and rotate play nice in hierarchies\n      // TODO: ADD RXYZ contol\n\n      super();\n\n      domElement = domElement !== undefined ? domElement : document;\n\n      this.gizmo = {};\n      switch (mode) {\n        case \"translate\":\n          this.gizmo[mode] = new THREE.TransformGizmoTranslate(includeAxis);\n          break;\n        case \"rotate\":\n          this.gizmo[mode] = new THREE.TransformGizmoRotate(includeAxis);\n          break;\n        case \"transrotate\":\n          this.gizmo[mode] = new THREE.TransformGizmoTranslateRotate(includeAxis);\n          break;\n        case \"scale\":\n          this.gizmo[mode] = new THREE.TransformGizmoScale(includeAxis);\n          break;\n      }\n\n      this.add(this.gizmo[mode]);\n      this.gizmo[mode].hide();\n\n      this.object = undefined;\n      this.snap = null;\n      this.snapDelta = 0;\n      this.space = \"world\";\n      this.size = 1;\n      this.axis = null;\n      this.useAllPickers = true;\n\n      this.unitX = new THREE.Vector3(1, 0, 0);\n      this.unitY = new THREE.Vector3(0, 1, 0);\n      this.unitZ = new THREE.Vector3(0, 0, 1);\n      this.normal = new THREE.Vector3(0, 0, 1);\n\n      if (mode === \"transrotate\") {\n        var vertices = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1)];\n        var geometry = new THREE.BufferGeometry().setFromPoints(vertices);\n        var material = new THREE.LineBasicMaterial({ color: 0x000000, linewidth: 2, depthTest: false });\n        this.startLine = new THREE.Line(geometry, material);\n\n        var vertices = [new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 1)];\n        var geometry = new THREE.BufferGeometry().setFromPoints(vertices);\n        var material = new THREE.LineBasicMaterial({ color: 0xffe603, linewidth: 2, depthTest: false });\n        this.endLine = new THREE.Line(geometry, material);\n\n        var vertices = [new THREE.Vector3(0, -1, 0), new THREE.Vector3(0, 1, 0)];\n        var geometry = new THREE.BufferGeometry().setFromPoints(vertices);\n        var material = new THREE.LineDashedMaterial({ color: 0x000000, linewidth: 1, depthTest: false });\n        this.centerLine = new THREE.Line(geometry, material);\n\n        var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl(\"res/textures/centerMarker_X.png\"));\n        map.magFilter = map.minFilter = THREE.NearestFilter;\n        var geometry = new THREE.CircleBufferGeometry(0.1, 32);\n        var material = new THREE.MeshBasicMaterial({ opacity: 1, side: THREE.DoubleSide, transparent: true, map: map });\n        this.centerMark = new THREE.Mesh(geometry, material);\n        this.centerMark.rotation.set(Math.PI / 2, 0, 0);\n\n        this.ticks = {};\n        var map = THREE.ImageUtils.loadTexture(Autodesk.Viewing.Private.getResourceUrl(\"res/textures/cardinalPoint.png\"));\n        map.magFilter = map.minFilter = THREE.NearestFilter;\n        var material = new THREE.MeshBasicMaterial({ depthTest: false, opacity: 1, transparent: true, side: THREE.DoubleSide, map: map });\n        var w = 0.12,h = 0.25,d = 1.15;\n\n        this.ticks[\"RX\"] = new THREE.Object3D();\n        var geometry = new THREE.PlaneBufferGeometry(w, h);\n        var mesh = new THREE.Mesh(geometry, material);\n        mesh.position.set(0, 0, -d - h / 2);\n        mesh.rotation.set(Math.PI / 2, Math.PI / 2, 0);\n        this.ticks[\"RX\"].add(mesh);\n\n        mesh = mesh.clone();\n        mesh.position.set(0, d + h / 2, 0);\n        mesh.rotation.set(0, Math.PI / 2, 0);\n        this.ticks[\"RX\"].add(mesh);\n\n        mesh = mesh.clone();\n        mesh.position.set(0, 0, d + h / 2);\n        mesh.rotation.set(0, Math.PI / 2, Math.PI / 2);\n        this.ticks[\"RX\"].add(mesh);\n\n        mesh = mesh.clone();\n        mesh.position.set(0, -d - h / 2, 0);\n        mesh.rotation.set(0, Math.PI / 2, 0);\n        this.ticks[\"RX\"].add(mesh);\n\n        this.ticks[\"RY\"] = new THREE.Object3D();\n        mesh = mesh.clone();\n        mesh.position.set(0, 0, -d - h / 2);\n        mesh.rotation.set(Math.PI / 2, 0, 0);\n        this.ticks[\"RY\"].add(mesh);\n\n        mesh = mesh.clone();\n        mesh.position.set(-d - h / 2, 0, 0);\n        mesh.rotation.set(Math.PI / 2, 0, Math.PI / 2);\n        this.ticks[\"RY\"].add(mesh);\n\n        mesh = mesh.clone();\n        mesh.position.set(0, 0, d + h / 2);\n        mesh.rotation.set(Math.PI / 2, 0, 0);\n        this.ticks[\"RY\"].add(mesh);\n\n        mesh = mesh.clone();\n        mesh.position.set(d + h / 2, 0, 0);\n        mesh.rotation.set(Math.PI / 2, 0, Math.PI / 2);\n        this.ticks[\"RY\"].add(mesh);\n      }\n\n      var scope = this;\n\n      var _dragging = false;\n      var _mode = mode;\n      var _plane = \"XY\";\n\n      var changeEvent = { type: \"change\" };\n      var mouseDownEvent = { type: \"mouseDown\" };\n      var mouseUpEvent = { type: \"mouseUp\", mode: _mode };\n      var objectChangeEvent = { type: \"objectChange\" };\n\n      var point = new THREE.Vector3();\n      var offset = new THREE.Vector3();\n\n      var rotation = new THREE.Vector3();\n      var offsetRotation = new THREE.Vector3();\n      var scale = 1;\n      this.clientScale = 1;\n\n      var lookAtMatrix = new THREE.Matrix4();\n      var eye = new THREE.Vector3();\n\n      var tempMatrix = new THREE.Matrix4();\n      var tempVector = new THREE.Vector3();\n      var tempQuaternion = new THREE.Quaternion();\n      var projX = new THREE.Vector3();\n      var projY = new THREE.Vector3();\n      var projZ = new THREE.Vector3();\n\n      var quaternionXYZ = new THREE.Quaternion();\n      var quaternionX = new THREE.Quaternion();\n      var quaternionY = new THREE.Quaternion();\n      var quaternionZ = new THREE.Quaternion();\n      var quaternionE = new THREE.Quaternion();\n\n      var oldPosition = new THREE.Vector3();\n      var oldScale = new THREE.Vector3();\n      var oldRotationMatrix = new THREE.Matrix4();\n\n      var parentRotationMatrix = new THREE.Matrix4();\n      var parentScale = new THREE.Vector3();\n\n      var worldPosition = new THREE.Vector3();\n      var worldRotation = new THREE.Euler();\n      var worldRotationMatrix = new THREE.Matrix4();\n      var camPosition = new THREE.Vector3();\n      var camRotation = new THREE.Euler();\n\n      this.attach = function (object) {\n\n        scope.object = object;\n\n        this.gizmo[_mode].show();\n\n        scope.update();\n\n        scope.updateUnitVectors();\n\n      };\n\n      this.detach = function (object) {\n\n        scope.object = undefined;\n        this.axis = null;\n\n        this.gizmo[_mode].hide();\n\n      };\n\n      this.setMode = function (mode) {\n\n        _mode = mode ? mode : _mode;\n\n        if (_mode == \"scale\") scope.space = \"local\";\n\n        this.gizmo[_mode].show();\n\n        this.update();\n        scope.dispatchEvent(changeEvent);\n\n      };\n\n      this.getPicker = function () {\n\n        return scope.gizmo[_mode].hemiPicker.children;\n\n      };\n\n      this.setPosition = function (position) {\n\n        this.object.position.copy(position);\n        this.update();\n\n      };\n\n      this.setNormal = function (normal) {\n\n        tempQuaternion.setFromUnitVectors(this.normal, normal);\n        this.unitX.applyQuaternion(tempQuaternion);\n        this.unitY.applyQuaternion(tempQuaternion);\n        this.unitZ.applyQuaternion(tempQuaternion);\n        this.normal.copy(normal);\n        if (this.object) {\n          this.object.quaternion.multiply(tempQuaternion);\n        }\n        this.update();\n      };\n\n      this.setRotation = function (rotationMatrix) {\n        if (this.object) {\n          this.object.quaternion.setFromRotationMatrix(rotationMatrix);\n          this.update();\n          this.updateUnitVectors();\n        }\n      };\n\n      this.setSnap = function (snap, delta) {\n\n        scope.snap = snap;\n        scope.snapDelta = delta;\n\n      };\n\n      this.setSize = function (size) {\n\n        scope.size = size;\n        this.update();\n        scope.dispatchEvent(changeEvent);\n\n      };\n\n      this.setSpace = function (space) {\n\n        scope.space = space;\n        this.update();\n        scope.dispatchEvent(changeEvent);\n\n      };\n\n      this.update = function (highlight) {\n\n        if (scope.object === undefined) return;\n\n        scope.object.updateMatrixWorld();\n        worldPosition.setFromMatrixPosition(scope.object.matrixWorld);\n        worldRotation.setFromRotationMatrix(tempMatrix.extractRotation(scope.object.matrixWorld));\n\n        camera.updateMatrixWorld();\n        camPosition.setFromMatrixPosition(camera.matrixWorld);\n        //camRotation.setFromRotationMatrix( tempMatrix.extractRotation( camera.matrixWorld ) );\n\n        this.position.copy(worldPosition);\n\n        this.quaternion.setFromEuler(worldRotation);\n\n        this.normal.set(0, 0, 1);\n        this.normal.applyEuler(worldRotation);\n\n        // keep same screen height (100px)\n        var height;\n        if (camera.isPerspective) {\n          var dist = worldPosition.distanceTo(camPosition);\n          height = 2 * Math.tan(camera.fov * Math.PI / 360) * dist;\n        } else {\n          // orthographic, so the world height is simply top minus bottom\n          height = camera.top - camera.bottom;\n        }\n        var rect = domElement.getBoundingClientRect();\n        // multiply 100 pixels by world height for the window, divide by window height in pixels,\n        // to get world height equivalent to 100 pixels.\n        scale = this.clientScale * 100 * height / rect.height;\n        this.scale.set(scale, scale, scale);\n\n        // Set the gizmo position with the specified offset.\n        if (this.gizmoOffset) {\n          this.position.add(this.gizmoOffset);\n        }\n        this.updateMatrixWorld();\n        //eye.copy( camPosition ).sub( worldPosition ).normalize();\n\n        //if ( scope.space == \"local\" )\n        //    this.gizmo[_mode].update( worldRotation, eye );\n        //else if ( scope.space == \"world\" )\n        //    this.gizmo[_mode].update( new THREE.Euler(), eye );\n\n        if (highlight)\n        this.gizmo[_mode].highlight(scope.axis);\n\n      };\n\n      this.setGizmoOffset = function (vec) {\n        // Reset the gizmo if no vector passed in.\n        this.gizmoOffset = !vec ? new THREE.Vector3(0, 0, 0) : vec;\n        this.update();\n      };\n\n      this.updateUnitVectors = function () {\n\n        this.unitX.set(1, 0, 0);\n        this.unitY.set(0, 1, 0);\n        this.unitZ.set(0, 0, 1);\n        this.unitX.applyEuler(worldRotation);\n        this.unitY.applyEuler(worldRotation);\n        this.unitZ.applyEuler(worldRotation);\n\n      };\n\n      this.showRotationGizmos = function (set) {\n\n        var handles = this.gizmo[_mode].handles.children;\n        for (var i = 0; i < handles.length; i++) {\n          var child = handles[i];\n          child.visible = true;\n          if (child.name.search(\"R\") !== -1) child.visible = set;\n        }\n        this.useAllPickers = set;\n\n      };\n\n      this.highlight = function () {\n\n        this.gizmo[_mode].highlight(this.axis || \"Z\");\n\n      };\n\n      this.onPointerHover = function (event) {\n\n        if (scope.object === undefined || _dragging === true) return false;\n\n        var pointer = event;\n\n        var intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n\n        var axis = null;\n        var mode = \"\";\n\n        if (intersect) {\n\n          axis = intersect.object.name;\n          mode = axis.search(\"R\") != -1 ? \"rotate\" : \"translate\";\n\n        }\n\n        if (scope.axis !== axis) {\n\n          scope.axis = axis;\n          scope.gizmo[_mode].activeMode = mode;\n          scope.update(true);\n          scope.dispatchEvent(changeEvent);\n\n        }\n\n        if (scope.axis === null) {\n\n          scope.gizmo[_mode].show();\n\n        }\n\n        return intersect ? true : false;\n\n      };\n\n      this.isDragging = function () {\n        return _dragging;\n      };\n\n      this.onPointerDown = function (event) {\n\n        if (scope.object === undefined || _dragging === true) return false;\n\n        var pointer = event;\n\n        if (event.pointerType === 'touch') {\n\n          var intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n\n          var axis = null;\n          var mode = \"\";\n\n          if (intersect) {\n\n            axis = intersect.object.name;\n            mode = axis.search(\"R\") != -1 ? \"rotate\" : \"translate\";\n\n          }\n\n          if (scope.axis !== axis) {\n\n            scope.axis = axis;\n            scope.gizmo[_mode].activeMode = mode;\n          }\n        }\n\n        var intersect = null;\n\n        if (pointer.button === 0 || pointer.button === -1 || pointer.button === undefined) {\n\n          intersect = intersectObjects(pointer, scope.useAllPickers ? scope.gizmo[_mode].pickers.children : scope.gizmo[_mode].subPickers.children);\n\n          if (intersect) {\n\n            scope.dispatchEvent(mouseDownEvent);\n\n            scope.axis = intersect.object.name;\n\n            scope.update();\n\n            eye.copy(camera.position).sub(worldPosition).normalize();\n\n            // The eye vector is used to ensure that we choose a plane that is not parallel to the view direction.\n            // When using an orthographic camera, the direction from gizmo to camera (as used above) doesn't matter for this,\n            // because the view rays for any pixel is always parallel to the camera world direction.\n            //\n            // E.g. it may happen that the axis of largest extent in the eye vector above is x, while the ortho-camera direction\n            // is actually y. In this case, setAxisPlane() would choose the \"YZ\"-plane for dragging along z-axis, so that hittests\n            // with this plane will not work (see FLUENT-6543).\n            if (!camera.isPerspective) {\n              camera.getWorldDirection(eye);\n            }\n\n            scope.gizmo[_mode].setActivePlane(scope.axis, eye, scope.space === \"local\");\n\n            var planeIntersect = intersectObjects(pointer, [scope.gizmo[_mode].activePlane]);\n\n            if (planeIntersect)\n            offset.copy(planeIntersect.point);\n\n            oldPosition.copy(scope.object.position);\n            oldScale.copy(scope.object.scale);\n\n            oldRotationMatrix.extractRotation(scope.object.matrix);\n            worldRotationMatrix.extractRotation(scope.object.matrixWorld);\n\n            if (scope.object.parent) {\n              parentRotationMatrix.extractRotation(scope.object.parent.matrixWorld);\n              parentScale.setFromMatrixScale(tempMatrix.copy(scope.object.parent.matrixWorld).invert());\n            } else {\n              parentRotationMatrix.extractRotation(scope.object.matrixWorld);\n              parentScale.setFromMatrixScale(tempMatrix.copy(scope.object.matrixWorld).invert());\n            }\n\n            // show rotation start line and ticks\n            if (_mode === \"transrotate\" && scope.gizmo[_mode].activeMode === \"rotate\") {\n              {\n                const startLinePositions = scope.startLine.geometry.getAttribute('position');\n                startLinePositions.setXYZ(0, 0, 0, 0);\n                startLinePositions.setXYZ(1, 0, 0, 1);\n                startLinePositions.applyMatrix4(scope.matrixWorld);\n                startLinePositions.needsUpdate = true;\n                scope.parent.add(scope.startLine);\n              }\n\n              var pos = scope.object.geometry.getAttribute('position');\n              var pt1 = new THREE.Vector3().fromBufferAttribute(pos, 0).applyMatrix4(scope.object.matrixWorld);\n              var pt2 = new THREE.Vector3().fromBufferAttribute(pos, 1).applyMatrix4(scope.object.matrixWorld);\n              var pt3 = new THREE.Vector3().fromBufferAttribute(pos, 2).applyMatrix4(scope.object.matrixWorld);\n              var pt4 = new THREE.Vector3().fromBufferAttribute(pos, 3).applyMatrix4(scope.object.matrixWorld);\n\n              const centerLinePositions = scope.centerLine.geometry.getAttribute('position');\n              if (scope.axis === \"RX\") {\n                pt1.lerp(pt3, 0.5);\n                pt2.lerp(pt4, 0.5);\n                var dist = pt1.distanceTo(pt2);\n                scope.centerLine.material.dashSize = dist / 15;\n                scope.centerLine.material.gapSize = dist / 30;\n                centerLinePositions.setXYZ(0, pt1.x, pt1.y, pt1.z);\n                centerLinePositions.setXYZ(1, pt2.x, pt2.y, pt2.z);\n              } else {\n                pt1.lerp(pt2, 0.5);\n                pt3.lerp(pt4, 0.5);\n                var dist = pt1.distanceTo(pt3);\n                scope.centerLine.material.dashSize = dist / 15;\n                scope.centerLine.material.gapSize = dist / 30;\n                centerLinePositions.setXYZ(0, pt1.x, pt1.y, pt1.z);\n                centerLinePositions.setXYZ(1, pt3.x, pt3.y, pt3.z);\n              }\n              scope.centerLine.computeLineDistances();\n              centerLinePositions.needsUpdate = true;\n              scope.parent.add(scope.centerLine);\n\n              scope.ticks[scope.axis].position.copy(scope.position);\n              scope.ticks[scope.axis].quaternion.copy(scope.quaternion);\n              scope.ticks[scope.axis].scale.copy(scope.scale);\n              scope.parent.add(scope.ticks[scope.axis]);\n            }\n\n          }\n\n        }\n\n        _dragging = true;\n\n        return intersect ? true : false;\n\n      };\n\n      this.onPointerMove = function (event) {\n\n        if (scope.object === undefined || scope.axis === null || _dragging === false) return false;\n\n        var pointer = event;\n\n        var planeIntersect = intersectObjects(pointer, [scope.gizmo[_mode].activePlane]);\n\n        if (planeIntersect)\n        point.copy(planeIntersect.point);\n\n        var mode = scope.gizmo[_mode].activeMode;\n        if (mode == \"translate\") {\n\n          point.sub(offset);\n          point.multiply(parentScale);\n\n          if (scope.space == \"local\") {\n\n            point.applyMatrix4(tempMatrix.copy(worldRotationMatrix).invert());\n\n            if (scope.axis.search(\"X\") == -1) point.x = 0;\n            if (scope.axis.search(\"Y\") == -1) point.y = 0;\n            if (scope.axis.search(\"Z\") == -1) point.z = 0;\n\n            point.applyMatrix4(oldRotationMatrix);\n\n            scope.object.position.copy(oldPosition);\n            scope.object.position.add(point);\n\n          }\n\n          if (scope.space == \"world\" || scope.axis.search(\"XYZ\") != -1) {\n\n            projX.copy(this.unitX);\n            projY.copy(this.unitY);\n            projZ.copy(this.unitZ);\n            tempVector.set(0, 0, 0);\n            if (scope.axis.search(\"X\") != -1) {\n              projX.multiplyScalar(point.dot(this.unitX));\n              tempVector.add(projX);\n            }\n            if (scope.axis.search(\"Y\") != -1) {\n              projY.multiplyScalar(point.dot(this.unitY));\n              tempVector.add(projY);\n            }\n            if (scope.axis.search(\"Z\") != -1) {\n              projZ.multiplyScalar(point.dot(this.unitZ));\n              tempVector.add(projZ);\n            }\n            point.copy(tempVector);\n\n            point.applyMatrix4(tempMatrix.copy(parentRotationMatrix).invert());\n\n            scope.object.position.copy(oldPosition);\n            scope.object.position.add(point);\n\n          }\n\n        } else if (mode == \"scale\") {\n\n          point.sub(offset);\n          point.multiply(parentScale);\n\n          if (scope.space == \"local\") {\n\n            if (scope.axis == \"XYZ\") {\n\n              scale = 1 + point.y / 50;\n\n              scope.object.scale.x = oldScale.x * scale;\n              scope.object.scale.y = oldScale.y * scale;\n              scope.object.scale.z = oldScale.z * scale;\n\n            } else {\n\n              point.applyMatrix4(tempMatrix.copy(worldRotationMatrix).invert());\n\n              if (scope.axis == \"X\") scope.object.scale.x = oldScale.x * (1 + point.x / 50);\n              if (scope.axis == \"Y\") scope.object.scale.y = oldScale.y * (1 + point.y / 50);\n              if (scope.axis == \"Z\") scope.object.scale.z = oldScale.z * (1 + point.z / 50);\n\n            }\n\n          }\n\n        } else if (mode == \"rotate\") {\n\n          point.sub(worldPosition);\n          point.multiply(parentScale);\n          tempVector.copy(offset).sub(worldPosition);\n          tempVector.multiply(parentScale);\n\n          if (scope.axis == \"RE\") {\n\n            tempMatrix.copy(lookAtMatrix).invert();\n            point.applyMatrix4(tempMatrix);\n            tempVector.applyMatrix4(tempMatrix);\n\n            rotation.set(Math.atan2(point.z, point.y), Math.atan2(point.x, point.z), Math.atan2(point.y, point.x));\n            offsetRotation.set(Math.atan2(tempVector.z, tempVector.y), Math.atan2(tempVector.x, tempVector.z), Math.atan2(tempVector.y, tempVector.x));\n\n            tempQuaternion.setFromRotationMatrix(tempMatrix.copy(parentRotationMatrix).invert());\n\n            var rotz = rotation.z - offsetRotation.z;\n            if (scope.snap !== null) {\n              var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n                rotz = rotsnap;\n              }\n            }\n            quaternionE.setFromAxisAngle(eye, rotz);\n            quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionE);\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n            scope.object.quaternion.copy(tempQuaternion);\n\n          } else if (scope.axis == \"RXYZE\") {\n\n            var tempAxis = point.clone().cross(tempVector).normalize(); // rotation axis\n\n            tempQuaternion.setFromRotationMatrix(tempMatrix.copy(parentRotationMatrix).invert());\n\n            var rot = -point.clone().angleTo(tempVector);\n            if (scope.snap !== null) {\n              var rotsnap = Math.round(rot / scope.snap) * scope.snap;\n              if (Math.abs(rotsnap - rot) < scope.snapDelta) {\n                rot = rotsnap;\n              }\n            }\n            quaternionX.setFromAxisAngle(tempAxis, rot);\n            quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n            scope.object.quaternion.copy(tempQuaternion);\n\n          } else if (scope.space == \"local\") {\n\n            tempMatrix.copy(worldRotationMatrix).invert();\n            point.applyMatrix4(tempMatrix);\n            tempVector.applyMatrix4(tempMatrix);\n\n            var projx = point.dot(this.unitX),projy = point.dot(this.unitY),projz = point.dot(this.unitZ);\n            var tempx = tempVector.dot(this.unitX),tempy = tempVector.dot(this.unitY),tempz = tempVector.dot(this.unitZ);\n            rotation.set(Math.atan2(projz, projy), Math.atan2(projx, projz), Math.atan2(projy, projx));\n            offsetRotation.set(Math.atan2(tempz, tempy), Math.atan2(tempx, tempz), Math.atan2(tempy, tempx));\n\n            var rotx = rotation.x - offsetRotation.x;\n            var roty = rotation.y - offsetRotation.y;\n            var rotz = rotation.z - offsetRotation.z;\n            if (scope.snap !== null) {\n              if (scope.axis.search(\"X\") != -1) {\n                var rotsnap = Math.round(rotx / scope.snap) * scope.snap;\n                if (Math.abs(rotsnap - rotx) < scope.snapDelta) {\n                  rotx = rotsnap;\n                }\n              }\n              if (scope.axis.search(\"Y\") != -1) {\n                var rotsnap = Math.round(roty / scope.snap) * scope.snap;\n                if (Math.abs(rotsnap - roty) < scope.snapDelta) {\n                  roty = rotsnap;\n                }\n              }\n              if (scope.axis.search(\"Z\") != -1) {\n                var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n                if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n                  rotz = rotsnap;\n                }\n              }\n            }\n            quaternionX.setFromAxisAngle(this.unitX, rotx);\n            quaternionY.setFromAxisAngle(this.unitY, roty);\n            quaternionZ.setFromAxisAngle(this.unitZ, rotz);\n            quaternionXYZ.setFromRotationMatrix(oldRotationMatrix);\n\n            if (scope.axis == \"RX\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionX);\n            if (scope.axis == \"RY\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionY);\n            if (scope.axis == \"RZ\") quaternionXYZ.multiplyQuaternions(quaternionXYZ, quaternionZ);\n\n            scope.object.quaternion.copy(quaternionXYZ);\n\n          } else if (scope.space == \"world\") {\n\n            var projx = point.dot(this.unitX),projy = point.dot(this.unitY),projz = point.dot(this.unitZ);\n            var tempx = tempVector.dot(this.unitX),tempy = tempVector.dot(this.unitY),tempz = tempVector.dot(this.unitZ);\n            rotation.set(Math.atan2(projz, projy), Math.atan2(projx, projz), Math.atan2(projy, projx));\n            offsetRotation.set(Math.atan2(tempz, tempy), Math.atan2(tempx, tempz), Math.atan2(tempy, tempx));\n\n            tempQuaternion.setFromRotationMatrix(tempMatrix.copy(parentRotationMatrix).invert());\n\n            var rotx = rotation.x - offsetRotation.x;\n            var roty = rotation.y - offsetRotation.y;\n            var rotz = rotation.z - offsetRotation.z;\n            if (scope.snap !== null) {\n              if (scope.axis.search(\"X\") != -1) {\n                var rotsnap = Math.round(rotx / scope.snap) * scope.snap;\n                if (Math.abs(rotsnap - rotx) < scope.snapDelta) {\n                  rotx = rotsnap;\n                }\n              }\n              if (scope.axis.search(\"Y\") != -1) {\n                var rotsnap = Math.round(roty / scope.snap) * scope.snap;\n                if (Math.abs(rotsnap - roty) < scope.snapDelta) {\n                  roty = rotsnap;\n                }\n              }\n              if (scope.axis.search(\"Z\") != -1) {\n                var rotsnap = Math.round(rotz / scope.snap) * scope.snap;\n                if (Math.abs(rotsnap - rotz) < scope.snapDelta) {\n                  rotz = rotsnap;\n                }\n              }\n            }\n            quaternionX.setFromAxisAngle(this.unitX, rotx);\n            quaternionY.setFromAxisAngle(this.unitY, roty);\n            quaternionZ.setFromAxisAngle(this.unitZ, rotz);\n            quaternionXYZ.setFromRotationMatrix(worldRotationMatrix);\n\n            if (scope.axis == \"RX\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionX);\n            if (scope.axis == \"RY\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionY);\n            if (scope.axis == \"RZ\") tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionZ);\n\n            tempQuaternion.multiplyQuaternions(tempQuaternion, quaternionXYZ);\n\n            scope.object.quaternion.copy(tempQuaternion);\n\n          }\n\n          // show rotation end line\n          if (_mode === \"transrotate\") {\n            scope.add(scope.endLine);\n            scope.add(scope.centerMark);\n          }\n\n        }\n\n        // update matrix\n        scope.object.matrixAutoUpdate = true;\n\n        scope.update(true);\n        scope.dispatchEvent(changeEvent);\n        scope.dispatchEvent(objectChangeEvent);\n\n        return planeIntersect ? true : false;\n\n      };\n\n      this.onPointerUp = function (event) {\n\n        if (_dragging && scope.axis !== null) {\n          mouseUpEvent.mode = _mode;\n          scope.dispatchEvent(mouseUpEvent);\n        }\n        _dragging = false;\n\n        this.gizmo[_mode].show();\n\n        this.updateUnitVectors();\n\n        // remove rotation start/end lines\n        if (_mode === \"transrotate\" && this.gizmo[_mode].activeMode === \"rotate\") {\n          this.remove(this.endLine);\n          this.remove(this.centerMark);\n          this.parent.remove(this.centerLine);\n          this.parent.remove(this.startLine);\n          this.parent.remove(this.ticks[this.axis]);\n        }\n\n        return false;\n\n      };\n\n      function intersectObjects(pointer, objects) {\n        return THREE.TransformControls.intersectObjects(pointer.canvasX, pointer.canvasY, objects, camera, true);\n      }\n    }\n\n    static intersectObjects(clientX, clientY, objects, camera, recursive) {\n      // Convert client to viewport coords (in [-1,1]^2)\n      var x = clientX / camera.clientWidth * 2 - 1;\n      var y = -(clientY / camera.clientHeight) * 2 + 1; // y-direction flips between canvas and viewport coords\n\n      if (camera.isPerspective) {\n        _pointerVector.set(x, y, 0.5);\n        _pointerVector.unproject(camera);\n        _ray.set(camera.position, _pointerVector.sub(camera.position).normalize());\n      } else {\n        _pointerVector.set(x, y, -1);\n        _pointerVector.unproject(camera);\n        _pointerDir.set(0, 0, -1);\n        _ray.set(_pointerVector, _pointerDir.transformDirection(camera.matrixWorld));\n      }\n\n      var intersections = _ray.intersectObjects(objects, recursive);\n      return intersections[0] ? intersections[0] : null;\n    }\n  }\n  THREE.TransformControls = TransformControls;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./thirdparty/three.js/TransformControls.js\n");

                /***/
            }),

        /***/
        "./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Section/Section.css":
            /*!******************************************************************************************************************************************************************************************************************************************************************!*\
              !*** ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Section/Section.css ***!
              \******************************************************************************************************************************************************************************************************************************************************************/
            /***/
            ((module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/**\n * Section CSS\n **/\n.sectionPanel {\n  line-height: 14px;\n  text-align: left;\n  z-index: 10;\n}\n\n.section-horizontal-divider {\n  height: 1px;\n  border-top: 1px solid rgba(200, 200, 200, 0.8);\n}\n\n.section-submenu-select {\n  display: block;\n  position: relative;\n  width: calc(100% - 40px);\n  padding: 10px 20px 0px 20px;\n  opacity: 0.3;\n}\n\n.section-panel:hover .section-submenu-select {\n  opacity: 0.8;\n}\n\n.section-submenu-selectlabel {\n  position: relative;\n  display: inline-block;\n  padding-right: 20px;\n  padding-bottom: 4px;\n}\n\n.section-restart {\n  margin: 10px 20px 15px 20px;\n  padding: 6px 10px 6px 10px;\n  width: calc(100% - 55px);\n  cursor: pointer;\n}\n\n.docking-panel:hover .section-restart {\n  background-color: rgba(255, 255, 255, 0.12);\n}\n\n.docking-panel .section-restart:hover {\n  background-color: rgba(166, 194, 255, 0.7);\n  -webkit-transition: all 0.2s ease;\n  -moz-transition: all 0.2s ease;\n  -ms-transition: all 0.2s ease;\n  -o-transition: all 0.2s ease;\n  transition: all 0.2s ease;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./extensions/Section/Section.css\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AACH;EACE,iBAAiB;EACjB,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,8CAA8C;AAChD;;AAEA;EACE,cAAc;EACd,kBAAkB;EAClB,wBAAwB;EACxB,2BAA2B;EAC3B,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,2BAA2B;EAC3B,0BAA0B;EAC1B,wBAAwB;EACxB,eAAe;AACjB;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;EACE,0CAA0C;EAC1C,iCAAiC;EACjC,8BAA8B;EAC9B,6BAA6B;EAC7B,4BAA4B;EAC5B,yBAAyB;AAC3B\",\"sourcesContent\":[\"/**\\n * Section CSS\\n **/\\n.sectionPanel {\\n  line-height: 14px;\\n  text-align: left;\\n  z-index: 10;\\n}\\n\\n.section-horizontal-divider {\\n  height: 1px;\\n  border-top: 1px solid rgba(200, 200, 200, 0.8);\\n}\\n\\n.section-submenu-select {\\n  display: block;\\n  position: relative;\\n  width: calc(100% - 40px);\\n  padding: 10px 20px 0px 20px;\\n  opacity: 0.3;\\n}\\n\\n.section-panel:hover .section-submenu-select {\\n  opacity: 0.8;\\n}\\n\\n.section-submenu-selectlabel {\\n  position: relative;\\n  display: inline-block;\\n  padding-right: 20px;\\n  padding-bottom: 4px;\\n}\\n\\n.section-restart {\\n  margin: 10px 20px 15px 20px;\\n  padding: 6px 10px 6px 10px;\\n  width: calc(100% - 55px);\\n  cursor: pointer;\\n}\\n\\n.docking-panel:hover .section-restart {\\n  background-color: rgba(255, 255, 255, 0.12);\\n}\\n\\n.docking-panel .section-restart:hover {\\n  background-color: rgba(166, 194, 255, 0.7);\\n  -webkit-transition: all 0.2s ease;\\n  -moz-transition: all 0.2s ease;\\n  -ms-transition: all 0.2s ease;\\n  -o-transition: all 0.2s ease;\\n  transition: all 0.2s ease;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s1XS51c2VbMV0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNV0udXNlWzJdIS4vbm9kZV9tb2R1bGVzL2Nzcy11bmljb2RlLWxvYWRlci9pbmRleC5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2V4dGVuc2lvbnMvU2VjdGlvbi9TZWN0aW9uLmNzcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQzZHO0FBQ2pCO0FBQzVGLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsT0FBTyxrR0FBa0csS0FBSyxLQUFLLFlBQVksYUFBYSxXQUFXLE1BQU0sS0FBSyxVQUFVLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLGFBQWEsV0FBVyxNQUFNLEtBQUssVUFBVSxNQUFNLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsV0FBVyxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsb0VBQW9FLHNCQUFzQixxQkFBcUIsZ0JBQWdCLEdBQUcsaUNBQWlDLGdCQUFnQixtREFBbUQsR0FBRyw2QkFBNkIsbUJBQW1CLHVCQUF1Qiw2QkFBNkIsZ0NBQWdDLGlCQUFpQixHQUFHLGtEQUFrRCxpQkFBaUIsR0FBRyxrQ0FBa0MsdUJBQXVCLDBCQUEwQix3QkFBd0Isd0JBQXdCLEdBQUcsc0JBQXNCLGdDQUFnQywrQkFBK0IsNkJBQTZCLG9CQUFvQixHQUFHLDJDQUEyQyxnREFBZ0QsR0FBRywyQ0FBMkMsK0NBQStDLHNDQUFzQyxtQ0FBbUMsa0NBQWtDLGlDQUFpQyw4QkFBOEIsR0FBRyxtQkFBbUI7QUFDL2tEO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9TZWN0aW9uL1NlY3Rpb24uY3NzP2U4ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8qKlxuICogU2VjdGlvbiBDU1NcbiAqKi9cbi5zZWN0aW9uUGFuZWwge1xuICBsaW5lLWhlaWdodDogMTRweDtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgei1pbmRleDogMTA7XG59XG5cbi5zZWN0aW9uLWhvcml6b250YWwtZGl2aWRlciB7XG4gIGhlaWdodDogMXB4O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgyMDAsIDIwMCwgMjAwLCAwLjgpO1xufVxuXG4uc2VjdGlvbi1zdWJtZW51LXNlbGVjdCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA0MHB4KTtcbiAgcGFkZGluZzogMTBweCAyMHB4IDBweCAyMHB4O1xuICBvcGFjaXR5OiAwLjM7XG59XG5cbi5zZWN0aW9uLXBhbmVsOmhvdmVyIC5zZWN0aW9uLXN1Ym1lbnUtc2VsZWN0IHtcbiAgb3BhY2l0eTogMC44O1xufVxuXG4uc2VjdGlvbi1zdWJtZW51LXNlbGVjdGxhYmVsIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBhZGRpbmctcmlnaHQ6IDIwcHg7XG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XG59XG5cbi5zZWN0aW9uLXJlc3RhcnQge1xuICBtYXJnaW46IDEwcHggMjBweCAxNXB4IDIwcHg7XG4gIHBhZGRpbmc6IDZweCAxMHB4IDZweCAxMHB4O1xuICB3aWR0aDogY2FsYygxMDAlIC0gNTVweCk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmRvY2tpbmctcGFuZWw6aG92ZXIgLnNlY3Rpb24tcmVzdGFydCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMik7XG59XG5cbi5kb2NraW5nLXBhbmVsIC5zZWN0aW9uLXJlc3RhcnQ6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE2NiwgMTk0LCAyNTUsIDAuNyk7XG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcbiAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xuICAtbXMtdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcbiAgLW8tdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2V4dGVuc2lvbnMvU2VjdGlvbi9TZWN0aW9uLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7R0FFRztBQUNIO0VBQ0UsaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsOENBQThDO0FBQ2hEOztBQUVBO0VBQ0UsY0FBYztFQUNkLGtCQUFrQjtFQUNsQix3QkFBd0I7RUFDeEIsMkJBQTJCO0VBQzNCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLDJCQUEyQjtFQUMzQiwwQkFBMEI7RUFDMUIsd0JBQXdCO0VBQ3hCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSwyQ0FBMkM7QUFDN0M7O0FBRUE7RUFDRSwwQ0FBMEM7RUFDMUMsaUNBQWlDO0VBQ2pDLDhCQUE4QjtFQUM5Qiw2QkFBNkI7RUFDN0IsNEJBQTRCO0VBQzVCLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKipcXG4gKiBTZWN0aW9uIENTU1xcbiAqKi9cXG4uc2VjdGlvblBhbmVsIHtcXG4gIGxpbmUtaGVpZ2h0OiAxNHB4O1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHotaW5kZXg6IDEwO1xcbn1cXG5cXG4uc2VjdGlvbi1ob3Jpem9udGFsLWRpdmlkZXIge1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgyMDAsIDIwMCwgMjAwLCAwLjgpO1xcbn1cXG5cXG4uc2VjdGlvbi1zdWJtZW51LXNlbGVjdCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA0MHB4KTtcXG4gIHBhZGRpbmc6IDEwcHggMjBweCAwcHggMjBweDtcXG4gIG9wYWNpdHk6IDAuMztcXG59XFxuXFxuLnNlY3Rpb24tcGFuZWw6aG92ZXIgLnNlY3Rpb24tc3VibWVudS1zZWxlY3Qge1xcbiAgb3BhY2l0eTogMC44O1xcbn1cXG5cXG4uc2VjdGlvbi1zdWJtZW51LXNlbGVjdGxhYmVsIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmctcmlnaHQ6IDIwcHg7XFxuICBwYWRkaW5nLWJvdHRvbTogNHB4O1xcbn1cXG5cXG4uc2VjdGlvbi1yZXN0YXJ0IHtcXG4gIG1hcmdpbjogMTBweCAyMHB4IDE1cHggMjBweDtcXG4gIHBhZGRpbmc6IDZweCAxMHB4IDZweCAxMHB4O1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDU1cHgpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZG9ja2luZy1wYW5lbDpob3ZlciAuc2VjdGlvbi1yZXN0YXJ0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMik7XFxufVxcblxcbi5kb2NraW5nLXBhbmVsIC5zZWN0aW9uLXJlc3RhcnQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNjYsIDE5NCwgMjU1LCAwLjcpO1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xcbiAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xcbiAgLW1zLXRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7XFxuICAtby10cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Section/Section.css\n");

                /***/
            }),

        /***/
        "./node_modules/css-loader/dist/runtime/api.js":
            /*!*****************************************************!*\
              !*** ./node_modules/css-loader/dist/runtime/api.js ***!
              \*****************************************************/
            /***/
            ((module) => {

                "use strict";
                eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

                /***/
            }),

        /***/
        "./node_modules/css-loader/dist/runtime/sourceMaps.js":
            /*!************************************************************!*\
              !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
              \************************************************************/
            /***/
            ((module) => {

                "use strict";
                eval("\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/sourceMaps.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_Symbol.js":
            /*!****************************************!*\
              !*** ./node_modules/lodash/_Symbol.js ***!
              \****************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLCtDQUFTOztBQUU1QjtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcz85ZTY5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_Symbol.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_baseGetTag.js":
            /*!********************************************!*\
              !*** ./node_modules/lodash/_baseGetTag.js ***!
              \********************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var Symbol = __webpack_require__(/*! ./_Symbol */ \"./node_modules/lodash/_Symbol.js\"),\n    getRawTag = __webpack_require__(/*! ./_getRawTag */ \"./node_modules/lodash/_getRawTag.js\"),\n    objectToString = __webpack_require__(/*! ./_objectToString */ \"./node_modules/lodash/_objectToString.js\");\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxtREFBVztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBYztBQUN0QyxxQkFBcUIsbUJBQU8sQ0FBQyxtRUFBbUI7O0FBRWhEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzPzM3MjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseGetTag.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_baseTrim.js":
            /*!******************************************!*\
              !*** ./node_modules/lodash/_baseTrim.js ***!
              \******************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ \"./node_modules/lodash/_trimmedEndIndex.js\");\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVHJpbS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0IsbUJBQU8sQ0FBQyxxRUFBb0I7O0FBRWxEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVHJpbS5qcz84ZDc0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB0cmltbWVkRW5kSW5kZXggPSByZXF1aXJlKCcuL190cmltbWVkRW5kSW5kZXgnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgIDogc3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUcmltO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseTrim.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_freeGlobal.js":
            /*!********************************************!*\
              !*** ./node_modules/lodash/_freeGlobal.js ***!
              \********************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\nmodule.exports = freeGlobal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esd0JBQXdCLHFCQUFNLGdCQUFnQixxQkFBTSxJQUFJLHFCQUFNLHNCQUFzQixxQkFBTTs7QUFFMUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcz81ODVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_freeGlobal.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_getRawTag.js":
            /*!*******************************************!*\
              !*** ./node_modules/lodash/_getRawTag.js ***!
              \*******************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var Symbol = __webpack_require__(/*! ./_Symbol */ \"./node_modules/lodash/_Symbol.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLG1EQUFXOztBQUVoQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcz8wMGZkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getRawTag.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_objectToString.js":
            /*!************************************************!*\
              !*** ./node_modules/lodash/_objectToString.js ***!
              \************************************************/
            /***/
            ((module) => {

                eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcz8yOWYzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_objectToString.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_root.js":
            /*!**************************************!*\
              !*** ./node_modules/lodash/_root.js ***!
              \**************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ \"./node_modules/lodash/_freeGlobal.js\");\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFlOztBQUV4QztBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcz8yYjNlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_root.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/_trimmedEndIndex.js":
            /*!*************************************************!*\
              !*** ./node_modules/lodash/_trimmedEndIndex.js ***!
              \*************************************************/
            /***/
            ((module) => {

                eval("/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL190cmltbWVkRW5kSW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RyaW1tZWRFbmRJbmRleC5qcz80Y2VmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xudmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuXG4vKipcbiAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAqIGNoYXJhY3RlciBvZiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gKi9cbmZ1bmN0aW9uIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpIHtcbiAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHt9XG4gIHJldHVybiBpbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmltbWVkRW5kSW5kZXg7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_trimmedEndIndex.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/debounce.js":
            /*!*****************************************!*\
              !*** ./node_modules/lodash/debounce.js ***!
              \*****************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    now = __webpack_require__(/*! ./now */ \"./node_modules/lodash/now.js\"),\n    toNumber = __webpack_require__(/*! ./toNumber */ \"./node_modules/lodash/toNumber.js\");\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash/debounce.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/isObject.js":
            /*!*****************************************!*\
              !*** ./node_modules/lodash/isObject.js ***!
              \*****************************************/
            /***/
            ((module) => {

                eval("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzPzFhOGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isObject.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/isObjectLike.js":
            /*!*********************************************!*\
              !*** ./node_modules/lodash/isObjectLike.js ***!
              \*********************************************/
            /***/
            ((module) => {

                eval("/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcz8xMzEwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isObjectLike.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/isSymbol.js":
            /*!*****************************************!*\
              !*** ./node_modules/lodash/isSymbol.js ***!
              \*****************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"./node_modules/lodash/_baseGetTag.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFlO0FBQ3hDLG1CQUFtQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFM0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcz9mZmQ2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isSymbol.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/now.js":
            /*!************************************!*\
              !*** ./node_modules/lodash/now.js ***!
              \************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vdy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsK0NBQVM7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vdy5qcz80MDhjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/now.js\n");

                /***/
            }),

        /***/
        "./node_modules/lodash/toNumber.js":
            /*!*****************************************!*\
              !*** ./node_modules/lodash/toNumber.js ***!
              \*****************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("var baseTrim = __webpack_require__(/*! ./_baseTrim */ \"./node_modules/lodash/_baseTrim.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    isSymbol = __webpack_require__(/*! ./isSymbol */ \"./node_modules/lodash/isSymbol.js\");\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyx1REFBYTtBQUNwQyxlQUFlLG1CQUFPLENBQUMscURBQVk7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZOztBQUVuQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b051bWJlci5qcz9iNGIwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlVHJpbSA9IHJlcXVpcmUoJy4vX2Jhc2VUcmltJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSBiYXNlVHJpbSh2YWx1ZSk7XG4gIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTnVtYmVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/toNumber.js\n");

                /***/
            }),

        /***/
        "./extensions/Section/Section.css":
            /*!****************************************!*\
              !*** ./extensions/Section/Section.css ***!
              \****************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_5_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_5_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Section_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!../../node_modules/css-unicode-loader/index.js!../../node_modules/sass-loader/dist/cjs.js!./Section.css */ \"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].use[2]!./node_modules/css-unicode-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/Section/Section.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_5_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_5_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Section_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_5_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_5_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Section_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_5_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_5_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Section_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_5_use_1_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_5_use_2_node_modules_css_unicode_loader_index_js_node_modules_sass_loader_dist_cjs_js_Section_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL1NlY3Rpb24vU2VjdGlvbi5jc3MiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsTUFBa0c7QUFDbEcsTUFBd0Y7QUFDeEYsTUFBK0Y7QUFDL0YsTUFBa0g7QUFDbEgsTUFBMkc7QUFDM0csTUFBMkc7QUFDM0csTUFBd1M7QUFDeFM7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEIscUdBQW1CO0FBQy9DLHdCQUF3QixrSEFBYTs7QUFFckMsdUJBQXVCLHVHQUFhO0FBQ3BDO0FBQ0EsaUJBQWlCLCtGQUFNO0FBQ3ZCLDZCQUE2QixzR0FBa0I7O0FBRS9DLGFBQWEsMEdBQUcsQ0FBQyw4UEFBTzs7OztBQUlrUDtBQUMxUSxPQUFPLGlFQUFlLDhQQUFPLElBQUksOFBBQU8sVUFBVSw4UEFBTyxtQkFBbUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL1NlY3Rpb24vU2VjdGlvbi5jc3M/OTNjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzVdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbNV0udXNlWzJdIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtdW5pY29kZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VjdGlvbi5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1s1XS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzVdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLXVuaWNvZGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL1NlY3Rpb24uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Section/Section.css\n");

                /***/
            }),

        /***/
        "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
            /*!****************************************************************************!*\
              !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
              \****************************************************************************/
            /***/
            ((module) => {

                "use strict";
                eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzPzJkYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

                /***/
            }),

        /***/
        "./node_modules/style-loader/dist/runtime/insertBySelector.js":
            /*!********************************************************************!*\
              !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
              \********************************************************************/
            /***/
            ((module) => {

                "use strict";
                eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertBySelector.js\n");

                /***/
            }),

        /***/
        "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
            /*!**********************************************************************!*\
              !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
              \**********************************************************************/
            /***/
            ((module) => {

                "use strict";
                eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertStyleElement.js\n");

                /***/
            }),

        /***/
        "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
            /*!**********************************************************************************!*\
              !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
              \**********************************************************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                "use strict";
                eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzP2RkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\n");

                /***/
            }),

        /***/
        "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
            /*!***************************************************************!*\
              !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
              \***************************************************************/
            /***/
            ((module) => {

                "use strict";
                eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcz9lNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleDomAPI.js\n");

                /***/
            }),

        /***/
        "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
            /*!*********************************************************************!*\
              !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
              \*********************************************************************/
            /***/
            ((module) => {

                "use strict";
                eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcz8xZGRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleTagTransform.js\n");

                /***/
            })

        /******/
    });
    /************************************************************************/
    /******/ // The module cache
    /******/
    var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/
        if (cachedModule !== undefined) {
            /******/
            return cachedModule.exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = __webpack_module_cache__[moduleId] = {
            /******/
            id: moduleId,
            /******/ // no module.loaded needed
            /******/
            exports: {}
            /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /************************************************************************/
    /******/
    /* webpack/runtime/compat get default export */
    /******/
    (() => {
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/
        __webpack_require__.n = (module) => {
            /******/
            var getter = module && module.__esModule ?
                /******/
                () => (module['default']) :
                /******/
                () => (module);
            /******/
            __webpack_require__.d(getter, {
                a: getter
            });
            /******/
            return getter;
            /******/
        };
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/define property getters */
    /******/
    (() => {
        /******/ // define getter functions for harmony exports
        /******/
        __webpack_require__.d = (exports, definition) => {
            /******/
            for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                    /******/
                    Object.defineProperty(exports, key, {
                        enumerable: true,
                        get: definition[key]
                    });
                    /******/
                }
                /******/
            }
            /******/
        };
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/global */
    /******/
    (() => {
        /******/
        __webpack_require__.g = (function() {
            /******/
            if (typeof globalThis === 'object') return globalThis;
            /******/
            try {
                /******/
                return this || new Function('return this')();
                /******/
            } catch (e) {
                /******/
                if (typeof window === 'object') return window;
                /******/
            }
            /******/
        })();
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/hasOwnProperty shorthand */
    /******/
    (() => {
        /******/
        __webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/make namespace object */
    /******/
    (() => {
        /******/ // define __esModule on exports
        /******/
        __webpack_require__.r = (exports) => {
            /******/
            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/
                Object.defineProperty(exports, Symbol.toStringTag, {
                    value: 'Module'
                });
                /******/
            }
            /******/
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            /******/
        };
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/nonce */
    /******/
    (() => {
        /******/
        __webpack_require__.nc = undefined;
        /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module can't be inlined because the eval-source-map devtool is used.
    /******/
    var __webpack_exports__ = __webpack_require__("./extensions/Section/Section.js");
    /******/
    Autodesk.Extensions.Section = __webpack_exports__;
    /******/
    /******/
})();