/*!
 * LMV v7.96.0
 *
 * Copyright 2024 Autodesk, Inc.
 * All rights reserved.
 *
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 *
 * Autodesk Viewer SDK Usage Limitations:
 *
 * The Autodesk Viewer SDK JavaScript must be delivered from an
 * Autodesk-hosted URL.
 */
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/
(() => { // webpackBootstrap
    /******/ // runtime can't be in strict mode because a global variable is assign and maybe created.
    /******/
    var __webpack_modules__ = ({

        /***/
        "./extensions/Edit3D/CoordPicker.js":
            /*!******************************************!*\
              !*** ./extensions/Edit3D/CoordPicker.js ***!
              \******************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CoordPicker)\n/* harmony export */ });\nconst ToolName = 'ModelAlignment.CoordPicker';\n\nconst Events = {\n  POINT_CLICKED: 'pointClicked',\n  POINT_HOVERED: 'pointHovered', // point param may be undefined if no object was hit at the current mouse position \n  ESCAPE: 'escape'\n};\n\nclass CoordPicker {\n\n  constructor(viewer, snapper) {\n    this.viewer = viewer;\n    this.snapper = snapper;\n\n    // Bind function so that we can use it for event listeners\n    this.onCameraChanged = this.onCameraChanged.bind(this);\n\n    Autodesk.Viewing.EventDispatcher.prototype.apply(this);\n\n    // Optional: If a plane is set, we select points on this plane instead of the model \n    this.selectionPlane = null;\n\n    this.enableSnapper = true;\n    this.snapperActive = false;\n    this.isDragging = false;\n\n    this.keyMap = {\n      SnapKey: Autodesk.Viewing.KeyCode.SHIFT // Holding this key suppresses snapping\n    };\n\n    // Track last mouse position in canvas coords. Note that derived classes must call\n    // the base class mouse handlers to keep this value valid.\n    this.canvasPos = new THREE.Vector2();\n\n    this.tmpPoint = new THREE.Vector3();\n    this.tmpMatrix3 = new THREE.Matrix3();\n\n    // Last successful hit under mouse.\n    this.lastHit = null;\n    this.consumeClickEvents = true;\n\n    this.snapFilter = null; // Optional snapping filter, based on snapResult. (snapResult) => boolean.\n\n    // Set default cursor.\n    this.setCursor();\n  }\n\n  // @param {THREE.Plane} [plane] - If a plane is set, we are selecting points on that plane instead of the model. \n  setSelectionPlane(plane) {\n    this.selectionPlane = plane;\n  }\n\n  getName() {\n    return ToolName;\n  }\n\n  getNames() {\n    return [ToolName];\n  }\n\n  setCursor(cursor) {\n    this.cursor = cursor ? cursor : 'crosshair';\n  }\n\n  getCursor() {\n    return this.isDragging ? 'grabbing' : this.active && this.lastHit ? this.cursor : null;\n  }\n\n  snapperOn() {\n    if (!this.snapperActive) {\n      this.viewer.toolController.activateTool(this.snapper.getName());\n      this.snapperActive = true;\n    }\n  }\n\n  snapperOff() {\n    if (this.snapperActive) {\n      this.viewer.toolController.deactivateTool(this.snapper.getName());\n      this.snapperActive = false;\n    }\n  }\n\n  setSnapperEnabled(enabled) {\n    this.enableSnapper = enabled;\n    if (enabled) {\n      this.snapperOn();\n    } else {\n      this.snapperOff();\n    }\n  }\n\n  setSnapFilter(snapFilter) {\n    this.snapFilter = snapFilter;\n    this.snapper.setSnapFilter(snapFilter);\n  }\n\n  activate() {\n    this.active = true;\n\n    if (this.enableSnapper) {\n      this.snapperOn();\n    }\n\n    this.viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n    this.viewer.impl.pauseHighlight(true);\n  }\n\n  deactivate() {\n    this.active = false;\n    this.isDragging = false;\n    this.lastHit = null;\n\n    this.snapperOff();\n\n    this.viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChanged);\n    this.viewer.impl.pauseHighlight(false);\n  }\n\n  register() {}\n\n  // Remember last mouse position\n  trackMousePos(e) {\n    this.canvasPos.set(e.canvasX, e.canvasY);\n  }\n\n  handleMouseMove(event) {\n    this.trackMousePos(event);\n\n    // Make sure that snapping result is up-to-date\n    this.snapper.onMouseMove({ x: event.canvasX, y: event.canvasY });\n\n    if (this.snapper.indicator) {\n      this.snapper.indicator.render();\n    }\n\n    // Note that we always fire, even if hit is undefined. This is needed to clear indicators and edit \n    // values if the mouse is not on an object anymore.\n    const result = this.getHitResultUnderMouse(event);\n    this.fireEvent({ type: Events.POINT_HOVERED, ...result });\n\n    return this.isDragging;\n  }\n\n  // Returns hitPoint under mouse or null if no object under mouse.\n  getHitResultUnderMouse(event) {\n\n    let point = null;\n    let normal = null;\n    let modelId = null;\n    let dbId = null;\n\n    if (this.snapperActive && this.snapper.isSnapped()) {\n      // Get snapped position.\n      const hitResult = this.snapper.getSnapResult();\n      point = Autodesk.Viewing.MeasureCommon.getSnapResultPosition(hitResult, this.viewer);\n      normal = hitResult === null || hitResult === void 0 ? void 0 : hitResult.faceNormal;\n      modelId = hitResult === null || hitResult === void 0 ? void 0 : hitResult.modelId;\n      dbId = hitResult === null || hitResult === void 0 ? void 0 : hitResult.snapNode;\n    } else {var _hitResult$face, _hitResult$model;\n      // When snapper is not active, or no point resulted, perform a simple hit test.\n      const hitResult = this.viewer.impl.hitTest(event.canvasX, event.canvasY);\n      point = hitResult === null || hitResult === void 0 ? void 0 : hitResult.point;\n\n      // Extract normal\n      if (hitResult !== null && hitResult !== void 0 && (_hitResult$face = hitResult.face) !== null && _hitResult$face !== void 0 && _hitResult$face.normal) {var _hitResult$model$getF;\n        const worldMatrix = new THREE.Matrix4();\n        (_hitResult$model$getF = hitResult.model.getFragmentList()) === null || _hitResult$model$getF === void 0 || _hitResult$model$getF.getWorldMatrix(hitResult.fragId, worldMatrix);\n        const normalMatrix = this.tmpMatrix3.getNormalMatrix(worldMatrix);\n        normal = hitResult.face.normal.clone().applyMatrix3(normalMatrix).normalize();\n      }\n\n      modelId = hitResult === null || hitResult === void 0 || (_hitResult$model = hitResult.model) === null || _hitResult$model === void 0 ? void 0 : _hitResult$model.id;\n      dbId = hitResult === null || hitResult === void 0 ? void 0 : hitResult.dbId;\n    }\n\n    if (this.snapFilter && !this.snapFilter({ modelId })) {\n      point = null;\n      normal = null;\n      modelId = null;\n      dbId = null;\n    }\n\n    // If selection plane is set, project the hit point on the plane.\n    if (point && this.selectionPlane) {\n      point = this.selectionPlane.projectPoint(point, this.tmpPoint);\n    }\n\n    const result = { point, normal, modelId, dbId };\n\n    // Update lastHit only if we have an actual hit.\n    this.lastHit = point ? result : null;\n\n    return result;\n  }\n\n  setConsumeClickEvents(consumeClickEvents) {\n    this.consumeClickEvents = consumeClickEvents;\n  }\n\n  handleSingleClick(event, button) {\n    this.trackMousePos(event);\n\n    // Only respond to left button\n    if (button !== 0) {\n      return false;\n    }\n\n    const result = this.getHitResultUnderMouse(event);\n\n    this.fireEvent({ type: Events.POINT_CLICKED, ...result });\n\n    return this.consumeClickEvents;\n  }\n\n  handleDoubleClick(event) {\n    this.trackMousePos(event);\n  }\n\n  handleButtonDown(event) {\n    this.trackMousePos(event);\n\n    // In case of start dragging, make sure to turn on the snapper first.\n    if (this.isDragging) {\n      this.snapperOn();\n    }\n\n    return this.handleMouseMove(event);\n  }\n\n  handleButtonUp(event) {\n    this.trackMousePos(event);\n    return this.isDragging;\n  }\n\n  // Simulate mouse move instantly when snapper is being toggled.\n  onSnappingToggled() {\n    this.handleMouseMove({\n      canvasX: this.canvasPos.x,\n      canvasY: this.canvasPos.y\n    });\n  }\n\n  handleKeyDown(event, keyCode) {\n    switch (keyCode) {\n      case Autodesk.Viewing.KeyCode.BACKSPACE:\n      case Autodesk.Viewing.KeyCode.DELETE:\n      case Autodesk.Viewing.KeyCode.ESCAPE:\n        this.fireEvent({ type: Events.ESCAPE });\n        return true;\n      case this.keyMap.SnapKey:\n        if (this.snapperActive) {\n          this.snapperOff();\n          this.onSnappingToggled();\n          return true;\n        }\n        return false;\n      default:\n        break;\n    }\n\n    return false;\n  }\n\n\n  handleKeyUp(event, keyCode) {\n    switch (keyCode) {\n      case this.keyMap.SnapKey:\n        if (!this.snapperActive && this.enableSnapper) {\n          this.snapperOn();\n          this.onSnappingToggled();\n          return true;\n        }\n        return false;\n      default:\n        break;\n    }\n\n    return false;\n  }\n\n  onCameraChanged() {\n    if (this.snapper.indicator) {\n      this.snapper.indicator.render();\n    }\n  }\n\n  setDragging(isDragging) {\n    this.isDragging = isDragging;\n  }\n\n  getDragging() {\n    return this.isDragging;\n  }\n}\n\nCoordPicker.Events = Events;\nCoordPicker.Name = ToolName;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit3D/CoordPicker.js\n");

                /***/
            }),

        /***/
        "./extensions/Edit3D/Edit3D.js":
            /*!*************************************!*\
              !*** ./extensions/Edit3D/Edit3D.js ***!
              \*************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Edit3DExtension)\n/* harmony export */ });\n/* harmony import */ var _Gizmo3D_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Gizmo3D.js */ \"./extensions/Edit3D/Gizmo3D.js\");\n/* harmony import */ var _Label3D_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Label3D.js */ \"./extensions/Edit3D/Label3D.js\");\n/* harmony import */ var _PointMarker_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PointMarker.js */ \"./extensions/Edit3D/PointMarker.js\");\n/* harmony import */ var _CoordPicker_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CoordPicker.js */ \"./extensions/Edit3D/CoordPicker.js\");\n/* harmony import */ var _TwoPointPicker_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TwoPointPicker.js */ \"./extensions/Edit3D/TwoPointPicker.js\");\n/* harmony import */ var _NPointPicker_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./NPointPicker.js */ \"./extensions/Edit3D/NPointPicker.js\");\n\nconst av = Autodesk.Viewing;\nconst namespace = AutodeskNamespace('Autodesk.Edit3D');\nconst myExtensionName = 'Autodesk.Edit3D';\n\n\n\n\n\n\n\n\n/** \n * Edit3D extension is a collection of general-purpose helper classes to faciliate \n * implementation of 3D EditTools.\n * Loading the extension does not add UI or changes behavior in the viewer. Its purpose is only\n * to provide a basis for other extensions and client applications.\n * \n * The extension id is: `Autodesk.Edit3D`\n * \n * @example\n *   viewer.loadExtension('Autodesk.Edit3D')\n *\n * @memberof Autodesk.Viewing.Extensions\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n * @alias Autodesk.Viewing.Extensions.Edit3DExtension\n * @class\n */\nclass Edit3DExtension extends av.Extension {\n  constructor(viewer, options) {\n    super(viewer, options);\n  }\n}\n\nnamespace.Gizmo3D = _Gizmo3D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\nnamespace.Label3D = _Label3D_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\nnamespace.PointMarker = _PointMarker_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\nnamespace.CoordPicker = _CoordPicker_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\nnamespace.TwoPointPicker = _TwoPointPicker_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\nnamespace.NPointPicker = _NPointPicker_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\n\n// Register the extension with the extension manager.\nav.theExtensionManager.registerExtension(myExtensionName, Edit3DExtension);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQzRC9FZGl0M0QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQSxNQUFNQSxFQUFFLEdBQUdDLFFBQVEsQ0FBQ0MsT0FBTztBQUMzQixNQUFNQyxTQUFTLEdBQUdDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDO0FBQ3RELE1BQU1DLGVBQWUsR0FBRyxpQkFBaUI7O0FBRU47QUFDQTtBQUNRO0FBQ0E7QUFDTTtBQUNKOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLE1BQU1PLGVBQWUsU0FBU1osRUFBRSxDQUFDYSxTQUFTLENBQUM7RUFDdERDLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO0lBQ3pCLEtBQUssQ0FBQ0QsTUFBTSxFQUFFQyxPQUFPLENBQUM7RUFDMUI7QUFDSjs7QUFFQWIsU0FBUyxDQUFDRyxPQUFPLEdBQUdBLG1EQUFPO0FBQzNCSCxTQUFTLENBQUNJLE9BQU8sR0FBR0EsbURBQU87QUFDM0JKLFNBQVMsQ0FBQ0ssV0FBVyxHQUFHQSx1REFBVztBQUNuQ0wsU0FBUyxDQUFDTSxXQUFXLEdBQUdBLHVEQUFXO0FBQ25DTixTQUFTLENBQUNPLGNBQWMsR0FBR0EsMERBQWM7QUFDekNQLFNBQVMsQ0FBQ1EsWUFBWSxHQUFHQSx3REFBWTs7QUFFckM7QUFDQVgsRUFBRSxDQUFDaUIsbUJBQW1CLENBQUNDLGlCQUFpQixDQUFDYixlQUFlLEVBQUVPLGVBQWUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0F1dG9kZXNrLkV4dGVuc2lvbnMvLi9leHRlbnNpb25zL0VkaXQzRC9FZGl0M0QuanM/ZjI0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGF2ID0gQXV0b2Rlc2suVmlld2luZztcbmNvbnN0IG5hbWVzcGFjZSA9IEF1dG9kZXNrTmFtZXNwYWNlKCdBdXRvZGVzay5FZGl0M0QnKTtcbmNvbnN0IG15RXh0ZW5zaW9uTmFtZSA9ICdBdXRvZGVzay5FZGl0M0QnO1xuXG5pbXBvcnQgR2l6bW8zRCBmcm9tICcuL0dpem1vM0QuanMnO1xuaW1wb3J0IExhYmVsM0QgZnJvbSAnLi9MYWJlbDNELmpzJztcbmltcG9ydCBQb2ludE1hcmtlciBmcm9tICcuL1BvaW50TWFya2VyLmpzJztcbmltcG9ydCBDb29yZFBpY2tlciBmcm9tICcuL0Nvb3JkUGlja2VyLmpzJztcbmltcG9ydCBUd29Qb2ludFBpY2tlciBmcm9tICcuL1R3b1BvaW50UGlja2VyLmpzJztcbmltcG9ydCBOUG9pbnRQaWNrZXIgZnJvbSBcIi4vTlBvaW50UGlja2VyLmpzXCI7XG5cbi8qKiBcbiAqIEVkaXQzRCBleHRlbnNpb24gaXMgYSBjb2xsZWN0aW9uIG9mIGdlbmVyYWwtcHVycG9zZSBoZWxwZXIgY2xhc3NlcyB0byBmYWNpbGlhdGUgXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiAzRCBFZGl0VG9vbHMuXG4gKiBMb2FkaW5nIHRoZSBleHRlbnNpb24gZG9lcyBub3QgYWRkIFVJIG9yIGNoYW5nZXMgYmVoYXZpb3IgaW4gdGhlIHZpZXdlci4gSXRzIHB1cnBvc2UgaXMgb25seVxuICogdG8gcHJvdmlkZSBhIGJhc2lzIGZvciBvdGhlciBleHRlbnNpb25zIGFuZCBjbGllbnQgYXBwbGljYXRpb25zLlxuICogXG4gKiBUaGUgZXh0ZW5zaW9uIGlkIGlzOiBgQXV0b2Rlc2suRWRpdDNEYFxuICogXG4gKiBAZXhhbXBsZVxuICogICB2aWV3ZXIubG9hZEV4dGVuc2lvbignQXV0b2Rlc2suRWRpdDNEJylcbiAqXG4gKiBAbWVtYmVyb2YgQXV0b2Rlc2suVmlld2luZy5FeHRlbnNpb25zXG4gKiBAc2VlIHtAbGluayBBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbn0gZm9yIGNvbW1vbiBpbmhlcml0ZWQgbWV0aG9kcy5cbiAqIEBhbGlhcyBBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbnMuRWRpdDNERXh0ZW5zaW9uXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdDNERXh0ZW5zaW9uIGV4dGVuZHMgYXYuRXh0ZW5zaW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodmlld2VyLCBvcHRpb25zKTtcbiAgICB9XG59XG5cbm5hbWVzcGFjZS5HaXptbzNEID0gR2l6bW8zRDtcbm5hbWVzcGFjZS5MYWJlbDNEID0gTGFiZWwzRDtcbm5hbWVzcGFjZS5Qb2ludE1hcmtlciA9IFBvaW50TWFya2VyO1xubmFtZXNwYWNlLkNvb3JkUGlja2VyID0gQ29vcmRQaWNrZXI7XG5uYW1lc3BhY2UuVHdvUG9pbnRQaWNrZXIgPSBUd29Qb2ludFBpY2tlcjtcbm5hbWVzcGFjZS5OUG9pbnRQaWNrZXIgPSBOUG9pbnRQaWNrZXI7XG5cbi8vIFJlZ2lzdGVyIHRoZSBleHRlbnNpb24gd2l0aCB0aGUgZXh0ZW5zaW9uIG1hbmFnZXIuXG5hdi50aGVFeHRlbnNpb25NYW5hZ2VyLnJlZ2lzdGVyRXh0ZW5zaW9uKG15RXh0ZW5zaW9uTmFtZSwgRWRpdDNERXh0ZW5zaW9uKTtcblxuIl0sIm5hbWVzIjpbImF2IiwiQXV0b2Rlc2siLCJWaWV3aW5nIiwibmFtZXNwYWNlIiwiQXV0b2Rlc2tOYW1lc3BhY2UiLCJteUV4dGVuc2lvbk5hbWUiLCJHaXptbzNEIiwiTGFiZWwzRCIsIlBvaW50TWFya2VyIiwiQ29vcmRQaWNrZXIiLCJUd29Qb2ludFBpY2tlciIsIk5Qb2ludFBpY2tlciIsIkVkaXQzREV4dGVuc2lvbiIsIkV4dGVuc2lvbiIsImNvbnN0cnVjdG9yIiwidmlld2VyIiwib3B0aW9ucyIsInRoZUV4dGVuc2lvbk1hbmFnZXIiLCJyZWdpc3RlckV4dGVuc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/Edit3D/Edit3D.js\n");

                /***/
            }),

        /***/
        "./extensions/Edit3D/Gizmo3D.js":
            /*!**************************************!*\
              !*** ./extensions/Edit3D/Gizmo3D.js ***!
              \**************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Gizmo3D)\n/* harmony export */ });\n\nlet nextId = 1;\n\n// Helper class for displaying a 3D shape that is scaled to keep approximately constant screen-size.\n// Example:\n//   const gizmo = new Gizmo3D(viewer).makeCube();\n//   gizmo.setPosition(10, 10, 10);\n//   gizmo.setVisible(true);\nclass Gizmo3D {\n\n  // @param {Viewer3d} viewer\n  // @param {number}   [pixelSize]   - Size of the gizmo in pixels\n  // @param {Vector3}  [pos]         - Initial position. Default (0,0,0)\n  // @param {string}   [overlayName] - Name of an (existing) viewer overlay used to display the gizmo. If not specified, the Gizmo creates its own.\n  constructor(viewer) {let pixelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;let overlayName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n    this.id = nextId++;\n\n    this.viewer = viewer;\n\n    // The shape is auto-scaled in a way that the projected screen-size of the unitBox diagonal\n    // keeps equal to this value.\n    this.pixelSize = pixelSize;\n\n    // Container for the gizmo shape. Matrix of this scene is controlled by the gizmo\n    this.scene = new THREE.Scene();\n\n    // Shape or scene to be displayed. BBox should be the unit box [-0.5, 0.5]^2, so that\n    // uto-scaling works properly.\n    this.shape = null;\n\n    // Connect event listener\n    this.onCameraChange = this.onCameraChange.bind(this);\n    this.viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n\n    // Make sure that matrix is recomputed after position/scale changes.\n    this.scene.matrixAutoUpdate = true;\n\n    // Overlay name that we use to display the gizmo\n    this.overlayName = overlayName;\n\n    // create own overlay if none specified\n    this.overlayOwned = !overlayName;\n    if (this.overlayOwned) {\n      this.overlayName = `Gizmo3D_Overlay_${this.id}`;\n      this.viewer.impl.createOverlayScene(this.overlayName);\n    }\n\n    this.visible = false;\n\n    if (pos) {\n      this.setPosition(pos);\n    }\n  }\n\n  setPosition(x, y, z) {\n\n    // Suppoer call with single Vec3 param\n    if (typeof x === 'object') {\n      this.scene.position.copy(x);\n    } else {\n      this.scene.position.set(x, y, z);\n    }\n    this.scene.matrixWorldNeedsUpdate;\n\n    this.update();\n\n    return this;\n  }\n\n  dtor() {\n    this.viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.onCameraChange);\n\n    if (this.overlayOwned) {\n      this.viewer.impl.removeOverlayScene(this.overlayName);\n    }\n  }\n\n  clearShape() {\n    if (this.shape) {\n      this.scene.remove(this.shape);\n      this.shape = null;\n    }\n  }\n\n  // Set a gizmo shape to display. Must be scaled to unitBox.\n  setShape(shape) {\n    this.clearShape();\n    this.shape = shape;\n    this.scene.add(shape);\n    return this;\n  }\n\n  // Set shape to sphere\n  makeSphere() {let color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0xff0000;\n\n    // create sphere mesh, centered at (0,0,0)\n    const radius = 0.5;\n    const widthSegments = 22;\n    const heightSegments = 16;\n    const geometry = new THREE.SphereGeometry(radius, widthSegments, heightSegments);\n    const material = new THREE.MeshPhongMaterial({ color });\n    const shape = new THREE.Mesh(geometry, material);\n\n    return this.setShape(shape);\n  }\n\n  makeCube() {let color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0xff0000;\n\n    // create box mesh of edgeLength 1, centered at (0,0,0)\n    const geometry = new THREE.BoxGeometry(1, 1, 1);\n    const material = new THREE.MeshPhongMaterial({ color });\n    const shape = new THREE.Mesh(geometry, material);\n    return this.setShape(shape);\n  }\n\n  setVisible(visible) {\n    if (this.visible == visible) {\n      return;\n    }\n\n    if (visible) {\n      this.viewer.impl.addOverlay(this.overlayName, this.scene);\n    } else {\n      this.viewer.impl.removeOverlay(this.overlayName, this.scene);\n    }\n\n    this.visible = visible;\n\n    // trigger overlay update\n    this.viewer.impl.invalidate(false, false, true);\n\n    return this;\n  }\n\n  update() {\n    // compute screenSize that we get with scaling 1.0\n    const dist = this.viewer.impl.camera.position.distanceTo(this.scene.position);\n    const worldToPixelScale = this.viewer.impl.camera.pixelsPerUnitAtDistance(dist);\n\n    // compute and apply scale in world-space\n    const scale = this.pixelSize / worldToPixelScale;\n    this.scene.scale.set(scale, scale, scale);\n\n    // make sure that scale changes takes effect\n    this.scene.matrixWorldNeedsUpdate = true;\n\n    this.viewer.impl.invalidate(false, false, true);\n  }\n\n  // On camera changes, update scaling to keep constant pixel-size\n  onCameraChange() {\n    this.update();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit3D/Gizmo3D.js\n");

                /***/
            }),

        /***/
        "./extensions/Edit3D/Label3D.js":
            /*!**************************************!*\
              !*** ./extensions/Edit3D/Label3D.js ***!
              \**************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Label3D)\n/* harmony export */ });\n\nconst av = Autodesk.Viewing;\nconst avp = Autodesk.Viewing.Private;\n\n// Given two points p1, p2 in worldSpace, this function computes\n// the pixel distance of their screen projections.\nconst getPixelDistance = (viewer, p1, p2) => {\n\n  const p1Screen = viewer.impl.worldToClient(p1);\n  const p2Screen = viewer.impl.worldToClient(p2);\n\n  const dx = p2Screen.x - p1Screen.x;\n  const dy = p2Screen.y - p1Screen.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\nconst Events = {\n  DRAG_START: \"dragStart\",\n  DRAG_END: \"dragEnd\"\n};\n\n// A Label3D is an html div whose position is synchronized with a fixed world-space position in LMV.\nclass Label3D extends Autodesk.Viewing.EventDispatcher {\n\n  // @param {Viewer3D}      viewer\n  // @param {THREE.Vector3} [pos3D] - By default (0,0,0). Can be set later by changing this.pos3D.\n  // @param {string}        [text]  - If undefined, label will be empty/invisible by default and you have to configure this.container yourself.\n  constructor(viewer) {let pos3D = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new THREE.Vector3();let text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '<Empty>';\n    super();\n    this.viewer = viewer;\n    this.pos3D = pos3D;\n    this.pos2D = new THREE.Vector3(); // updated automatically. z is the depth value\n    this.draggable = false;\n\n    this.setGlobalManager(viewer.globalManager);\n\n    // keep position in-sync with camera changes\n    this.cameraChangeCb = this.update.bind(this);\n    this.viewer.addEventListener(av.CAMERA_CHANGE_EVENT, this.cameraChangeCb);\n    this.viewer.addEventListener(av.VIEWER_RESIZE_EVENT, this.cameraChangeCb);\n\n    // Create container\n    const document = viewer.canvasWrap.ownerDocument; // (might be != global document in popout scenarios)\n    this.container = document.createElement('div');\n\n    // Note: It's essential that we add it to viewer.canvasWrap instead of viewer.container:\n    //       ToolController listens to events on canvasWrap. Therefore, if we would add\n    //       it to viewer.container, all mouse events captured would never reach the ToolController\n    //       no matter whether the gizmo handles them or not.\n    viewer.canvasWrap.appendChild(this.container);\n\n    // For fadeIn/Out effects\n    const setOpacity = (t) => {\n      this.container.style.opacity = t;\n    };\n    this.opacityParam = new avp.AnimatedParam(0.0, setOpacity, 0.5);\n\n    // Initial fade-in\n    this.opacityParam.fadeTo(1.0);\n\n    // We control position via transform. So, left/top usually keep (0,0)\n    this.container.style.left = '0px';\n    this.container.style.top = '0px';\n    this.container.style.position = 'absolute';\n    this.container.style.pointerEvents = 'none';\n\n    // Only used for text labels\n    this.textDiv = null;\n    if (text) {\n      this.setText(text);\n    }\n\n    // Level-of-detail (optional)\n    this.worldBox = null;\n    this.minPixels = 0;\n\n    // Update position and fade-in\n    this.setVisible(true);\n\n    this.onMouseDown = this.onMouseDown.bind(this);\n  }\n\n  // Decides if the label should be shown or hidden.\n  // We hide the label the projected box diagonal falls below this.minPixels.\n  shouldBeHidden() {\n    if (!this.worldBox) {\n      return false;\n    }\n\n    const boxSizeScreen = getPixelDistance(this.viewer, this.worldBox.min, this.worldBox.max);\n    return boxSizeScreen < this.minPixels;\n  }\n\n  // Optional: WorldBox of the annotated object. Used for level-of-detail: We only show the label\n  //           if the projected screen-size of the box is >= a given minimum pixel size.\n  // @param {Box3}   worldBox\n  // @param {number} minPixels\n  setWorldBox(box, minPixels) {\n    this.worldBox = box;\n    this.minPixels = minPixels;\n    this.update(); // hide this label immediately if projected world-box is very small\n  }\n\n  // Configure this label to display text\n  initTextLabel() {\n\n    // Create textDiv child div\n    const document = this.viewer.container.ownerDocument;\n    this.textDiv = document.createElement('div');\n    this.container.appendChild(this.textDiv);\n\n    // Use measure-tool styles by default\n    this.container.classList.add('measure-length');\n    this.container.classList.add('visible');\n    this.textDiv.classList.add('measure-length-text');\n  }\n\n  setText(text) {\n    if (!this.textDiv) {\n      this.initTextLabel();\n    }\n    this.textDiv.textContent = Autodesk.Viewing.i18n.translate(text);\n  }\n\n  dtor() {\n    this.container.remove();\n    this.viewer.removeEventListener(av.CAMERA_CHANGE_EVENT, this.cameraChangeCb);\n    this.viewer.removeEventListener(av.VIEWER_RESIZE_EVENT, this.cameraChangeCb);\n  }\n\n  // To change the position, just modify this.pos3D directly and call update().\n  update() {\n    // Get canvas position corresponding to this.pos3D\n    const { x, y } = this.viewer.impl.worldToClient(this.pos3D);\n\n    // Transform the div, so that its center is anchored in (x,y)\n    this.container.style.transform = `translate(calc(${x}px - 50%), calc(${y}px - 50%))`;\n\n    // Hide label if the annotated object is small on screen\n    const hidden = !this.visible || this.shouldBeHidden();\n\n    // If the label should be visible, immediately restore the container visibility, so the fade-in will be displayed.\n    if (!hidden) {\n      this.changeContainerVisibility(!hidden);\n    }\n\n    // this.opacityParam.skipAnim();\n    this.opacityParam.fadeTo(hidden ? 0.0 : 1.0, () => {\n      // If the label should be hidden, change container visibility only after the fade-out animation finished.\n      // This is needed in order that the element won't be touchable while hidden.\n      this.changeContainerVisibility(!hidden);\n    });\n  }\n\n  // Necessary in addition to the opacity change, in order to remove from the DOM rendering.\n  changeContainerVisibility(show) {\n    if (!show && !this.styleHidden) {\n      this.styleHidden = true;\n      this.container.style.display = 'none';\n    } else if (show && this.styleHidden) {\n      this.styleHidden = false;\n      this.container.style.display = 'block';\n    }\n  }\n\n  setPosition(pos) {\n    this.pos3D.copy(pos);\n    this.update();\n  }\n\n  setVisible(visible) {\n    this.visible = visible;\n    this.update();\n  }\n\n  // Fade out and dispose label when done\n  dispose() {\n    this.setVisible(false);\n\n    // Make sure that we clean up when fading is done.\n    window.setTimeout(() => this.dtor(), 1000 * this.opacityParam.animTime);\n  }\n\n  // @param {number} offset - Optional: Vertical offset in screen-pixels. Positive values shift down.\n  setVerticalOffset(offset) {\n    this.container.style.top = offset + 'px';\n  }\n\n  onMouseDown(event) {\n    this.container.style.cursor = \"grabbing\";\n\n    this.viewer.toolController.__clientToCanvasCoords(event);\n\n    this.fireEvent({ type: Events.DRAG_START, event });\n\n    const handleMouseUp = (e) => {\n      this.onMouseUp(e);\n      this.removeDocumentEventListener(\"mouseup\", handleMouseUp);\n    };\n\n    this.addDocumentEventListener(\"mouseup\", handleMouseUp);\n  }\n\n  onMouseUp(event) {\n    this.container.style.cursor = \"grab\";\n\n    this.viewer.toolController.__clientToCanvasCoords(event);\n\n    this.fireEvent({ type: Events.DRAG_END, event });\n  }\n\n  setDraggable(draggable) {\n    if (draggable && !this.draggable) {\n      this.container.addEventListener(\"mousedown\", this.onMouseDown);\n      this.container.style.cursor = \"grab\";\n      this.container.style.pointerEvents = 'auto';\n    } else if (!draggable && this.draggable) {\n      this.container.removeEventListener(\"mousedown\", this.onMouseDown);\n      this.container.style.cursor = \"\";\n      this.container.style.pointerEvents = 'none';\n    }\n\n    this.draggable = draggable;\n  }\n}\n\nav.GlobalManagerMixin.call(Label3D.prototype);\n\nLabel3D.Events = Events;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit3D/Label3D.js\n");

                /***/
            }),

        /***/
        "./extensions/Edit3D/NPointPicker.js":
            /*!*******************************************!*\
              !*** ./extensions/Edit3D/NPointPicker.js ***!
              \*******************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NPointPicker)\n/* harmony export */ });\n/* harmony import */ var _CoordPicker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CoordPicker.js */ \"./extensions/Edit3D/CoordPicker.js\");\n/* harmony import */ var _PointMarker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PointMarker.js */ \"./extensions/Edit3D/PointMarker.js\");\n\n\n\n// Controls the user interaction workflow for picking N points\n\nconst Events = {\n  POINT_SELECTED: \"pointSelected\",\n  POINT_HOVERED: \"pointHovered\",\n  POINT_SELECTION_STARTED: \"pointSelectionStarted\",\n  CLEAR: \"clear\"\n};\n\nconst Colors = {\n  Blue: \"rgb(6, 150, 215)\", // adskBlue500\n  Red: \"rgb(236, 74, 65)\", // red500\n  Black: \"rgb(0,0,0)\",\n  White: \"rgb(255,255,255)\"\n};\n\nconst ConnectorTypes = {\n  Line: \"line\",\n  Arrow: \"arrow\"\n};\n\n// N point picker - allows picking N points.\n//  @param {Viewer3D}      viewer\n//  @param {CoordPicker}   coordPicker\n//  @param {ScreenOverlay} screenOverlay\n//  @param {number}        N - number of points to select\n//  @param {Object}        [options]\n//  @param {Boolean}          [options.draggable] -      Whether points are draggable or not\n//  @param {String[]}      [options.colors] -         Array of colors\n//  @param {String[]}      [options.labels] -         Array of labels\n//  @param {String[]}      [options.icons] -          Array of icons\n//  @param {Object[]}      [options.connections] -    Array of point connections metadata.\n//  @param {Object[]}      [options.stops] -          Array of point indexes that the tool shouldn't automatically continue positioning new points after them.\nclass NPointPicker {\n  constructor(viewer, coordPicker, screenOverlay, N) {let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    this.viewer = viewer;\n    this.options = options;\n    this.coordPicker = coordPicker;\n    this.N = N;\n\n    Autodesk.Viewing.EventDispatcher.prototype.apply(this);\n\n    // Current active point - the one that is currently being picked or hovered.\n    this.selectingIndex = -1;\n\n    // Last valid point that was selected. Drag an exising previous point won't change this value.\n    this.lastSelectedPoint = -1;\n\n    this.coordPicker.addEventListener(\n      _CoordPicker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events.POINT_CLICKED,\n      (event) => this.onPointClicked(event)\n    );\n    this.coordPicker.addEventListener(\n      _CoordPicker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events.POINT_HOVERED,\n      (event) => this.onPointHovered(event)\n    );\n    this.coordPicker.addEventListener(_CoordPicker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events.ESCAPE, () => {\n      // Reset point only when dragging.\n      if (this.coordPicker.isDragging) {\n        this.cancelPointSelection();\n      }\n    });\n\n    this.points = [];\n    this.pointValid = [];\n    this.markers = [];\n    this.showMarkers = this.options.showMarkers || new Array(this.N).fill(true); // If showMarkers array is not supplied, default to true.\n\n    for (let i = 0; i < this.N; i++) {\n      this.points.push(new THREE.Vector3());\n      this.pointValid.push(false);\n      const color = options.colors ? options.colors[i] : Colors.Blue;\n      const label = options.labels ? options.labels[i] : undefined;\n      const icon = options.icons ? options.icons[i] : undefined;\n      const marker = new _PointMarker_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.viewer, undefined, label, icon);\n      this.markers.push(marker);\n\n      if (this.options.draggable) {\n        marker.addEventListener(_PointMarker_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Events.DRAG_START, () =>\n        this.startSelectPoint(i, true)\n        );\n        marker.addEventListener(_PointMarker_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Events.DRAG_END, (event) =>\n        this.onDragEnded(event)\n        );\n      }\n\n      // Hide the markers until we have valid from/to point\n      marker.setVisible(false);\n      marker.setColor(color);\n\n      // Custom label style\n      if (options.labelStyles && options.labelStyles[i]) {\n        Object.keys(options.labelStyles[i]).forEach((key) => {\n          marker.label.container.style[key] = options.labelStyles[i][key];\n        });\n      }\n    }\n\n    // {Autodesk.Edit2D.ScreenOverlay}\n    this.screenOverlay = screenOverlay;\n\n    const connectionsData = this.options.connections || [];\n    this.connectors = [];\n\n    for (let i = 0; i < connectionsData.length; i++) {\n      const connectionData = connectionsData[i];\n\n      // Configure style of line/arrow connection\n      const lineStyle = new Autodesk.Edit2D.Style({\n        lineStyle: 10,\n        lineWidth: 1.5,\n        lineColor: connectionData.color || Colors.Blue\n      });\n\n      let gizmo;\n      let attachableObject;\n      let setFrom;\n      let setTo;\n\n      if (connectionData.type === ConnectorTypes.Line) {\n        // Dashed line connecting from/to point\n        gizmo = new Autodesk.Edit2D.ScreenOverlay.Line3DGizmo();\n        gizmo.line2D.style.copy(lineStyle);\n\n        // Define attachable object for the label\n        attachableObject = gizmo.line2D;\n\n        // Define position setters\n        setFrom = gizmo.a.copy.bind(gizmo.a);\n        setTo = gizmo.b.copy.bind(gizmo.b);\n      } else if (connectionData.type === ConnectorTypes.Arrow) {\n        // Dashed arrow connecting from/to point\n        gizmo = new Autodesk.Edit2D.ScreenOverlay.Arrow3DGizmo();\n        gizmo.arrow.line.style.copy(lineStyle);\n        gizmo.arrow.head.style.fillColor = lineStyle.lineColor;\n        gizmo.arrow.setHeadLength(18); // in pixels, because layer is screen-aligned\n        gizmo.arrow.setHeadAngle(40); // in degrees\n\n        // Define attachable object for the label\n        attachableObject = gizmo.arrow.line;\n\n        // Define position setters\n        setFrom = gizmo.setFrom.bind(gizmo);\n        setTo = gizmo.setTo.bind(gizmo);\n      } else {\n        console.warn(\"Invalid connector type.\");\n        continue;\n      }\n\n      let label;\n\n      if (connectionData.getEdgeLabelText) {\n        label = new Autodesk.Edit2D.EdgeLabel(screenOverlay.layer);\n        label.attachToEdge(attachableObject, 0, 0);\n\n        // Custom label style\n        if (connectionData.labelStyle) {\n          Object.keys(connectionData.labelStyle).forEach((key) => {\n            label.container.style[key] = connectionData.labelStyle[key];\n          });\n        }\n      }\n\n      this.connectors.push({\n        fromIndex: connectionData.fromIndex,\n        toIndex: connectionData.toIndex,\n        getEdgeLabelText: connectionData.getEdgeLabelText,\n        gizmo,\n        label,\n        setFrom,\n        setTo\n      });\n    }\n\n    this.visible = true;\n\n    this.stops = this.options.stops || [];\n\n    this.onModelTransformChanged = this.onModelTransformChanged.bind(this);\n\n    this.modelsToPointsMap = {}; // { modelId: [indexes] }\n  }\n\n  dtor() {\n    this.viewer.removeEventListener(Autodesk.Viewing.MODEL_TRANSFORM_CHANGED_EVENT, this.onModelTransformChanged);\n    this.viewer = null;\n  }\n\n  startSelectPoint(index, enableDrag) {\n    // Backup current point's position in case the drag won't be valid. In this case, we'll restore the current point.\n    this.pointBackup = this.pointValid[index] ?\n    this.points[index].clone() :\n    null;\n\n    // Start coord picker\n    if (!this.viewer.toolController.isToolActivated(this.coordPicker.getName())) {\n      this.viewer.toolController.activateTool(this.coordPicker.getName());\n    }\n\n    this.selectingIndex = index;\n\n    if (this.options.draggable) {\n      this.coordPicker.setDragging(enableDrag);\n      this.setMarkersDraggable(false);\n    }\n\n    this.fireEvent({\n      type: Events.POINT_SELECTION_STARTED,\n      index: this.selectingIndex\n    });\n  }\n\n  onDragEnded(_ref) {let { event } = _ref;\n    if (!this.coordPicker.getDragging()) {\n      return;\n    }\n\n    this.coordPicker.handleSingleClick(event, 0);\n    this.coordPicker.setDragging(false);\n  }\n\n  startSelect() {\n    this.isActive = true;\n    this.continuePointSelectionIfNeeded();\n  }\n\n  // @param {Vector3} [from] - Use null/undefined for clearing the fromPoint.\n  setPoint(index, point) {\n    this.pointValid[index] = !!point;\n\n    if (this.pointValid[index]) {\n      this.points[index].copy(point);\n\n      // update point marker\n      this.markers[index].setPosition(point);\n    }\n\n    this.updateGizmos();\n  }\n\n  updateGizmoVisibility(gizmo, visible, skipFade) {\n    if (visible || skipFade) {\n      // Show/Hide immediately.\n      this.screenOverlay.setGizmoVisible(gizmo, visible);\n    } else {\n      // By default, hiding is done as smooth fadeout.\n      this.screenOverlay.fadeOutGizmo(gizmo);\n    }\n  }\n\n  // Show dashed line or arrow if from/to are both valid\n  updateGizmos(skipFade) {\n    for (let i = 0; i < this.N; i++) {\n      const visible = this.showMarkers[i] && this.visible && this.pointValid[i];\n      this.markers[i].setVisible(visible);\n    }\n\n    for (let i = 0; i < this.connectors.length; i++) {\n      const connector = this.connectors[i];\n      // Decide whether to show the connection between both points\n      const showGizmo =\n      this.visible &&\n      this.pointValid[connector.fromIndex] &&\n      this.pointValid[connector.toIndex];\n\n      this.updateGizmoVisibility(connector.gizmo, showGizmo, skipFade);\n\n      if (showGizmo) {\n        connector.setFrom(this.points[connector.fromIndex]);\n        connector.setTo(this.points[connector.toIndex]);\n      }\n\n      if (connector.label) {\n        connector.label.setOpacity(showGizmo ? 1 : 0, true);\n\n        // Update distance value only if label is visible.\n        if (showGizmo) {\n          const text = connector.getEdgeLabelText(i);\n          connector.label.setText(text);\n        }\n      }\n    }\n\n    // ensure refresh if only position has changed\n    this.screenOverlay.update();\n  }\n\n  clearPoint(index) {\n    this.pointValid[index] = false;\n    this.markers[index].setVisible(false);\n\n    this.updateGizmos();\n  }\n\n  clear() {\n    this.cancelPointSelection();\n\n    for (let i = 0; i < this.N; i++) {\n      this.pointValid[i] = false;\n      this.markers[i].setVisible(false);\n    }\n\n    this.selectingIndex = -1;\n    this.lastSelectedPoint = -1;\n\n    this.updateGizmos();\n\n    this.isActive = false;\n\n    this.fireEvent({ type: Events.CLEAR });\n  }\n\n  onPointHovered(event) {\n    if (this.selectingIndex === -1) {\n      return;\n    }\n\n    this.setPoint(this.selectingIndex, event.point);\n    this.fireEvent({\n      type: Events.POINT_HOVERED,\n      point: event.point,\n      index: this.selectingIndex\n    });\n  }\n\n  onPointClicked(_ref2) {let { point } = _ref2;let pickAnother = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (this.selectingIndex === -1) {\n      return;\n    }\n\n    // In case not point was selected, try restoring point backup.\n    point = point || this.pointBackup;\n\n    // Clear point backup\n    this.pointBackup = null;\n\n    // TODO: Avoid this hack. For this, the OrbitDollyPanTool should stop locking the ToolController and\n    //       properly handle the case to be disabled within an interaction - without global blocking the ToolController.\n    this.viewer.toolController.setIsLocked(false);\n    this.viewer.toolController.deactivateTool(this.coordPicker.getName());\n\n    if (point) {\n      // Set pivot to selected point, so that we can orbit around it\n      this.viewer.impl.camera.pivot.copy(point);\n      this.viewer.impl.camera.dirty = true;\n    }\n\n    this.setPoint(this.selectingIndex, point);\n\n    this.setMarkersDraggable(true);\n\n    const index = this.selectingIndex;\n\n    this.selectingIndex = -1;\n\n    if (point) {\n      this.lastSelectedPoint = Math.max(index, this.lastSelectedPoint);\n      this.fireEvent({ type: Events.POINT_SELECTED, point, index });\n    }\n\n    // Start picking another point if:\n    // - pickAnother flag is set\n    // - We just selected a point, and it's not a stop point index.\n    if (pickAnother && !(point && this.stops.includes(this.lastSelectedPoint))) {\n      this.continuePointSelectionIfNeeded();\n    }\n  }\n\n  setMarkersDraggable(enable) {\n    if (!this.options.draggable) {\n      return;\n    }\n\n    for (let i = 0; i < this.N; i++) {\n      const draggable =\n      enable && this.visible && this.pointValid[i] && this.showMarkers[i];\n      this.markers[i].setDraggable(draggable);\n    }\n  }\n\n  cancelPointSelection() {\n    this.onPointClicked({}, false);\n  }\n\n  continuePointSelectionIfNeeded() {\n    if (!this.isPickerActive()) {\n      return;\n    }\n\n    // Make sure the tool is visible.\n    this.setVisible(true);\n\n    for (let i = 0; i < this.N; i++) {\n      if (!this.pointValid[i]) {\n        this.startSelectPoint(i, false);\n        break;\n      }\n    }\n  }\n\n  // Note: By default, setVisible(false) triggers a smooth fadeout. Use skipFade=true if you want to ensure that everything is instantly hidden.\n  setVisible(visible, skipFade) {\n    if (visible !== this.visible) {\n      this.visible = visible;\n      this.updateGizmos(skipFade);\n    }\n  }\n\n  // Shortcut for readability: Hide immediately without any fade-out.\n  forceHide() {\n    this.setVisible(false, true);\n  }\n\n  areAllPointsSet() {\n    if (this.selectingIndex !== -1) {\n      return false;\n    }\n\n    for (let i = 0; i < this.N; i++) {\n      if (!this.pointValid[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isPickerActive() {\n    return this.isActive;\n  }\n\n  attachPointsToModel(model, points) {\n    this.setModelsToPointsMap(Object.assign({}, this.modelsToPointsMap, { [model.id]: points }));\n  }\n\n  // ModelsToPointsMap is used to define a connection between points and specific models.\n  // It is currently being used in order to update the points according to model transform changes.\n  // Could be also used in the future for limiting the snapper to snap only on the attached model.\n  setModelsToPointsMap(map) {\n    this.modelsToPointsMap = map;\n\n    const ids = Object.keys(this.modelsToPointsMap);\n\n    if (ids.length > 0) {\n      ids.forEach((id) => {var _model$getModelTransf;\n        const model = this.viewer.impl.findModel(Number(id), true);\n\n        // Used in order to calculate the initial transform diff later.\n        const matrix = (_model$getModelTransf = model.getModelTransform()) === null || _model$getModelTransf === void 0 ? void 0 : _model$getModelTransf.clone();\n        this.modelsToPointsMap[id].matrix = matrix || new Autodesk.Viewing.Private.LmvMatrix4(true);\n      });\n\n      if (!this.viewer.hasEventListener(Autodesk.Viewing.MODEL_TRANSFORM_CHANGED_EVENT, this.onModelTransformChanged)) {\n        this.viewer.addEventListener(Autodesk.Viewing.MODEL_TRANSFORM_CHANGED_EVENT, this.onModelTransformChanged);\n      }\n\n    } else {\n      // Remove event if there is no mapping.\n      this.viewer.removeEventListener(Autodesk.Viewing.MODEL_TRANSFORM_CHANGED_EVENT, this.onModelTransformChanged);\n    }\n  }\n\n  // Update points that are attached to a specific model, in case it moved.\n  onModelTransformChanged(_ref3) {let { model, matrix } = _ref3;\n    // No map;\n    if (!this.modelsToPointsMap) {\n      return;\n    }\n\n    const pointIndexes = this.modelsToPointsMap[model.id];\n\n    // Model not in map - nothing to update.\n    if (!pointIndexes) {\n      return;\n    }\n\n    // Calculate diff matrix.\n    const previousMatrix = this.modelsToPointsMap[model.id].matrix;\n    const diffMatrix = previousMatrix.invert();\n    diffMatrix.multiplyMatrices(matrix, diffMatrix);\n\n    // Update for next time.\n    this.modelsToPointsMap[model.id].matrix = matrix.clone();\n\n    for (let i = 0; i < this.N; i++) {\n      if (pointIndexes.includes(i) && this.pointValid[i]) {\n\n        const point = this.points[i];\n        point.applyMatrix4(diffMatrix);\n        this.setPoint(i, point);\n      }\n    }\n  }\n}\n\nNPointPicker.Events = Events;\nNPointPicker.Colors = Colors;\nNPointPicker.ConnectorTypes = ConnectorTypes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Edit3D/NPointPicker.js\n");

                /***/
            }),

        /***/
        "./extensions/Edit3D/PointMarker.js":
            /*!******************************************!*\
              !*** ./extensions/Edit3D/PointMarker.js ***!
              \******************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PointMarker)\n/* harmony export */ });\n/* harmony import */ var _Label3D_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Label3D.js */ \"./extensions/Edit3D/Label3D.js\");\n\n\n\nconst createIcon = (icon) => {\n  return [\n  '<svg width=\"50\" height=\"50\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">',\n  '<g stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\">',\n  icon,\n  '</g>',\n  '</svg>'].\n  join('');\n};\n\nconst Icons = {\n  Cross: '<path d=\"M0 25 L50 25 M25 0 L25 50\"/>',\n  Circle: '<circle r=\"5\" cx=\"25\" cy=\"27.5\" fill=\"currentColor\" stroke-width=\"0\" />',\n  Empty: ''\n};\n\nclass PointMarker extends _Label3D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n  constructor(viewer, pos3D, labelText) {let icon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Icons.Cross;\n    super(viewer, pos3D, null);\n\n    this.container.innerHTML = createIcon(icon);\n\n    // Create another label for the text\n    if (labelText) {\n      this.label = new _Label3D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](viewer, pos3D, labelText);\n\n      // Center text above the actual position\n      this.label.setVerticalOffset(-45);\n    }\n\n    // Set label visible by default. If text is empty, it is hidden anyway. \n    this.labelVisible = true;\n  }\n\n  // @param {string} Color string in css style (e.g. 'rgb(255, 255, 255)');\n  setColor(color) {\n    this.container.style.color = color;\n  }\n\n  setPosition(pos) {\n    super.setPosition(pos);\n    this.label && this.label.setPosition(pos);\n  }\n\n  setVisible(visible) {\n    super.setVisible(visible);\n    this.label && this.label.setVisible(this.labelVisible && visible);\n  }\n\n  setLabelVisible(visible) {\n    this.label && this.label.setVisible(this.visible && visible);\n  }\n}\n\nPointMarker.Events = _Label3D_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events;\nPointMarker.Icons = Icons;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQzRC9Qb2ludE1hcmtlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDbUM7O0FBRW5DLE1BQU1DLFVBQVUsR0FBR0EsQ0FBQ0MsSUFBSSxLQUFLO0VBQ3pCLE9BQU87RUFDSCw0R0FBNEc7RUFDeEcsd0RBQXdEO0VBQ3BEQSxJQUFJO0VBQ1IsTUFBTTtFQUNWLFFBQVEsQ0FDWDtFQUFDQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2QsQ0FBQzs7QUFFRCxNQUFNQyxLQUFLLEdBQUc7RUFDVkMsS0FBSyxFQUFFLHVDQUF1QztFQUM5Q0MsTUFBTSxFQUFFLHlFQUF5RTtFQUNqRkMsS0FBSyxFQUFFO0FBQ1gsQ0FBQzs7QUFFYyxNQUFNQyxXQUFXLFNBQVNSLG1EQUFPLENBQUM7O0VBRTdDUyxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFzQixLQUFwQlYsSUFBSSxHQUFBVyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBR1QsS0FBSyxDQUFDQyxLQUFLO0lBQ3BELEtBQUssQ0FBQ0ssTUFBTSxFQUFFQyxLQUFLLEVBQUUsSUFBSSxDQUFDOztJQUUxQixJQUFJLENBQUNLLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHaEIsVUFBVSxDQUFDQyxJQUFJLENBQUM7O0lBRTNDO0lBQ0EsSUFBSVUsU0FBUyxFQUFFO01BQ1gsSUFBSSxDQUFDTSxLQUFLLEdBQUcsSUFBSWxCLG1EQUFPLENBQUNVLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxTQUFTLENBQUM7O01BRWxEO01BQ0EsSUFBSSxDQUFDTSxLQUFLLENBQUNDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JDOztJQUVBO0lBQ0EsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSTtFQUM1Qjs7RUFFQTtFQUNBQyxRQUFRQSxDQUFDQyxLQUFLLEVBQUU7SUFDWixJQUFJLENBQUNOLFNBQVMsQ0FBQ08sS0FBSyxDQUFDRCxLQUFLLEdBQUdBLEtBQUs7RUFDdEM7O0VBRUFFLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtJQUNiLEtBQUssQ0FBQ0QsV0FBVyxDQUFDQyxHQUFHLENBQUM7SUFDdEIsSUFBSSxDQUFDUCxLQUFLLElBQUksSUFBSSxDQUFDQSxLQUFLLENBQUNNLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDO0VBQzdDOztFQUVBQyxVQUFVQSxDQUFDQyxPQUFPLEVBQUU7SUFDaEIsS0FBSyxDQUFDRCxVQUFVLENBQUNDLE9BQU8sQ0FBQztJQUN6QixJQUFJLENBQUNULEtBQUssSUFBSSxJQUFJLENBQUNBLEtBQUssQ0FBQ1EsVUFBVSxDQUFDLElBQUksQ0FBQ04sWUFBWSxJQUFJTyxPQUFPLENBQUM7RUFDckU7O0VBRUFDLGVBQWVBLENBQUNELE9BQU8sRUFBRTtJQUNyQixJQUFJLENBQUNULEtBQUssSUFBSSxJQUFJLENBQUNBLEtBQUssQ0FBQ1EsVUFBVSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxJQUFJQSxPQUFPLENBQUM7RUFDaEU7QUFDSjs7QUFFQW5CLFdBQVcsQ0FBQ3FCLE1BQU0sR0FBRzdCLG1EQUFPLENBQUM2QixNQUFNO0FBQ25DckIsV0FBVyxDQUFDSixLQUFLLEdBQUdBLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BdXRvZGVzay5FeHRlbnNpb25zLy4vZXh0ZW5zaW9ucy9FZGl0M0QvUG9pbnRNYXJrZXIuanM/NTUwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBMYWJlbDNEIGZyb20gJy4vTGFiZWwzRC5qcyc7IFxuXG5jb25zdCBjcmVhdGVJY29uID0gKGljb24pID0+IHtcbiAgICByZXR1cm4gW1xuICAgICAgICAnPHN2ZyB3aWR0aD1cIjUwXCIgaGVpZ2h0PVwiNTBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+JyxcbiAgICAgICAgICAgICc8ZyBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgZmlsbD1cIm5vbmVcIj4nLFxuICAgICAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICAnPC9nPicsXG4gICAgICAgICc8L3N2Zz4nXG4gICAgXS5qb2luKCcnKTtcbn07XG5cbmNvbnN0IEljb25zID0ge1xuICAgIENyb3NzOiAnPHBhdGggZD1cIk0wIDI1IEw1MCAyNSBNMjUgMCBMMjUgNTBcIi8+JyxcbiAgICBDaXJjbGU6ICc8Y2lyY2xlIHI9XCI1XCIgY3g9XCIyNVwiIGN5PVwiMjcuNVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIwXCIgLz4nLFxuICAgIEVtcHR5OiAnJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9pbnRNYXJrZXIgZXh0ZW5kcyBMYWJlbDNEIHtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdlciwgcG9zM0QsIGxhYmVsVGV4dCwgaWNvbiA9IEljb25zLkNyb3NzKSB7XG4gICAgICAgIHN1cGVyKHZpZXdlciwgcG9zM0QsIG51bGwpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmlubmVySFRNTCA9IGNyZWF0ZUljb24oaWNvbik7XG4gICAgXG4gICAgICAgIC8vIENyZWF0ZSBhbm90aGVyIGxhYmVsIGZvciB0aGUgdGV4dFxuICAgICAgICBpZiAobGFiZWxUZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsID0gbmV3IExhYmVsM0Qodmlld2VyLCBwb3MzRCwgbGFiZWxUZXh0KTtcblxuICAgICAgICAgICAgLy8gQ2VudGVyIHRleHQgYWJvdmUgdGhlIGFjdHVhbCBwb3NpdGlvblxuICAgICAgICAgICAgdGhpcy5sYWJlbC5zZXRWZXJ0aWNhbE9mZnNldCgtNDUpOyBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBsYWJlbCB2aXNpYmxlIGJ5IGRlZmF1bHQuIElmIHRleHQgaXMgZW1wdHksIGl0IGlzIGhpZGRlbiBhbnl3YXkuIFxuICAgICAgICB0aGlzLmxhYmVsVmlzaWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQHBhcmFtIHtzdHJpbmd9IENvbG9yIHN0cmluZyBpbiBjc3Mgc3R5bGUgKGUuZy4gJ3JnYigyNTUsIDI1NSwgMjU1KScpO1xuICAgIHNldENvbG9yKGNvbG9yKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmNvbG9yID0gY29sb3I7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24ocG9zKSB7XG4gICAgICAgIHN1cGVyLnNldFBvc2l0aW9uKHBvcyk7XG4gICAgICAgIHRoaXMubGFiZWwgJiYgdGhpcy5sYWJlbC5zZXRQb3NpdGlvbihwb3MpO1xuICAgIH1cblxuICAgIHNldFZpc2libGUodmlzaWJsZSkge1xuICAgICAgICBzdXBlci5zZXRWaXNpYmxlKHZpc2libGUpO1xuICAgICAgICB0aGlzLmxhYmVsICYmIHRoaXMubGFiZWwuc2V0VmlzaWJsZSh0aGlzLmxhYmVsVmlzaWJsZSAmJiB2aXNpYmxlKTtcbiAgICB9XG5cbiAgICBzZXRMYWJlbFZpc2libGUodmlzaWJsZSkge1xuICAgICAgICB0aGlzLmxhYmVsICYmIHRoaXMubGFiZWwuc2V0VmlzaWJsZSh0aGlzLnZpc2libGUgJiYgdmlzaWJsZSk7XG4gICAgfVxufVxuXG5Qb2ludE1hcmtlci5FdmVudHMgPSBMYWJlbDNELkV2ZW50cztcblBvaW50TWFya2VyLkljb25zID0gSWNvbnM7Il0sIm5hbWVzIjpbIkxhYmVsM0QiLCJjcmVhdGVJY29uIiwiaWNvbiIsImpvaW4iLCJJY29ucyIsIkNyb3NzIiwiQ2lyY2xlIiwiRW1wdHkiLCJQb2ludE1hcmtlciIsImNvbnN0cnVjdG9yIiwidmlld2VyIiwicG9zM0QiLCJsYWJlbFRleHQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjb250YWluZXIiLCJpbm5lckhUTUwiLCJsYWJlbCIsInNldFZlcnRpY2FsT2Zmc2V0IiwibGFiZWxWaXNpYmxlIiwic2V0Q29sb3IiLCJjb2xvciIsInN0eWxlIiwic2V0UG9zaXRpb24iLCJwb3MiLCJzZXRWaXNpYmxlIiwidmlzaWJsZSIsInNldExhYmVsVmlzaWJsZSIsIkV2ZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./extensions/Edit3D/PointMarker.js\n");

                /***/
            }),

        /***/
        "./extensions/Edit3D/TwoPointPicker.js":
            /*!*********************************************!*\
              !*** ./extensions/Edit3D/TwoPointPicker.js ***!
              \*********************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TwoPointPicker)\n/* harmony export */ });\n/* harmony import */ var _NPointPicker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NPointPicker.js */ \"./extensions/Edit3D/NPointPicker.js\");\n\n\n// Controls the user interaction workflow for aligning a model based on two selected points\n\n// Extend NPointPicker events.\nconst Events = Object.assign({}, _NPointPicker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events, {\n  FROM_POINT_SELECTED: 'fromPointSelected',\n  TO_POINT_SELECTED: 'toPointSelected',\n  FROM_POINT_HOVERED: 'fromPointHovered',\n  TO_POINT_HOVERED: 'toPointHovered'\n});\n\n// Implements the interaction to select two points: A 'fromPoint' and a 'toPoint'.\nclass TwoPointPicker extends _NPointPicker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n  constructor(viewer, coordPicker, screenOverlay, options) {\n    super(viewer, coordPicker, screenOverlay, 2, options);\n\n    this.addEventListener(_NPointPicker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events.POINT_SELECTED, (_ref) => {let { point, index } = _ref;\n      if (index === 0) {\n        this.fireEvent({ type: Events.FROM_POINT_SELECTED, point });\n      } else {\n        this.fireEvent({ type: Events.TO_POINT_SELECTED, point });\n      }\n    });\n\n    this.addEventListener(_NPointPicker_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Events.POINT_HOVERED, (_ref2) => {let { point, index } = _ref2;\n      if (index === 0) {\n        this.fireEvent({ type: Events.FROM_POINT_HOVERED, point });\n      } else {\n        this.fireEvent({ type: Events.TO_POINT_HOVERED, point });\n      }\n    });\n  }\n\n  setOffset(offset) {\n    this.offset.copy(offset);\n  }\n\n  startSelectFrom() {\n    this.startSelectPoint(0);\n  }\n\n  startSelectTo() {\n    this.startSelectPoint(1);\n  }\n}\n\nTwoPointPicker.Events = Events;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL0VkaXQzRC9Ud29Qb2ludFBpY2tlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE2Qzs7QUFFN0M7O0FBRUE7QUFDQSxNQUFNQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFSCx3REFBWSxDQUFDQyxNQUFNLEVBQUU7RUFDbERHLG1CQUFtQixFQUFFLG1CQUFtQjtFQUN4Q0MsaUJBQWlCLEVBQUUsaUJBQWlCO0VBQ3BDQyxrQkFBa0IsRUFBRSxrQkFBa0I7RUFDdENDLGdCQUFnQixFQUFFO0FBQ3RCLENBQUMsQ0FBQzs7QUFFRjtBQUNlLE1BQU1DLGNBQWMsU0FBU1Isd0RBQVksQ0FBQzs7RUFFckRTLFdBQVdBLENBQUNDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxhQUFhLEVBQUVDLE9BQU8sRUFBRTtJQUNyRCxLQUFLLENBQUNILE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxhQUFhLEVBQUUsQ0FBQyxFQUFFQyxPQUFPLENBQUM7O0lBRXJELElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNkLHdEQUFZLENBQUNDLE1BQU0sQ0FBQ2MsY0FBYyxFQUFFLENBQUFDLElBQUEsS0FBc0IsS0FBckIsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLENBQUMsQ0FBQyxHQUFBRixJQUFBO01BQ3ZFLElBQUlFLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDYixJQUFJLENBQUNDLFNBQVMsQ0FBQyxFQUFFQyxJQUFJLEVBQUVuQixNQUFNLENBQUNHLG1CQUFtQixFQUFFYSxLQUFLLENBQUMsQ0FBQyxDQUFDO01BQy9ELENBQUMsTUFBTTtRQUNILElBQUksQ0FBQ0UsU0FBUyxDQUFDLEVBQUVDLElBQUksRUFBRW5CLE1BQU0sQ0FBQ0ksaUJBQWlCLEVBQUVZLEtBQUssQ0FBQyxDQUFDLENBQUM7TUFDN0Q7SUFDSixDQUFDLENBQUM7O0lBRUYsSUFBSSxDQUFDSCxnQkFBZ0IsQ0FBQ2Qsd0RBQVksQ0FBQ0MsTUFBTSxDQUFDb0IsYUFBYSxFQUFFLENBQUFDLEtBQUEsS0FBc0IsS0FBckIsRUFBRUwsS0FBSyxFQUFFQyxLQUFLLENBQUMsQ0FBQyxHQUFBSSxLQUFBO01BQ3RFLElBQUlKLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDYixJQUFJLENBQUNDLFNBQVMsQ0FBQyxFQUFFQyxJQUFJLEVBQUVuQixNQUFNLENBQUNLLGtCQUFrQixFQUFFVyxLQUFLLENBQUMsQ0FBQyxDQUFDO01BQzlELENBQUMsTUFBTTtRQUNILElBQUksQ0FBQ0UsU0FBUyxDQUFDLEVBQUVDLElBQUksRUFBRW5CLE1BQU0sQ0FBQ00sZ0JBQWdCLEVBQUVVLEtBQUssQ0FBQyxDQUFDLENBQUM7TUFDNUQ7SUFDSixDQUFDLENBQUM7RUFDTjs7RUFFQU0sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFO0lBQ2QsSUFBSSxDQUFDQSxNQUFNLENBQUNDLElBQUksQ0FBQ0QsTUFBTSxDQUFDO0VBQzVCOztFQUVBRSxlQUFlQSxDQUFBLEVBQUc7SUFDZCxJQUFJLENBQUNDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztFQUM1Qjs7RUFFQUMsYUFBYUEsQ0FBQSxFQUFHO0lBQ1osSUFBSSxDQUFDRCxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7RUFDNUI7QUFDSjs7QUFFQW5CLGNBQWMsQ0FBQ1AsTUFBTSxHQUFHQSxNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL2V4dGVuc2lvbnMvRWRpdDNEL1R3b1BvaW50UGlja2VyLmpzPzFiMzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE5Qb2ludFBpY2tlciBmcm9tICcuL05Qb2ludFBpY2tlci5qcyc7XG5cbi8vIENvbnRyb2xzIHRoZSB1c2VyIGludGVyYWN0aW9uIHdvcmtmbG93IGZvciBhbGlnbmluZyBhIG1vZGVsIGJhc2VkIG9uIHR3byBzZWxlY3RlZCBwb2ludHNcblxuLy8gRXh0ZW5kIE5Qb2ludFBpY2tlciBldmVudHMuXG5jb25zdCBFdmVudHMgPSBPYmplY3QuYXNzaWduKHt9LCBOUG9pbnRQaWNrZXIuRXZlbnRzLCB7XG4gICAgRlJPTV9QT0lOVF9TRUxFQ1RFRDogJ2Zyb21Qb2ludFNlbGVjdGVkJyxcbiAgICBUT19QT0lOVF9TRUxFQ1RFRDogJ3RvUG9pbnRTZWxlY3RlZCcsXG4gICAgRlJPTV9QT0lOVF9IT1ZFUkVEOiAnZnJvbVBvaW50SG92ZXJlZCcsXG4gICAgVE9fUE9JTlRfSE9WRVJFRDogJ3RvUG9pbnRIb3ZlcmVkJ1xufSk7XG5cbi8vIEltcGxlbWVudHMgdGhlIGludGVyYWN0aW9uIHRvIHNlbGVjdCB0d28gcG9pbnRzOiBBICdmcm9tUG9pbnQnIGFuZCBhICd0b1BvaW50Jy5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR3b1BvaW50UGlja2VyIGV4dGVuZHMgTlBvaW50UGlja2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdlciwgY29vcmRQaWNrZXIsIHNjcmVlbk92ZXJsYXksIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodmlld2VyLCBjb29yZFBpY2tlciwgc2NyZWVuT3ZlcmxheSwgMiwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKE5Qb2ludFBpY2tlci5FdmVudHMuUE9JTlRfU0VMRUNURUQsICh7IHBvaW50LCBpbmRleCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCh7IHR5cGU6IEV2ZW50cy5GUk9NX1BPSU5UX1NFTEVDVEVELCBwb2ludCB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoeyB0eXBlOiBFdmVudHMuVE9fUE9JTlRfU0VMRUNURUQsIHBvaW50IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoTlBvaW50UGlja2VyLkV2ZW50cy5QT0lOVF9IT1ZFUkVELCAoeyBwb2ludCwgaW5kZXggfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoeyB0eXBlOiBFdmVudHMuRlJPTV9QT0lOVF9IT1ZFUkVELCBwb2ludCB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoeyB0eXBlOiBFdmVudHMuVE9fUE9JTlRfSE9WRVJFRCwgcG9pbnQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldE9mZnNldChvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQuY29weShvZmZzZXQpO1xuICAgIH1cblxuICAgIHN0YXJ0U2VsZWN0RnJvbSgpIHtcbiAgICAgICAgdGhpcy5zdGFydFNlbGVjdFBvaW50KDApO1xuICAgIH1cblxuICAgIHN0YXJ0U2VsZWN0VG8oKSB7XG4gICAgICAgIHRoaXMuc3RhcnRTZWxlY3RQb2ludCgxKTtcbiAgICB9XG59XG5cblR3b1BvaW50UGlja2VyLkV2ZW50cyA9IEV2ZW50cztcbiJdLCJuYW1lcyI6WyJOUG9pbnRQaWNrZXIiLCJFdmVudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJGUk9NX1BPSU5UX1NFTEVDVEVEIiwiVE9fUE9JTlRfU0VMRUNURUQiLCJGUk9NX1BPSU5UX0hPVkVSRUQiLCJUT19QT0lOVF9IT1ZFUkVEIiwiVHdvUG9pbnRQaWNrZXIiLCJjb25zdHJ1Y3RvciIsInZpZXdlciIsImNvb3JkUGlja2VyIiwic2NyZWVuT3ZlcmxheSIsIm9wdGlvbnMiLCJhZGRFdmVudExpc3RlbmVyIiwiUE9JTlRfU0VMRUNURUQiLCJfcmVmIiwicG9pbnQiLCJpbmRleCIsImZpcmVFdmVudCIsInR5cGUiLCJQT0lOVF9IT1ZFUkVEIiwiX3JlZjIiLCJzZXRPZmZzZXQiLCJvZmZzZXQiLCJjb3B5Iiwic3RhcnRTZWxlY3RGcm9tIiwic3RhcnRTZWxlY3RQb2ludCIsInN0YXJ0U2VsZWN0VG8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Edit3D/TwoPointPicker.js\n");

                /***/
            })

        /******/
    });
    /************************************************************************/
    /******/ // The module cache
    /******/
    var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/
        if (cachedModule !== undefined) {
            /******/
            return cachedModule.exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = __webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/
            exports: {}
            /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /************************************************************************/
    /******/
    /* webpack/runtime/define property getters */
    /******/
    (() => {
        /******/ // define getter functions for harmony exports
        /******/
        __webpack_require__.d = (exports, definition) => {
            /******/
            for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                    /******/
                    Object.defineProperty(exports, key, {
                        enumerable: true,
                        get: definition[key]
                    });
                    /******/
                }
                /******/
            }
            /******/
        };
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/hasOwnProperty shorthand */
    /******/
    (() => {
        /******/
        __webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/make namespace object */
    /******/
    (() => {
        /******/ // define __esModule on exports
        /******/
        __webpack_require__.r = (exports) => {
            /******/
            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/
                Object.defineProperty(exports, Symbol.toStringTag, {
                    value: 'Module'
                });
                /******/
            }
            /******/
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            /******/
        };
        /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module can't be inlined because the eval-source-map devtool is used.
    /******/
    var __webpack_exports__ = __webpack_require__("./extensions/Edit3D/Edit3D.js");
    /******/
    Autodesk.Extensions.Edit3D = __webpack_exports__;
    /******/
    /******/
})();