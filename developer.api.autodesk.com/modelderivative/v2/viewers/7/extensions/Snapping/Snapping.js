/*!
 * LMV v7.96.0
 *
 * Copyright 2024 Autodesk, Inc.
 * All rights reserved.
 *
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 *
 * Autodesk Viewer SDK Usage Limitations:
 *
 * The Autodesk Viewer SDK JavaScript must be delivered from an
 * Autodesk-hosted URL.
 */
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/
(() => { // webpackBootstrap
    /******/
    var __webpack_modules__ = ({

        /***/
        "./extensions/Snapping/SnapMath.js":
            /*!*****************************************!*\
              !*** ./extensions/Snapping/SnapMath.js ***!
              \*****************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   intersectLines: () => (/* binding */ intersectLines),\n/* harmony export */   nearestPointOnCircularArc: () => (/* binding */ nearestPointOnCircularArc)\n/* harmony export */ });\n\n// Collection of static math functions used for snapping implementation\n\n// Find closest point to p on a circular arc. \n//  @param {Vector2} center\n//  @param {number} radius\n//  @param {number} startAngle, endAngle - ccw angles in radians. 0 means direction x+\n//  @param {Vector2} [outPoint]\n//  @param {Vector2}\nconst nearestPointOnCircularArc = (p, center, radius, startAngle, endAngle, outPoint) => {\n\n  outPoint = outPoint || new THREE.Vector2();\n\n  // get normalized direction from circle center to p.\n  // dir = (p-center).normalized()\n  const dir = outPoint.copy(p).sub(center).normalize();\n\n  // If the point is within the arc, we are done\n  const angle = Math.atan2(dir.y, dir.x);\n  const insideArc = Autodesk.Extensions.CompGeom.angleInsideArc(angle, startAngle, endAngle);\n  if (insideArc) {\n    // The ray from center towards p intersects the circle arc.\n    // So, we obtain the closest point by projecting p onto the circle.\n    //\n    // Since dir is the normalized direction from center to p, we obtain the circle projection by:\n    //  onCircleArc = center + dir * radius\n    return dir.multiplyScalar(radius).add(center);\n  }\n\n  // The closest point on the circle is not on the arc.\n  // Then the closest point must be one of the arc ends. Note that this conclusion\n  // can only be made for circles, but not for ellipses with different radii.\n  const pStart = Autodesk.Extensions.CompGeom.getEllipsePoint(startAngle, center.x, center.y, radius, radius);\n  const pEnd = Autodesk.Extensions.CompGeom.getEllipsePoint(endAngle, center.x, center.y, radius, radius);\n\n  const d2Start = pStart.distanceToSquared(p);\n  const d2End = pEnd.distanceToSquared(p);\n  const startIsCloser = d2Start <= d2End;\n\n  outPoint.copy(startIsCloser ? pStart : pEnd);\n  return outPoint;\n};\n\n// Compute intersection of two line segments\n// based on http://www.paulbourke.net/geometry/pointlineplane/\n//  @param {Vector2} p1, p2               - First line segment\n//  @param {Vector2} p3, p4               - Second line segment\n//  @param {bool}    [checkInsideSegment] - If true, we reject line intersections outside the segment ranges\n//  @param {Vector2} [outPoint]           - Optional target vector\n//  @param {number}  [epsilon]            - Nearly-zero threshold used to determine \"nearly-parallel\" resp. \"nearly-zero-length line\"\n//  @param {Vector2|null}\nconst intersectLines = function (p1, p2, p3, p4, checkInsideSegment, outPoint) {let epsilon = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0.00001;\n\n  const denom = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n\n  // Reject if lines are parallel or one of them has zero-length\n  if (Math.abs(denom) < epsilon) {\n    return null;\n  }\n\n  // ua denotes where to find the intersection point p along segment (p1, p2):\n  //   For ua = 0, we have p = p1\n  //   For ua = 1, we have p = p2\n  let ua = (p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x);\n  ua /= denom;\n\n  // Apply segment check\n  if (checkInsideSegment) {\n\n    // ub denotes where to find the intersection point p along segment (p3, p4)\n    let ub = (p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x);\n    ub /= denom;\n\n    // Intersection is within the segments if ua and ub are both in [0,1]\n    if (ua < 0.0 || ua > 1.0 ||\n    ub < 0.0 || ub > 1.0) {\n      return null;\n    }\n  }\n\n  outPoint = outPoint || new THREE.Vector2();\n\n  outPoint.x = p1.x + ua * (p2.x - p1.x);\n  outPoint.y = p1.y + ua * (p2.y - p1.y);\n  return outPoint;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Snapping/SnapMath.js\n");

                /***/
            }),

        /***/
        "./extensions/Snapping/Snapper.js":
            /*!****************************************!*\
              !*** ./extensions/Snapping/Snapper.js ***!
              \****************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Snapper: () => (/* binding */ Snapper)\n/* harmony export */ });\n/* harmony import */ var _SnapperIndicator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SnapperIndicator.js */ \"./extensions/Snapping/SnapperIndicator.js\");\n/* harmony import */ var _SnapMath_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SnapMath.js */ \"./extensions/Snapping/SnapMath.js\");\n\n\n\n\nconst MeasureCommon = Autodesk.Viewing.MeasureCommon;\nconst EPSILON = MeasureCommon.EPSILON;\nconst SnapType = MeasureCommon.SnapType;\nconst SnapResult = MeasureCommon.SnapResult;\n\nvar SNAP_PRECISION = 0.001;\n\nconst av = Autodesk.Viewing;\nconst avp = av.Private;\nconst VertexBufferReader = avp.VertexBufferReader;\n\n/**\n * @param {number} a - First value to compare\n * @param {number} b - Second value to compare\n * @private\n */\nfunction isEqualWithPrecision(a, b) {\n  return Math.abs(a - b) <= SNAP_PRECISION;\n}\n\n/**\n * Are the vectors equal within SNAP_PRECISION?\n * @param {THREE.Vector3} v1 - vector\n * @param {THREE.Vector3} v2 - vector\n * @returns {boolean} - true when they are equal\n * @private\n */\nfunction isEqualVectorsWithPrecision(v1, v2) {\n  return Math.abs(v1.x - v2.x) <= SNAP_PRECISION &&\n  Math.abs(v1.y - v2.y) <= SNAP_PRECISION &&\n  Math.abs(v1.z - v2.z) <= SNAP_PRECISION;\n}\n\n/**\n * Are the vectors inverse of each other within SNAP_PRECISION?\n * @param {THREE.Vector3} v1 - vector\n * @param {THREE.Vector3} v2 - vector\n * @returns {boolean} - true when they are inverse of each other\n * @private\n */\nfunction isInverseVectorsWithPrecision(v1, v2) {\n  return Math.abs(v1.x + v2.x) <= SNAP_PRECISION &&\n  Math.abs(v1.y + v2.y) <= SNAP_PRECISION &&\n  Math.abs(v1.z + v2.z) <= SNAP_PRECISION;\n}\n\n/**\n * @param {THREE.Vector3} point - Point\n * @param {THREE.Vector3} lineStart - Start of the line\n * @param {THREE.Vector3} lineEnd - End of the line\n * @returns {number} - distance from point to the line\n * @private\n */\nfunction distancePointToLine(point, lineStart, lineEnd) {\n\n  if (lineStart.equals(lineEnd)) {// Degenerate line\n    return point.distanceTo(lineStart);\n  }\n\n  var X0 = new THREE.Vector3();\n  var X1 = new THREE.Vector3();\n  var distance;\n  var param;\n\n  X0.subVectors(lineStart, point);\n  X1.subVectors(lineEnd, lineStart);\n  param = X0.dot(X1);\n  X0.subVectors(lineEnd, lineStart);\n  param = -param / X0.dot(X0);\n\n  if (param < 0) {\n    distance = point.distanceTo(lineStart);\n  } else if (param > 1) {\n    distance = point.distanceTo(lineEnd);\n  } else {\n    X0.subVectors(point, lineStart);\n    X1.subVectors(point, lineEnd);\n    X0.cross(X1);\n    X1.subVectors(lineEnd, lineStart);\n\n    distance = Math.sqrt(X0.dot(X0)) / Math.sqrt(X1.dot(X1));\n  }\n\n  return distance;\n}\n\nconst SnapCandidateType = {\n  Unknown: 0,\n  Line: 1,\n  CircularArc: 2,\n  EllipticalArc: 3\n};\n\n// A SnapCandidate references a single segment (line or arc) that we could snap to.\nclass SnapCandidate {\n  constructor(viewportId) {\n\n    this.type = SnapCandidateType.Unknown;\n    this.viewportId = viewportId;\n\n    // 2d distance between original (unsnapped) position and the geometry of this candidate.\n    this.distance = 0;\n\n    // {Vector2} Start/Endpoint - only for line segments\n    this.lineStart = null;\n    this.lineEnd = null;\n\n    // Fixed radius - only for CircularArcs\n    this.radius = 0;\n\n    // Separate radii - only for ellipse arcs\n    this.radiusX = 0; // = major radius - by convention\n    this.radiusY = 0;\n\n    // Center point as Vector2 (for arcs)\n    this.center = null;\n\n    // Start/end angle for arcs: Ccw angle in radians. Angle 0 corresponds to direction x+.\n    this.startAngle = 0;\n    this.endAngle = 0;\n  }\n\n  fromLine(p1, p2) {\n    this.type = SnapCandidateType.Line;\n    this.lineStart = p1.clone();\n    this.lineEnd = p2.clone();\n    return this;\n  }\n\n  fromCircularArc(center, radius, start, end) {\n    this.type = SnapCandidateType.CircularArc;\n    this.center = center.clone();\n    this.radius = radius;\n    this.start = start;\n    this.end = end;\n    return this;\n  }\n\n  fromEllipticalArc(center, radiusX, radiusY, start, end) {\n    this.type = SnapCandidateType.EllipticalArc;\n    this.center = center.clone();\n    this.radiusX = radiusX;\n    this.radiusY = radiusY;\n    this.start = start;\n    this.end = end;\n    return this;\n  }\n\n  isLine() {return this.type === SnapCandidateType.Line;}\n  isCircularArc() {return this.type === SnapCandidateType.CirularArc;}\n  isEllipticalArc() {return this.type === SnapCandidateType.EllipticalArc;}\n\n  // Checks if the snapGeometry of this candidate intersects with another one.\n  //  @param {SnapCandidate} other\n  //  @param {Vector2} [optionalTarget]\n  //  @returns {THREE.Vector2|null} Returns intersection point if there is one.\n  getIntersection(other, optionalTarget) {\n\n    if (this.isLine() && other.isLine()) {\n      // Note: We do the intersections on the whole line - not just the intersections.\n      // Reason is:\n      //  a) Otherwise, it would not snap if you are slightly outline of one line segment\n      //  b) By definition, we get only very close segment candidates anyway\n      return (0,_SnapMath_js__WEBPACK_IMPORTED_MODULE_1__.intersectLines)(this.lineStart, this.lineEnd, other.lineStart, other.lineEnd, false, optionalTarget);\n    }\n\n    // TODO: Currently, we only support snapping to line-line intersections\n  }\n}\n\n// Checks if we can snap to an intersection of two close segments (each can be a line or arcs).\n//  @param {SnapCandidate[]} candidates     - Snap candidate geometries collected in GeometryCallback. Assumed to be within snapRadius.\n//  @param {TREE.Vector3}    intersectPoint - Unsnapped original position\n//  @param {number}          snapRadius\n//  @returns {Object|null} If an intersection snap is found, the result contains:\n//                    {\n//                        viewportId  // number\n//                        snapPoint   // (THREE.Vector3)\n//                    }\nconst findIntersectionSnap = (candidates, intersectPoint, snapRadius) => {\n\n  // Sort snapping candidates by increasing distance\n  // Strictly speaking, we just need the best two ones. But the number of candidates within the snapping\n  // distance is generally small anyway - and working with a sorted array is more flexible to incrementally\n  // make the snapping smarter later.\n  const byDistance = (ca, cb) => ca.distance - cb.distance;\n  candidates.sort(byDistance);\n\n  // Stop here if we don't have enough candidates for an intersection\n  if (candidates.length < 2) {\n    return null;\n  }\n\n  // Init result object\n  const result = {\n    // Just use the one of the first candidate. There is no unique viewportId when using an intersection.\n    viewportId: candidates[0].viewportId,\n\n    // Snapping happens in 2d - so we set z in advance and just keep the original value.\n    // Note: Snapper generally needs some revision if we use it for planes that are not perpendicular to the viewing direction.\n    snapPoint: new THREE.Vector3(0, 0, intersectPoint.z)\n  };\n\n  // Check for any candidate that intersects with the closest one we found\n  const first = candidates[0];\n  for (let i = 1; i < candidates.length; i++) {\n    const second = candidates[i];\n\n    // Do intersection test. If found, write it to result.snapPoint\n    const found = first.getIntersection(second, result.snapPoint);\n    if (!found) {\n      continue;\n    }\n\n    // We found an intersection. Although we assume all candidates to be within\n    // snap radius already, the intersection may still be somewhere else.\n    // => Check if intersection is still within the snapRadius.\n    const dist = THREE.Vector2.prototype.distanceTo.call(result.snapPoint, intersectPoint);\n    if (dist < snapRadius) {\n      // We found a valid intersection snap\n      return result;\n    }\n  }\n  return null;\n};\n\n\n/**\n * A tool that lets users attach pointer events to vertices and edges. It supports 2D and 3D models.\n *\n * @param {Viewer3D} viewer - Viewer instance\n * @param {object} options - Configurations for the extension\n * @memberof Autodesk.Viewing.Extensions.Snapping\n * @alias Autodesk.Viewing.Extensions.Snapping.Snapper\n * @class\n */\nfunction Snapper(viewer, options) {\n\n  var _snapResult = new SnapResult();\n\n  var _viewer = viewer;\n  this.setGlobalManager(viewer.globalManager);\n\n  var _options = options || {};\n  var _names;\n\n  if (_options.markupMode) {\n    _names = [\"snapper-markup\"];\n  } else if (_options.toolName) {\n    // Allow tools to use their own snapper\n    _names = [_options.toolName];\n  } else {\n    _names = [\"snapper\"];\n  }\n\n  var _priority = 60;\n\n  var _active = false;\n\n  var _distanceToEdge = Number.MAX_VALUE;\n  var _distanceToVertex = null;\n\n  var _isDragging = false;\n  var _isPressing = false;\n  var _isSnapped = false;\n\n  var _forcedVpId = null; // the viewport index of the first selection for 2D\n\n  var _snapToPixel = false;\n\n  var _snapFilter = null; // Optional snapping filter, based on snapResult. (snapResult) => boolean.\n\n  this.indicator = new _SnapperIndicator_js__WEBPACK_IMPORTED_MODULE_0__.SnapperIndicator(viewer, this);\n\n  this.markupMode = _options.markupMode;\n  this.renderSnappedGeometry = _options.renderSnappedGeometry;\n  this.renderSnappedTopology = _options.renderSnappedTopology;\n\n  //Notice: The pixelSize should correspond to the amount of pixels per line in idAtPixels, the shape of\n  //detection area is square in idAtPixels, but circle in snapper, should make their areas match roughly.\n  this.detectRadiusInPixels = av.isMobileDevice() ? 50 : 10;\n\n  /**\n   * @returns {boolean} true when the tool is active\n   *\n   * @alias Autodesk.Viewing.Extensions.Snapping.Snapper#isActive\n   */\n  this.isActive = function () {\n    return _active;\n  };\n\n  this.getNames = function () {\n    return _names;\n  };\n\n  this.getName = function () {\n    return _names[0];\n  };\n\n  this.getPriority = function () {\n    return _priority;\n  };\n\n  /**\n   * Starts intercepting pointer events.\n   * Invoked automatically by the {@link ToolController}.\n   *\n   * @alias Autodesk.Viewing.Extensions.Snapping.Snapper#activate\n   */\n  this.activate = function () {\n    _active = true;\n\n    if (this.indicator.isNull()) {\n      this.indicator = new _SnapperIndicator_js__WEBPACK_IMPORTED_MODULE_0__.SnapperIndicator(viewer, this);\n    }\n  };\n\n\n  /**\n   * Stops intercepting pointer events.\n   * Invoked automatically by the {@link ToolController}.\n   *\n   * @alias Autodesk.Viewing.Extensions.Snapping.Snapper#deactivate\n   */\n  this.deactivate = function () {\n    _active = false;\n\n    if (!this.indicator.isNull()) {\n      this.indicator.destroy();\n      this.indicator = new _SnapperIndicator_js__WEBPACK_IMPORTED_MODULE_0__.NullSnapperIndicator();\n    }\n  };\n\n  this.copyResults = function (destiny) {\n    _snapResult.copyTo(destiny);\n  };\n\n  this.getEdge = function () {\n    return _snapResult.geomEdge;\n  };\n\n  this.getVertex = function () {\n    return _snapResult.geomVertex;\n  };\n\n  this.getGeometry = function () {\n    return _snapResult.getGeometry();\n  };\n\n  this.getGeometryType = function () {\n    return _snapResult.geomType;\n  };\n\n  this.getIntersectPoint = function () {\n    return _snapResult.intersectPoint;\n  };\n\n\n  /**\n   * @returns {SnapResult} The snapping status of the last pointer event performed.\n   *\n   * @alias Autodesk.Viewing.Extensions.Snapping.Snapper#getSnapResult\n   */\n  this.getSnapResult = function () {\n    return _snapResult;\n  };\n\n  /**\n   * Checks whether the tool's last update resulted on a snap.\n   *\n   * @returns {boolean} true when the last pointer event got snapped.\n   *\n   * @alias Autodesk.Viewing.Extensions.Snapping.Snapper#isSnapped\n   */\n  this.isSnapped = function () {\n    return _isSnapped;\n  };\n\n  this.clearSnapped = function () {\n    _snapResult.clear();\n    _isSnapped = false;\n  };\n\n  this.setViewportId = function (vpId) {\n    _forcedVpId = vpId;\n  };\n\n  this.setSnapToPixel = function (enable) {\n    _snapToPixel = enable;\n  };\n\n  this.getSnapToPixel = function () {\n    return _snapToPixel;\n  };\n\n  this.setSnapToArc = function (enable) {\n    _snapResult.snapToArc = enable;\n  };\n\n  this.getSnapToArc = function () {\n    return _snapResult.snapToArc;\n  };\n\n  this.setArc = function (isArc) {\n    _snapResult.isArc = isArc;\n  };\n\n  this.getArc = function () {\n    return _snapResult.isArc;\n  };\n\n  this.setSnapFilter = function (filter) {\n    _snapFilter = filter;\n  };\n\n  /**\n   * 3D Snapping\n   *\n   * @param result -Result of Hit Test.\n   */\n  this.snapping3D = function (result) {\n\n    _snapResult.snapNode = result.dbId;\n    _snapResult.intersectPoint = result.intersectPoint;\n    _snapResult.modelId = result.model ? result.model.id : null;\n\n    var face = result.face;\n\n    if (!result.model || result.fragId === undefined) {\n      // some non-model geometry was hit\n      if (result.object instanceof THREE.Mesh) {\n        // if it was a mesh, try to snap to it\n        this.meshSnapping(face, result.object);\n      }\n    } else {\n      var fragIds;\n\n      if (result.fragId.length === undefined) {\n        fragIds = [result.fragId];\n      } else {\n        fragIds = result.fragId;\n      }\n\n      // This is for Fusion model with topology data\n      _snapResult.hasTopology = result.model.hasTopology();\n      if (_snapResult.hasTopology) {\n        this.snapping3DwithTopology(face, fragIds, result.model);\n      } else {\n        this.snapping3DtoMesh(face, fragIds, result.model);\n      }\n    }\n  };\n\n\n  /**\n   * Returns a function that sets a vertex (Vector3 or LmvVector3) to the data read from a vertex buffer at idx\n   * Signature: func(idx, vertex) -> vertex\n   *            if vertex is null/undefined, a new THREE.Vector3 is created\n   *\n   * @param {BufferGeometry} geometry - the geometry of mesh\n   *\n   * @private\n   */\n\n  this.makeReadVertexFunc = function (geometry) {\n    const attributes = geometry.attributes;\n    let positions, stride;\n    // Get the offset to positions in the buffer. Be careful, 2D buffers\n    // don't use the 'position' attribute for positions. Reject those.\n    // meshes use vblayout for describing the buffer structure, BufferGeometry uses attributes.xx\n    let poffset;\n\n    if (geometry.vblayout) {\n      if (!geometry.vblayout.position) {\n        return function () {}; // No positions, what to do??\n      }\n      poffset = geometry.vblayout.position.offset;\n    } else if (!attributes.position) {\n      return function () {}; // No positions, what to do??\n    } else {\n      poffset = attributes.position.offset || 0;\n    }\n\n    positions = geometry.vb ? geometry.vb : geometry.attributes.position.array;\n    stride = geometry.vb ? geometry.vbstride : 3;\n\n    return function (idx, v) {\n      const p = idx * stride + poffset;\n      v = v || new THREE.Vector3();\n      v.set(\n        positions[p],\n        positions[p + 1],\n        positions[p + 2]\n      );\n      return v;\n    };\n  };\n\n  /**\n   * Snapping order is: 1st vertices, 2nd edges, 3rd and final faces.\n   *\n   * @param face\n   * @param fragIds\n   * @param model\n   * @private\n   */\n  this.snapping3DwithTopology = function (face, fragIds, model) {\n\n    // Because edge topology data may be in other fragments with same dbId, need to iterate all of them.\n    if (_snapResult.snapNode) {\n      fragIds = [];\n\n      model.getData().instanceTree.enumNodeFragments(_snapResult.snapNode, function (fragId) {\n        fragIds.push(fragId);\n      }, true);\n    }\n\n    _snapResult.geomFace = _snapResult.geomEdge = _snapResult.geomVertex = null;\n    _distanceToEdge = Number.MAX_VALUE;\n\n    for (var fi = 0; fi < fragIds.length; ++fi) {var _model$getFragmentLis, _model$getFragmentLis2;\n\n      var fragId = fragIds[fi];\n\n      const matrixWorld = new THREE.Matrix4();\n      (_model$getFragmentLis = model.getFragmentList()) === null || _model$getFragmentLis === void 0 || _model$getFragmentLis.getWorldMatrix(fragId, matrixWorld);\n      var geometry = (_model$getFragmentLis2 = model.getFragmentList()) === null || _model$getFragmentLis2 === void 0 ? void 0 : _model$getFragmentLis2.getGeometry(fragId);\n\n      var topoIndex = model.getTopoIndex(fragId);\n      var topology = model.getTopology(topoIndex);\n      var facesTopology = topology.faces;\n      var edgesTopology = topology.edges;\n\n      if (!_snapResult.geomFace) {\n        _snapResult.geomFace = this.faceSnappingWithTopology(face, geometry, facesTopology, { matrixWorld });\n\n        if (_snapResult.geomFace) {\n          _snapResult.geomFace.fragId = fragId;\n        }\n\n        var normalMatrix = new THREE.Matrix3().getNormalMatrix(matrixWorld);\n        _snapResult.faceNormal = face.normal.applyMatrix3(normalMatrix).normalize();\n      }\n\n      // Need to iterate all frags with same dbId, because when meshes are attached with each other,\n      // edge-topology data will only be on one mesh.\n      this.edgeSnappingWithTopology(_snapResult.intersectPoint, geometry, edgesTopology, { matrixWorld });\n\n    }\n\n    _snapResult.geomVertex = this.vertexSnappingWithTopology(_snapResult.geomEdge, _snapResult.intersectPoint);\n\n    if (_snapResult.geomFace) {\n\n      // Determine which one should be drawn: face , edge or vertex\n      _snapResult.radius = this.setDetectRadius(_snapResult.intersectPoint);\n\n      if ((_options.forceSnapVertices || _distanceToVertex < _snapResult.radius) && _snapResult.geomVertex) {\n        _snapResult.geomType = SnapType.SNAP_VERTEX;\n      } else\n      if ((_options.forceSnapEdges || _distanceToEdge < _snapResult.radius) && _snapResult.geomEdge) {\n\n        var center = this.edgeIsCircle(_snapResult.geomEdge);\n        if (center) {\n          _snapResult.circularArcCenter = center;\n          _snapResult.circularArcRadius = center.distanceTo(_snapResult.geomEdge.vertices[0]);\n          _snapResult.geomEdge.center = _snapResult.circularArcCenter;\n          _snapResult.geomEdge.radius = _snapResult.circularArcRadius;\n          _snapResult.geomType = SnapType.SNAP_CIRCULARARC;\n        } else\n        if (this.edgeIsCurved(_snapResult.geomEdge)) {\n          _snapResult.geomType = SnapType.SNAP_CURVEDEDGE;\n        } else\n        {\n          _snapResult.geomType = SnapType.SNAP_EDGE;\n        }\n\n      } else\n      {\n\n        if (this.faceIsCurved(_snapResult.geomFace)) {\n          _snapResult.geomType = SnapType.SNAP_CURVEDFACE;\n        } else\n        {\n          _snapResult.geomType = SnapType.SNAP_FACE;\n        }\n\n      }\n\n      _isSnapped = true;\n    }\n  };\n\n  this.meshSnapping = function (face, _ref) {let { geometry, matrixWorld } = _ref;\n\n    // Handle 3D line geometry\n    const isLine = geometry.isLines || geometry.isWideLines;\n    if (isLine && face) {\n\n      // For line meshes, face is a line {a, b} instead of a Face3 instance (see lineRayCast(..) in VBIntersector.js,\n      // where a, b are vertex indices into the line mesh vertex array.\n      //\n      // Note: Unlike edge intersection for faces, we just use the line segment itself and don't search for topology\n      //       of connected line segments to identify polylines as one item. If we need this, we have to add the corresponding code first.\n      _snapResult.geomEdge = this.extractLineGeometry(face, geometry);\n      _snapResult.geomEdge.applyMatrix4(matrixWorld);\n\n      _snapResult.geomVertex = this.vertexSnapping(_snapResult.geomEdge, _snapResult.intersectPoint);\n\n      _snapResult.radius = this.setDetectRadius(_snapResult.intersectPoint);\n\n      // Determine which one should be drawn: edge or vertex\n      if (_options.forceSnapVertices || _distanceToVertex < _snapResult.radius) {\n        _snapResult.geomType = SnapType.SNAP_VERTEX;\n      } else\n      {\n        // Note: Since we got the edge as hit result, we can already assume the intersection to be close to the line.\n        _snapResult.geomType = SnapType.SNAP_EDGE;\n      }\n\n      _isSnapped = true;\n      return true;\n    }\n\n    // Note that face may also be a line {a, b} (see lineRayCast(..) in VBIntersector.js\n    if (face instanceof THREE.Face3) {\n      _snapResult.geomFace = this.faceSnapping(face, geometry);\n    }\n\n    if (!_snapResult.geomFace)\n    return false;\n\n    _snapResult.geomFace.applyMatrix4(matrixWorld);\n    _snapResult.geomEdge = this.edgeSnapping(_snapResult.geomFace, _snapResult.intersectPoint);\n    _snapResult.geomVertex = this.vertexSnapping(_snapResult.geomEdge, _snapResult.intersectPoint);\n\n    var normalMatrix = new THREE.Matrix3().getNormalMatrix(matrixWorld);\n    _snapResult.faceNormal = face.normal.applyMatrix3(normalMatrix).normalize();\n\n    _snapResult.radius = this.setDetectRadius(_snapResult.intersectPoint);\n\n    // Determine which one should be drawn: face, edge or vertex\n    if (_options.forceSnapVertices || _distanceToVertex < _snapResult.radius) {\n      _snapResult.geomType = SnapType.SNAP_VERTEX;\n    } else\n    if (_options.forceSnapEdges || _distanceToEdge < _snapResult.radius) {\n      _snapResult.geomType = SnapType.SNAP_EDGE;\n    } else\n    {\n      _snapResult.geomType = SnapType.SNAP_FACE;\n    }\n\n    _isSnapped = true;\n    return true;\n  };\n\n  this.snapping3DtoMesh = function (face, fragIds, model) {\n    for (var fi = 0; fi < fragIds.length; ++fi) {\n\n      var fragId = fragIds[fi];\n\n\n      const geometry = model.getFragmentList().getGeometry(fragId);\n      const matrixWorld = new THREE.Matrix4();\n      model.getFragmentList().getWorldMatrix(fragId, matrixWorld);\n\n      if (this.meshSnapping(face, { geometry, matrixWorld })) {\n        break;\n      }\n    }\n  };\n\n  this.faceSnappingWithTopology = function (face, geometry, facesTopology, _ref2) {let { matrixWorld } = _ref2;\n\n    var vA = new THREE.Vector3();\n    var vB = new THREE.Vector3();\n    var vC = new THREE.Vector3();\n\n    const geom = new THREE.Geometry();\n    const vertices = [];\n\n    if (geometry.index !== undefined) {\n\n      // Find the index of face topology list which includes the intersect face(triangle)\n      for (var i = 0; i < facesTopology.length; i++) {\n\n        var indexList = facesTopology[i].indexList;\n        var faceId = facesTopology[i].id;\n        let j = 0;\n        for (; j < indexList.length; j += 3) {\n\n          if (face.a === indexList[j]) {\n            if (face.b === indexList[j + 1] && face.c === indexList[j + 2] || face.b === indexList[j + 2] && face.c === indexList[j + 1]) {\n              break;\n            }\n          } else\n          if (face.a === indexList[j + 1]) {\n            if (face.b === indexList[j] && face.c === indexList[j + 2] || face.b === indexList[j + 2] && face.c === indexList[j]) {\n              break;\n            }\n          } else\n          if (face.a === indexList[j + 2]) {\n            if (face.b === indexList[j] && face.c === indexList[j + 1] || face.b === indexList[j + 1] && face.c === indexList[j]) {\n              break;\n            }\n          }\n        }\n\n        if (j < indexList.length) {\n          break;\n        }\n      }\n\n      if (i < facesTopology.length) {\n\n        const readVertex = this.makeReadVertexFunc(geometry);\n\n        for (let j = 0; j < indexList.length; j += 3) {\n          readVertex(indexList[j], vA);\n          readVertex(indexList[j + 1], vB);\n          readVertex(indexList[j + 2], vC);\n\n          const vIndex = vertices.length;\n          geom.faces.push(new THREE.Face3(vIndex, vIndex + 1, vIndex + 2));\n          vertices.push(vA.clone());\n          vertices.push(vB.clone());\n          vertices.push(vC.clone());\n        }\n        geom.vertices = vertices;\n\n      }\n    }\n\n    if (vertices.length > 0) {\n\n      geom.faceId = faceId;\n      geom.applyMatrix4(matrixWorld);\n      return geom;\n    } else\n    {\n\n      return null;\n    }\n\n  };\n\n  /**\n   * Find the closest face next to the cast ray\n   *\n   * @param {THREE.Face3} face - the intersect triangle of Hit Test.\n   * @param {BufferGeometry} geometry - the geometry of mesh\n   *\n   * @private\n   */\n  this.faceSnapping = function (face, geometry) {\n\n    var vA = new THREE.Vector3();\n    var vB = new THREE.Vector3();\n    var vC = new THREE.Vector3();\n\n    const geom = new THREE.Geometry(); //Geometry which includes all the triangles on the same plane.\n\n    let indices;\n    // @todo: .ib might not be there as expected, e.g., the section tool seems to create incomplete/non-conforming geometries.\n    indices = geometry.index && (geometry.index.array || geometry.ib);\n\n    var offsets = geometry.groups;\n\n    if (!offsets || offsets.length === 0) {\n\n      let positions;\n      // @todo: .vb might not be there as expected, e.g., the section tool seems to create incomplete/non-conforming geometries.\n      positions = geometry.vb ?? geometry.attributes.position.array;\n      offsets = [{ start: 0, count: indices ? indices.length : positions.length, index: 0 }];\n    }\n\n    const readVertex = this.makeReadVertexFunc(geometry);\n\n    const va = readVertex(face.a);\n\n    for (var oi = 0; oi < offsets.length; ++oi) {\n\n      var start = offsets[oi].start;\n      var count = offsets[oi].count;\n      var index = 0;\n      index = offsets[oi].index;\n\n      for (var i = start; i < start + count; i += 3) {\n\n        var a = index + (indices ? indices[i] : i);\n        var b = index + (indices ? indices[i + 1] : i + 1);\n        var c = index + (indices ? indices[i + 2] : i + 2);\n\n        readVertex(a, vA);\n        readVertex(b, vB);\n        readVertex(c, vC);\n\n        var faceNormal = new THREE.Vector3();\n        THREE.Triangle.getNormal(vA, vB, vC, faceNormal);\n\n        if (isEqualVectorsWithPrecision(faceNormal, face.normal) && isEqualWithPrecision(faceNormal.dot(vA), face.normal.dot(va)))\n        {\n\n          const vIndex = geom.vertices.length;\n          geom.faces.push(new THREE.Face3(vIndex, vIndex + 1, vIndex + 2));\n          geom.vertices.push(vA.clone());\n          geom.vertices.push(vB.clone());\n          geom.vertices.push(vC.clone());\n        }\n      }\n    }\n\n    if (geom.vertices.length > 0) {\n\n      return this.getTrianglesOnSameFace(geom, face, readVertex);\n    } else\n    {\n\n      return null;\n    }\n  };\n\n  /**\n   * Find triangles on the same face with the triangle intersected with the cast ray\n   *\n   * @param geom -Geometry which includes all the triangles on the same plane.\n   * @param face -Triangle which intersects with the cast ray.\n   * @param readVertexCB -Accessor function to read vertex data (see makeReadVertexFunc)\n   *\n   * @private\n   */\n  this.getTrianglesOnSameFace = function (geom, face, readVertexCB) {\n    const vertices = geom.vertices;\n\n    const faceVertex1 = readVertexCB(face.a);\n    const faceVertex2 = readVertexCB(face.b);\n    const faceVertex3 = readVertexCB(face.c);\n\n    const intersectFace = new THREE.Geometry();\n\n    const precisionPoints = 5; // number of decimal points, eg. 4 for epsilon of 0.0001\n    const precision = Math.pow(10, precisionPoints);\n\n    // Build triangle list\n    // Each triangle will contain a list of its 3 edges\n    // Also maintain an edge map, pointing to the triangles indices that contain it\n    const trianglesArr = [];\n    const edgesMap = {};\n    let firstTriangle = -1; // Will point to index of passed face parameter\n    for (let i = 0; i < vertices.length; i += 3) {\n      // for each triangle\n      const vA = vertices[i];\n      const vB = vertices[i + 1];\n      const vC = vertices[i + 2];\n\n      if (firstTriangle < 0 && faceVertex1.equals(vA) && faceVertex2.equals(vB) && faceVertex3.equals(vC)) {\n        firstTriangle = i / 3;\n      }\n\n      const keys = [\n      Math.round(vA.x * precision) + '_' + Math.round(vA.y * precision) + '_' + Math.round(vA.z * precision),\n      Math.round(vB.x * precision) + '_' + Math.round(vB.y * precision) + '_' + Math.round(vB.z * precision),\n      Math.round(vC.x * precision) + '_' + Math.round(vC.y * precision) + '_' + Math.round(vC.z * precision)];\n\n      const triangle = { edges: [] };\n\n      // Edge map update\n      for (let j = 0; j < 3; j++) {\n        const key1 = keys[j];\n        const key2 = keys[(j + 1) % 3];\n\n        const defaultEdge = key1 + '_' + key2;\n        let edge = edgesMap[defaultEdge] || edgesMap[key2 + '_' + key1];\n        if (!edge) {\n          // If this edge hasn't been added before, add it now\n          edge = edgesMap[defaultEdge] = { triangles: [] };\n        }\n\n        // Add edge to current triangle\n        triangle.edges.push(edge);\n        // Add current triangle to edge\n        edge.triangles.push(i / 3);\n      }\n\n      trianglesArr.push(triangle);\n    }\n\n    if (firstTriangle < 0) {\n      return null;\n    }\n\n    // BFS search for neighbouring triangles\n    const queue = [firstTriangle];\n    const visited = new Set();\n    const connectedFaces = [];\n\n    while (queue.length > 0) {\n      const currentFace = queue.shift();\n\n      if (visited.has(currentFace)) {\n        continue;\n      }\n\n      visited.add(currentFace);\n\n      // Add this face to the list of connected faces\n      connectedFaces.push(currentFace);\n\n      // Add all neighboring faces to the queue\n      const triangle = trianglesArr[currentFace];\n      for (const edge of triangle.edges) {\n        edge.triangles.forEach((t) => t !== currentFace && queue.push(t));\n      }\n    }\n\n    // Copy results of the actual vertices in the connected faces\n    // Since vertices are already cloned in faceSnapping, there's no need to clone them again\n    const finalVertices = [];\n    let vIndex = 0;\n    connectedFaces.forEach((faceIdx) => {\n      intersectFace.faces.push(new THREE.Face3(vIndex++, vIndex++, vIndex++));\n      finalVertices.push(vertices[faceIdx * 3]);\n      finalVertices.push(vertices[faceIdx * 3 + 1]);\n      finalVertices.push(vertices[faceIdx * 3 + 2]);\n    });\n\n    intersectFace.vertices = finalVertices;\n\n    return intersectFace;\n  };\n\n  this.edgeSnappingWithTopology = function (intersectPoint, geometry, edgesTopology, _ref3) {let { matrixWorld } = _ref3;\n\n    const edgeGeom = new THREE.Geometry(); //Geometry which includes all the triangles on the same plane.\n    var minDistTopoIndex;\n    var minDist = Number.MAX_VALUE;\n\n    var vA = new THREE.Vector3();\n    var vB = new THREE.Vector3();\n\n    if (geometry.index !== undefined && edgesTopology != undefined) {\n\n      const readVertex = this.makeReadVertexFunc(geometry);\n      // Find the index of edge topology list which includes the nearest edge segment to the intersect point\n      for (var i = 0; i < edgesTopology.length; i++) {\n\n        var indexList = edgesTopology[i].indexList;\n        // In edges topology index list the type is LineStrip\n        for (var j = 0; j < indexList.length - 1; j++) {\n          readVertex(indexList[j], vA);\n          readVertex(indexList[j + 1], vB);\n\n          vA.applyMatrix4(matrixWorld);\n          vB.applyMatrix4(matrixWorld);\n\n          var dist = distancePointToLine(intersectPoint, vA, vB);\n          if (dist < minDist) {\n            minDist = dist;\n            minDistTopoIndex = i;\n          }\n        }\n      }\n\n      if (minDistTopoIndex) {\n        indexList = edgesTopology[minDistTopoIndex].indexList;\n        for (var k = 0; k < indexList.length - 1; k++) {\n          const vK0 = readVertex(indexList[k]);\n          const vK1 = readVertex(indexList[k + 1]);\n\n          edgeGeom.vertices.push(vK0);\n          // To make the line's type to LinePieces which is used by drawLine function\n          edgeGeom.vertices.push(vK1);\n        }\n      }\n    }\n\n    if (_distanceToEdge >= minDist && edgeGeom.vertices.length > 0) {\n\n      _distanceToEdge = minDist;\n      edgeGeom.applyMatrix4(matrixWorld);\n      _snapResult.geomEdge = edgeGeom;\n    }\n  };\n\n  /**\n   * Get Edge geometry for the case that the hittest result contained a 3D lines. For this case, we have no Face3, so\n   * that faceSnapping and edgeSnapping don't work.\n   *\n   *  @param {Object}         edge     - {a, b} with vertex indices a,b of lineStart/lineEnd vertex\n   *  @param {GeometryBuffer} geometry\n   *  @returns {THREE.Geometry|THREE.BufferGeometry} Geometry with simple line\n   */\n  this.extractLineGeometry = function (edge, geometry) {\n\n    const readVertex = this.makeReadVertexFunc(geometry);\n    const va = readVertex(edge.a);\n    const vb = readVertex(edge.b);\n\n    const edgeGeom = new THREE.Geometry();\n    edgeGeom.vertices.push(va, vb);\n    return edgeGeom;\n  };\n\n  /**\n   * Find the closest edge next to the intersect point\n   *\n   * @param face -Face which is found by faceSnapping.\n   * @param intersectPoint -IntersectPoint between cast ray and face.\n   *\n   * @private\n   */\n  this.edgeSnapping = function (face, intersectPoint) {\n\n    const vertices = [];\n    const verticesLength = face.vertices.length;\n    var isEdge_12 = true;\n    var isEdge_13 = true;\n    var isEdge_23 = true;\n\n    for (var i = 0; i < verticesLength; i += 3) {\n      const pi0 = face.vertices[i];\n      const pi1 = face.vertices[i + 1];\n      const pi2 = face.vertices[i + 2];\n\n      for (var j = 0; j < verticesLength; j += 3) {\n        if (i !== j) {\n          const pj0 = face.vertices[j];\n          const pj1 = face.vertices[j + 1];\n          const pj2 = face.vertices[j + 2];\n          // Check edge 12\n          if ((pi0.equals(pj0) || pi0.equals(pj1) || pi0.equals(pj2)) && (\n          pi1.equals(pj0) || pi1.equals(pj1) || pi1.equals(pj2))) {\n            isEdge_12 = false;\n          }\n          // Check edge 13\n          // Check edge 12\n          if ((pi0.equals(pj0) || pi0.equals(pj1) || pi0.equals(pj2)) && (\n          pi2.equals(pj0) || pi2.equals(pj1) || pi2.equals(pj2))) {\n            isEdge_13 = false;\n          }\n          // Check edge 23\n          // Check edge 12\n          if ((pi1.equals(pj0) || pi1.equals(pj1) || pi1.equals(pj2)) && (\n          pi2.equals(pj0) || pi2.equals(pj1) || pi2.equals(pj2))) {\n            isEdge_23 = false;\n          }\n        }\n      }\n\n      if (isEdge_12) {\n        vertices.push(pi0.clone());\n        vertices.push(pi1.clone());\n      }\n      if (isEdge_13) {\n        vertices.push(pi0.clone());\n        vertices.push(pi2.clone());\n      }\n      if (isEdge_23) {\n        vertices.push(pi1.clone());\n        vertices.push(pi2.clone());\n      }\n\n      isEdge_12 = true;\n      isEdge_13 = true;\n      isEdge_23 = true;\n\n    }\n\n    //return lineGeom;\n\n    const edgeVertices = [];\n    const edgeGeom = new THREE.Geometry();\n    var minDistIndex;\n    var minDist = Number.MAX_VALUE;\n\n    for (var k = 0; k < vertices.length; k += 2) {\n\n      var dist = distancePointToLine(intersectPoint, vertices[k], vertices[k + 1]);\n\n      if (dist < minDist) {\n        minDist = dist;\n        minDistIndex = k;\n      }\n\n    }\n\n    edgeVertices.push(vertices[minDistIndex].clone());\n    edgeVertices.push(vertices[minDistIndex + 1].clone());\n\n    const lineGeom = new THREE.Geometry();\n    lineGeom.vertices = vertices;\n    edgeGeom.vertices = this.getConnectedLineSegmentsOnSameLine(lineGeom, edgeVertices);\n\n    _distanceToEdge = minDist;\n\n    return edgeGeom;\n  };\n\n  this.getConnectedLineSegmentsOnSameLine = function (lineGeom, edgeVertices) {\n\n    const vertices = lineGeom.vertices.slice();\n    var va = edgeVertices[0];\n    var vb = edgeVertices[1];\n\n    var vCount = [];\n\n    do {\n\n      vCount = [];\n\n      for (var j = 0; j < vertices.length; j += 2) {\n\n        // The line which has min distance to intersection point\n        if (vertices[j].equals(va) && vertices[j + 1].equals(vb)) {\n\n          continue;\n        }\n\n        for (var k = 0; k < edgeVertices.length; k += 2) {\n\n          // The line segments which are connected on the same line\n          if (vertices[j].equals(edgeVertices[k]) || vertices[j + 1].equals(edgeVertices[k]) ||\n          vertices[j].equals(edgeVertices[k + 1]) || vertices[j + 1].equals(edgeVertices[k + 1])) {\n\n            var V0 = new THREE.Vector3();\n            var V1 = new THREE.Vector3();\n\n            V0.subVectors(edgeVertices[k], edgeVertices[k + 1]);\n            V0.normalize();\n            V1.subVectors(vertices[j], vertices[j + 1]);\n            V1.normalize();\n\n            //if (V0.equals(V1) || V0.equals(V1.negate())) {\n            if (isEqualVectorsWithPrecision(V0, V1) || isInverseVectorsWithPrecision(V0, V1))\n            {\n\n              vCount.push(j);\n              break;\n\n            }\n          }\n        }\n      }\n\n      for (var ci = vCount.length - 1; ci >= 0; --ci) {\n\n        edgeVertices.push(vertices[vCount[ci]]);\n        edgeVertices.push(vertices[vCount[ci] + 1]);\n        vertices.splice(vCount[ci], 2);\n      }\n\n    } while (vCount.length > 0);\n\n    return edgeVertices;\n\n  };\n\n  this.vertexSnappingWithTopology = function (edge, intersectPoint) {\n\n    var minDist = Number.MAX_VALUE;\n    var point = new THREE.Vector3();\n    if (!edge) {\n      return point;\n    }\n\n    if (edge.vertices.length > 1) {\n      const start = edge.vertices[0];\n      const end = edge.vertices[edge.vertices.length - 1];\n      var dist1 = intersectPoint.distanceTo(start);\n      var dist2 = intersectPoint.distanceTo(end);\n\n      if (dist1 <= dist2) {\n        minDist = dist1;\n        point = start.clone();\n      } else\n      {\n        minDist = dist2;\n        point = end.clone();\n      }\n    }\n\n    _distanceToVertex = minDist;\n\n    return point;\n  };\n\n  /**\n   * Find the closest vertex next to the intersect point\n   *\n   * @param edge -Edge which is found by edgeSnapping.\n   * @param intersectPoint -IntersectPoint between cast ray and face.\n   *\n   * @private\n   */\n  this.vertexSnapping = function (edge, intersectPoint) {\n\n    var minDist = Number.MAX_VALUE;\n    var point = new THREE.Vector3();\n    const verticesLength = edge.vertices.length;\n\n    for (let i = 0; i < verticesLength; ++i) {\n      const pt = edge.vertices[i];\n      const dist = intersectPoint.distanceTo(pt);\n\n      if (dist < minDist - SNAP_PRECISION) {\n\n        minDist = dist;\n        point = pt.clone();\n\n      }\n    }\n\n    _distanceToVertex = minDist;\n\n    return point;\n  };\n\n  // This is only a workaround to detect if an edge is circle\n  this.edgeIsCircle = function (edge) {\n\n    const vertices = edge.vertices;\n\n    // Exclude squares and regular polygons\n    if (vertices.length < 8) {\n      return false;\n    }\n\n    const start = vertices[0];\n    const end = vertices[vertices.length - 1];\n\n    if (start.equals(end)) {\n\n      var center = new THREE.Vector3(0, 0, 0);\n      for (let i = 0; i < vertices.length; i += 2) {\n        center.add(vertices[i]);\n      }\n      center.divideScalar(vertices.length / 2.0);\n\n      var radius = center.distanceTo(start);\n      for (let i = 0; i < vertices.length; i += 2) {\n        if (Math.abs(center.distanceTo(vertices[i]) - radius) <= SNAP_PRECISION) {\n          continue;\n        } else\n        {\n          return false;\n        }\n      }\n      return center;\n    } else\n    {\n      return false;\n    }\n  };\n\n  this.edgeIsCurved = function (edge) {\n\n    const vertices = edge.vertices;\n    const start = vertices[0];\n    const end = vertices[vertices.length - 1];\n\n    if (vertices.length <= 2) {\n      return false;\n    } else\n    if (start.equals(end)) {\n      return true;\n    } else\n    {\n      var V1 = new THREE.Vector3();\n      let pi0;\n      let pi1 = vertices[1];\n\n      V1.subVectors(start, pi1);\n\n      var V2 = new THREE.Vector3();\n      for (var i = 2; i < vertices.length; i += 2) {\n        pi0 = vertices[i];\n        pi1 = vertices[i + i];\n        V2.subVectors(pi0, pi1);\n        if (!isEqualVectorsWithPrecision(V1, V2)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n\n  /**\n   * Checks if the given geometry is curved\n   * @param {THREE.BufferGeometry} face The geometry\n   * @returns {boolean} True if the any of the faces composing the geometry is curved\n   */\n  this.faceIsCurved = function (face) {\n\n    const vertices = face.vertices;\n    const faces = face.faces;\n\n    if (faces.length <= 1) {return false;}\n\n    var fN1 = new THREE.Vector3();\n    const vA1 = vertices[faces[0].a];\n    THREE.Triangle.getNormal(vertices[faces[0].a], vertices[faces[0].b], vertices[faces[0].c], fN1);\n\n    var fN2 = new THREE.Vector3();\n    for (let i = 1; i < faces.length; i++) {\n      const vA2 = vertices[faces[i].a];\n      THREE.Triangle.getNormal(vertices[faces[i].a], vertices[faces[i].b], vertices[faces[i].c], fN2);\n      if (!isEqualVectorsWithPrecision(fN1, fN2) || !isEqualWithPrecision(fN1.dot(vA1), fN2.dot(vA2))) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  this.angleVector2 = function (vector) {\n\n    if (vector.x > 0 && vector.y >= 0) {\n      return Math.atan(vector.y / vector.x);\n    } else\n    if (vector.x >= 0 && vector.y < 0) {\n      return Math.atan(vector.y / vector.x) + Math.PI * 2;\n    } else\n    if (vector.x < 0 && vector.y <= 0) {\n      return Math.atan(vector.y / vector.x) + Math.PI;\n    } else\n    if (vector.x <= 0 && vector.y > 0) {\n      return Math.atan(vector.y / vector.x) + Math.PI;\n    } else\n    {// x = 0, y = 0\n      return null;\n    }\n  };\n\n  // Creates a THREE.Geometry that represents an approximation of a given elliptical arc in {z=0} plane.\n  // Points are obtained by by uniform sampling of a given elliptical arc.\n  //  @param {number} numPoints - The length number of points that the output geometry will contain. segments in which we subdivide the arc. Resulting point count is numSegments+1.\n  // See getEllipseArcPoint() for param details.\n  const createEllipticalArcGeometry = (cx, cy, rx, ry, startAngle, endAngle, numPoints) => {\n    let geometry = new THREE.Geometry();\n    for (let i = 0; i < numPoints; i++) {\n      const p = new THREE.Vector3(0, 0, 0);\n      const t = i / (numPoints - 1);\n      Autodesk.Extensions.CompGeom.getEllipseArcPoint(t, cx, cy, rx, ry, startAngle, endAngle, 0.0, p);\n      geometry.vertices.push(p);\n    }\n    return geometry;\n  };\n\n  /**\n   * @param {Viewer3D} viewer - Viewer instance\n   * @param snapper\n   * @param aDetectRadius\n   * @private\n   */\n  function GeometryCallback(viewer, snapper, aDetectRadius) {\n    this.viewer = viewer;\n    this.snapper = snapper;\n\n    this.lineGeom = new THREE.Geometry();\n    this.circularArc = null;\n    this.circularArcCenter;\n    this.circularArcRadius;\n    this.ellipticalArc = null;\n    this.ellipticalArcCenter;\n\n    this.minDist = Number.MAX_VALUE;\n\n    this.matrix = new THREE.Matrix4();\n\n    this.vpIdLine = null;\n    this.vpIdCircular = null;\n    this.vpIdElliptical = null;\n\n    this.detectRadius = aDetectRadius;\n\n    // Collects candidate segments that we can snap to.\n    // This is used to allow snapping to segment intersections.\n    this.snapCandidates = []; // {SnappingCandidate[]}\n  }\n\n  GeometryCallback.prototype.onLineSegment = function (x1, y1, x2, y2, vpId) {\n    var intersectPoint = this.snapper.getIntersectPoint();\n    var v1 = new THREE.Vector3(x1, y1, intersectPoint.z);\n    var v2 = new THREE.Vector3(x2, y2, intersectPoint.z);\n\n    // LMV-5515: Apply the supplied matrix to the line vector's\n    if (this.matrix) {\n      v1.applyMatrix4(this.matrix);\n      v2.applyMatrix4(this.matrix);\n    }\n\n    // Skip segments outside detectRadius\n    var dist = distancePointToLine(intersectPoint, v1, v2);\n    if (dist > this.detectRadius) {\n      return;\n    }\n\n    // Collect snap candidate\n    this.snapCandidates.push(new SnapCandidate(vpId, dist).fromLine(v1, v2));\n\n    // Track minDist and lineGeometry for best hit so far\n    if (dist < this.minDist) {\n      this.lineGeom.vertices.splice(0, 2, v1, v2);\n      this.minDist = dist;\n\n      this.vpIdLine = vpId;\n    }\n  };\n\n  GeometryCallback.prototype.onCircularArc = function (cx, cy, start, end, radius, vpId) {\n    var intersectPoint = this.snapper.getIntersectPoint();\n    var point = new THREE.Vector2(intersectPoint.x, intersectPoint.y);\n\n    var center = new THREE.Vector2(cx, cy);\n    point.sub(center);\n\n    // Compute closest point on arc\n    const pointOnArc = (0,_SnapMath_js__WEBPACK_IMPORTED_MODULE_1__.nearestPointOnCircularArc)(intersectPoint, center, radius, start, end);\n    const dist = pointOnArc.distanceTo(intersectPoint); // 2D distance\n\n    // Collect snap candidate\n    this.snapCandidates.push(new SnapCandidate(vpId, dist).fromCircularArc(center, radius, start, end));\n\n    // Skip arcs outside detectRadius\n    if (dist > this.detectRadius) {\n      return;\n    }\n\n    // TODO: get rid of the CircleGeometry stuff below, because we computed the snapPoint above already.\n    //       But this needs some refactoring, because the Geometry is passed around outside of snapper.\n\n    var angle = this.snapper.angleVector2(point);\n\n    let arc;\n    if (end > start && angle >= start && angle <= end) {\n      arc = new THREE.CircleGeometry(radius, 100, start, end - start);\n    } else\n    if (end < start && (angle >= start || angle <= end)) {\n      arc = new THREE.CircleGeometry(radius, 100, start, Math.PI * 2 - start + end);\n    } else\n    {\n      return;\n    }\n\n    arc.vertices.splice(0, 1);\n\n    arc.applyMatrix4(new THREE.Matrix4().makeTranslation(cx, cy, intersectPoint.z));\n    this.circularArc = arc;\n    this.circularArcCenter = new THREE.Vector3(cx, cy, intersectPoint.z);\n    this.circularArcRadius = radius;\n\n    this.snapPoint = new THREE.Vector3(pointOnArc.x, pointOnArc.y, intersectPoint.z);\n\n    this.vpIdCircular = vpId;\n  };\n\n  GeometryCallback.prototype.onEllipticalArc = function (cx, cy, start, end, major, minor, tilt, vpId) {\n    var intersectPoint = this.snapper.getIntersectPoint();\n    var point = new THREE.Vector2(intersectPoint.x, intersectPoint.y);\n\n    var major1 = major - this.detectRadius;\n    var minor1 = minor - this.detectRadius;\n    var major2 = major + this.detectRadius;\n    var minor2 = minor + this.detectRadius;\n\n    var equation1 = (point.x - cx) * (point.x - cx) / (major1 * major1) + (point.y - cy) * (point.y - cy) / (minor1 * minor1);\n    var equation2 = (point.x - cx) * (point.x - cx) / (major2 * major2) + (point.y - cy) * (point.y - cy) / (minor2 * minor2);\n\n    var center = new THREE.Vector2(cx, cy);\n    point.sub(center);\n    point.x *= minor;\n    point.y *= major;\n    var angle = this.snapper.angleVector2(point);\n\n    if (end > Math.PI * 2) {\n      end = Math.PI * 2;\n    }\n\n    if (equation1 >= 1 && equation2 <= 1) {\n\n      if (end > start && angle >= start && angle <= end || end < start && (angle >= start || angle <= end)) {\n        var arc = createEllipticalArcGeometry(cx, cy, major, minor, start, end, 50);\n        if (!isEqualWithPrecision(end - start, Math.PI * 2))\n        {\n          arc.vertices.pop();\n        }\n        arc.applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0, intersectPoint.z));\n\n        // Compute distance between geometry and snapped point.\n        // We use the same way here as in getSnapResultPosition(). This will be replaced later by a more accurate solution.\n        const nearestPoint = MeasureCommon.nearestVertexInVertexToEdge(intersectPoint, arc);\n        const dist = THREE.Vector2.prototype.distanceTo.call(nearestPoint, intersectPoint); // only in x/y\n\n        // Collect snap candidate\n        const center = new THREE.Vector2(cx, cy);\n        this.snapCandidates.push(new SnapCandidate(vpId, dist).makeEllipticalArc(center, major, minor, start, end));\n\n        // Todo: Unlike for line-segments, arcs are currently collected by \"last one wins\" rule by the code for single-snapping.\n        //       We should consider the distance here as well.\n        this.ellipticalArc = arc;\n        this.ellipticalArcCenter = new THREE.Vector3(cx, cy, intersectPoint.z);\n\n        this.vpIdElliptical = vpId;\n      }\n    }\n  };\n\n  /**\n   * This method sets the matrix to identity if matrix is not supplied;\n   *\n   * @param {THREE.Matrix4} matrix - Matrix to set\n   */\n  GeometryCallback.prototype.setMatrix = function (matrix) {\n    this.matrix = matrix || new THREE.Matrix4();\n  };\n\n  /**\n   * Snap to a 2D model.\n   *\n   * @param {object}      hitResult - a result of a ray intersection.\n   * @param {object}      [options] - Options object.\n   * @param {Function}    [options.enumSegments] - Enumerates all segments within a given bbox in model-space.\n   *\n   */\n  this.snapping2D = function (hitResult) {let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!hitResult) {\n      return;\n    }\n\n    // hitResult is a result of a ray intersection. it may contain the following:\n    let {\n      dbId,\n      fragId,\n      intersectPoint,\n      model = _viewer.model\n    } = hitResult;\n\n    if (model.is3d()) {\n      return;\n    }\n    _snapResult.modelId = hitResult.model ? hitResult.model.id : null;\n    _snapResult.hasTopology = false;\n    _snapResult.intersectPoint = intersectPoint;\n\n    let tr,scale = 1;\n\n    // The model that we are trying to snap is 2D, but the viewer is 3D. It means that we are in hypermodeling scenario!\n    // For that, we'll need to apply the inversed transform of the 2D model to the intersect point first, in order to get it in local model coords.\n    if (!_viewer.impl.is2d) {\n      tr = model.getModelToViewerTransform();\n      // If there's a transform, move point to original location in sheet (will be restored at the end)\n      if (tr) {\n        scale = tr.getMaxScaleOnAxis();\n        _snapResult.intersectPoint = intersectPoint.clone();\n        _snapResult.intersectPoint.applyMatrix4(model.getInverseModelToViewerTransform());\n      }\n    }\n\n    // Determine which one should be drawn: line, circular arc or elliptical arc\n    // Use the un-transformed point, but scale down the radius because we are comparing with the unscaled geometry\n    _snapResult.radius = this.setDetectRadius(intersectPoint) / scale;\n\n    // Geometry snapping is only possible if a fragment list is available to obtain geometry per fragment.\n    var supportsGeomSnapping = model.getFragmentList() != null;\n    if (!supportsGeomSnapping) {\n\n      // If no snapping is available, just accept the hitpoint as a vertex hit. This allows to measure\n      // distances between arbitrary points in rasters.\n      _isSnapped = true;\n      _snapResult.geomType = SnapType.SNAP_VERTEX;\n      _snapResult.geomVertex = intersectPoint; // Use the un-transformed point\n      tr && _snapResult.intersectPoint.applyMatrix4(tr); // Restore to original location\n      return;\n    }\n\n\n    var gc = new GeometryCallback(_viewer, this, _snapResult.radius);\n\n    // Performs 2D snapping to segments based on an enumSegments() callback, which enumerates all segments\n    // within in a given bbox in model-space.\n    if (options.enumSegments) {\n      // enum all segments within the snapRadius around intersectPoint\n      const minx = _snapResult.intersectPoint.x - _snapResult.radius;\n      const miny = _snapResult.intersectPoint.y - _snapResult.radius;\n      const maxx = _snapResult.intersectPoint.x + _snapResult.radius;\n      const maxy = _snapResult.intersectPoint.y + _snapResult.radius;\n\n      options.enumSegments(minx, miny, maxx, maxy, gc);\n    } else {\n      // Regular snapping - snap to the 2D model's geometry.\n      var fragIds = fragId;\n\n      if (typeof fragIds === \"undefined\") {\n        // LMV-6082 Do not return out if the snap to pixel flag (free measure) is enabled.\n        if (!_snapToPixel) {\n          return;\n        }\n        fragIds = [];\n      } else if (!Array.isArray(fragIds)) {\n        fragIds = [fragIds];\n      }\n\n      for (var fi = 0; fi < fragIds.length; ++fi) {\n        const mesh = _viewer.impl.getRenderProxy(model, fragIds[fi]);\n        if (mesh !== null && mesh !== void 0 && mesh.geometry) {\n          gc.setMatrix(mesh.matrix);\n          const vbr = new VertexBufferReader(mesh.geometry);\n          vbr.enumGeomsForObject(model.reverseMapDbIdFor2D(dbId), gc);\n          // Set the matrix back to identity after processing a mesh\n          gc.setMatrix();\n        }\n      }\n    }\n\n    // _snapResult.intersectPoint contains the possibly transformed point\n    this.finishSnapping2D(gc, _snapResult.intersectPoint);\n\n    // Snap the unsnapped point only if the snapping fails\n    if (!_isSnapped && _snapToPixel) {\n      _isSnapped = true;\n      _snapResult.geomType = SnapType.RASTER_PIXEL;\n      _snapResult.geomVertex = _snapResult.intersectPoint;\n    }\n\n    // Now apply the transform matrix on the results, so we'll get the results in their final transformed position.\n    if (tr) {var _snapResult$geomEdge, _snapResult$geomEdge2;\n      const start = (_snapResult$geomEdge = _snapResult.geomEdge) === null || _snapResult$geomEdge === void 0 ? void 0 : _snapResult$geomEdge.vertices[0];\n      const end = (_snapResult$geomEdge2 = _snapResult.geomEdge) === null || _snapResult$geomEdge2 === void 0 ? void 0 : _snapResult$geomEdge2.vertices[1];\n\n      let results = [_snapResult.snapPoint, _snapResult.geomVertex, _snapResult.intersectPoint, _snapResult.circularArcCenter,\n      start, end];\n      // Remove undefined and possibly shared vectors\n      results = [...new Set(results.filter((n) => n))];\n      results.forEach((res) => res.applyMatrix4(tr));\n      if (_snapResult.circularArcRadius) {\n        _snapResult.circularArcRadius *= scale;\n      }\n      _snapResult.radius *= scale;\n    }\n  };\n\n  // By default, snapper only considers model geometry that is written to ID buffer.\n  // This function performs the 2D snapping on a set of given 2D meshes instead. It works similar to snapping2D() but\n  // enumerates the given meshes instead of getting them from the fragment list.\n  //\n  //  @param {THREE.Vector3}                 intersectPoint - click position in world-coords\n  //  @param {function(dbId, layerId, vpId)} filter - Defines subset of primitives to be considered.\n  //  @param {THREE.Mesh[]}                  meshes - The triangulated 2D shapes to be checked for snapping\n  //  @param {number}                        [detectRadius] - Same coordinate system as the given geometry. Required if geometry is not in world-coords.\n\n  this.snapping2DOverlay = function (intersectPoint, meshes, filter, detectRadius) {\n    _snapResult.hasTopology = false;\n    _snapResult.intersectPoint = intersectPoint;\n    _snapResult.radius = detectRadius || this.setDetectRadius(intersectPoint);\n\n    var gc = new GeometryCallback(_viewer, this, _snapResult.radius);\n\n    for (var i = 0; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      var vbr = new VertexBufferReader(mesh.geometry);\n      vbr.enumGeoms(filter, gc);\n    }\n\n    this.finishSnapping2D(gc, intersectPoint);\n  };\n\n  // Finish 2D snapping operation - assuming that all candidate geometry for snapping has been processed by the geometryCallback gc already.\n  this.finishSnapping2D = function (gc, intersectPoint) {\n\n    // When restricting to a single viewport, exclude candidates of all other viewports\n    if (_forcedVpId !== null) {\n      const isSameViewport = (c) => c.viewportId === _forcedVpId;\n      gc.snapCandidates = gc.snapCandidates.filter(isSameViewport);\n    }\n\n    // Check if we can snap to an intersection of two close segments\n    const intersectSnap = findIntersectionSnap(gc.snapCandidates, intersectPoint, gc.detectRadius);\n    if (intersectSnap) {\n      _snapResult.viewportIndex2d = intersectSnap.viewportId;\n      _snapResult.snapPoint = intersectSnap.snapPoint;\n      _snapResult.geomType = SnapType.SNAP_INTERSECTION;\n      _snapResult.geomVertex = intersectSnap.snapPoint;\n      _isSnapped = true;\n      return;\n    }\n\n    if (gc.circularArc) {\n\n      _snapResult.viewportIndex2d = gc.vpIdCircular;\n\n      _snapResult.snapPoint = gc.snapPoint;\n\n      // Only snap the geometries which belong to the same viewport as the first selection\n      if (_forcedVpId !== null && _forcedVpId !== _snapResult.viewportIndex2d)\n      return;\n\n      const start = gc.circularArc.vertices[0];\n      const end = gc.circularArc.vertices[gc.circularArc.vertices.length - 1];\n\n      if (intersectPoint.distanceTo(start) < _snapResult.radius) {\n\n        _snapResult.geomVertex = start;\n        _snapResult.geomType = SnapType.SNAP_VERTEX;\n      } else\n      if (intersectPoint.distanceTo(end) < _snapResult.radius) {\n\n        _snapResult.geomVertex = end;\n        _snapResult.geomType = SnapType.SNAP_VERTEX;\n      } else\n      {\n\n        this.lineStripToPieces(gc.circularArc);\n        _snapResult.geomEdge = gc.circularArc;\n        _snapResult.circularArcCenter = gc.circularArcCenter;\n        _snapResult.circularArcRadius = gc.circularArcRadius;\n        _snapResult.geomType = SnapType.SNAP_CIRCULARARC;\n      }\n\n      _isSnapped = true;\n\n\n    } else\n    if (gc.ellipticalArc) {\n\n      _snapResult.viewportIndex2d = gc.vpIdElliptical;\n\n      // Only snap the geometries which belong to the same viewport as the first selection\n      if (_forcedVpId !== null && _forcedVpId !== _snapResult.viewportIndex2d)\n      return;\n\n      const start = gc.ellipticalArc.vertices[0];\n      const end = gc.ellipticalArc.vertices[gc.ellipticalArc.vertices.length - 1];\n      if (intersectPoint.distanceTo(start) < _snapResult.radius) {\n\n        _snapResult.geomVertex = start;\n        _snapResult.geomType = SnapType.SNAP_VERTEX;\n      } else\n      if (intersectPoint.distanceTo(end) < _snapResult.radius) {\n\n        _snapResult.geomVertex = end;\n        _snapResult.geomType = SnapType.SNAP_VERTEX;\n      } else\n      {\n\n        this.lineStripToPieces(gc.ellipticalArc);\n        _snapResult.geomEdge = gc.ellipticalArc;\n        // Before we have measure design for elliptical arc, measure the center for now\n        _snapResult.circularArcCenter = gc.ellipticalArcCenter;\n        _snapResult.circularArcRadius = null;\n        _snapResult.geomType = SnapType.SNAP_CIRCULARARC;\n      }\n\n      _isSnapped = true;\n\n    } else\n    if (gc.lineGeom instanceof THREE.Geometry && gc.lineGeom.vertices.length ||\n    gc.lineGeom.getAttribute && gc.lineGeom.getAttribute('position').count) {\n\n      _snapResult.viewportIndex2d = gc.vpIdLine;\n\n      // Only snap the geometries which belong to the same viewport as the first selection\n      if (_forcedVpId !== null && _forcedVpId !== _snapResult.viewportIndex2d)\n      return;\n\n      // Always expose edge segment - no matter whether we snap to the edge or one of its vertices.\n      // This allows us to combine it with other snap constraints later - as done by Edit2D.\n      _snapResult.geomEdge = gc.lineGeom;\n      const start = gc.lineGeom.vertices[0];\n      const end = gc.lineGeom.vertices[1];\n\n      if (this.markupMode) {// Markup mode\n        var mid = new THREE.Vector3();\n        mid.addVectors(start, end);\n        mid.divideScalar(2);\n        var md = intersectPoint.distanceTo(mid);\n        var sd = intersectPoint.distanceTo(start);\n        var ed = intersectPoint.distanceTo(end);\n\n        // Store it for snapping to parallel/perpendicular of underlying vectors\n        _snapResult.geomEdge = gc.lineGeom;\n\n        if (md < _snapResult.radius) {\n          _snapResult.geomVertex = mid;\n          _snapResult.geomType = SnapType.SNAP_VERTEX;\n        } else\n        if (sd < _snapResult.radius) {\n          _snapResult.geomVertex = start;\n          _snapResult.geomType = SnapType.SNAP_VERTEX;\n        } else\n        if (ed < _snapResult.radius) {\n          _snapResult.geomVertex = end;\n          _snapResult.geomType = SnapType.SNAP_VERTEX;\n        } else\n        {\n          _snapResult.geomType = SnapType.SNAP_EDGE;\n        }\n\n        // Circle center\n        if (start.distanceTo(end) < EPSILON) {\n          _snapResult.geomType = SnapType.SNAP_CIRCLE_CENTER;\n        }\n      } else\n      {// Measure mode\n        if (intersectPoint.distanceTo(start) < _snapResult.radius) {\n\n          if (start.distanceTo(end) < EPSILON) {\n            _snapResult.geomType = SnapType.SNAP_CIRCLE_CENTER;\n          } else {\n            _snapResult.geomType = SnapType.SNAP_VERTEX;\n          }\n\n          _snapResult.geomVertex = start;\n        } else\n        if (_options.forceSnapVertices || intersectPoint.distanceTo(end) < _snapResult.radius) {\n\n          _snapResult.geomVertex = end;\n          _snapResult.geomType = SnapType.SNAP_VERTEX;\n        } else\n        {\n          _snapResult.geomType = SnapType.SNAP_EDGE;\n        }\n      }\n\n      _isSnapped = true;\n    }\n  };\n\n  this.snappingRasterPixel = function (result) {\n    if (!result) {\n      return;\n    }\n\n    var intersectPoint = result.intersectPoint;\n    _snapResult.intersectPoint = intersectPoint;\n    _snapResult.hasTopology = false;\n\n    // Determine which one should be drawn: line, circular arc or elliptical arc\n    _snapResult.radius = this.setDetectRadius(intersectPoint);\n    _snapResult.geomType = SnapType.RASTER_PIXEL;\n    _snapResult.geomVertex = intersectPoint;\n    _isSnapped = true;\n  };\n\n  this.snapMidpoint = function () {\n    _snapResult.isMidpoint = false;\n\n    // Snap midpoint for edge\n    if (_isSnapped) {\n      if (_snapResult.geomType === SnapType.SNAP_EDGE) {\n        const edge = _snapResult.geomEdge;\n        const p1 = edge.vertices[0];\n        const p2 = edge.vertices[1];\n\n        var midpoint = new THREE.Vector3((p1.x + p2.x) / 2, (p1.y + p2.y) / 2, (p1.z + p2.z) / 2);\n\n        var cutPlanes = _viewer.impl.getAllCutPlanes();\n        if (cutPlanes !== null && cutPlanes !== void 0 && cutPlanes.length) {\n          for (let i = 0; i < cutPlanes.length; ++i) {\n            const p = cutPlanes[i];\n            const dot = midpoint.x * p.x + midpoint.y * p.y + midpoint.z * p.z + p.w;\n            if (dot > 1e-5) {\n              // discard midpoint if clipped\n              return;\n            }\n          }\n        }\n\n        if (_snapResult.intersectPoint.distanceTo(midpoint) < 2 * _snapResult.radius) {\n          _snapResult.geomVertex = midpoint;\n          _snapResult.geomType = SnapType.SNAP_MIDPOINT;\n        }\n      }\n    }\n  };\n\n  this.setPerpendicular = function (isPerpendicular) {\n    _snapResult.isPerpendicular = isPerpendicular;\n  };\n\n  this.lineStripToPieces = function (geom) {\n    const vertices = geom.vertices;\n    for (var i = vertices.length - 2; i > 0; i--) {\n      vertices.splice(i, 0, vertices[i]);\n    }\n  };\n\n  this.setDetectRadius = function (point) {\n\n    var navapi = _viewer.navigation;\n    var camera = navapi.getCamera();\n    var position = navapi.getPosition();\n\n    var p = point.clone();\n\n    var distance = camera.isPerspective ? p.sub(position).length() :\n    navapi.getEyeVector().length();\n\n    var fov = navapi.getVerticalFov();\n    var worldHeight = 2.0 * distance * Math.tan(THREE.Math.degToRad(fov * 0.5));\n\n    var viewport = navapi.getScreenViewport();\n    var _window = this.getWindow();\n    var devicePixelRatio = _window.devicePixelRatio || 1;\n    var radius = this.detectRadiusInPixels * worldHeight / (viewport.height * devicePixelRatio);\n\n    return radius;\n  };\n\n  this.handleButtonDown = function () {\n    _isDragging = true;\n    return false;\n  };\n\n  this.handleButtonUp = function () {\n    _isDragging = false;\n    return false;\n  };\n\n  this.handleMouseMove = function (event) {\n\n    if (_isDragging)\n    return false;\n\n    this.onMouseMove({\n      x: event.canvasX,\n      y: event.canvasY\n    });\n\n    return false;\n  };\n\n  this.handleSingleTap = function (event) {\n\n    return this.handleMouseMove(event);\n  };\n\n  this.handlePressHold = function (event) {\n\n    if (av.isMobileDevice()) {\n      switch (event.type) {\n\n        case \"press\":\n          _isPressing = true;\n          this.onMouseMove({ x: event.canvasX, y: event.canvasY });\n          break;\n\n        case \"pressup\":\n          this.onMouseMove({ x: event.canvasX, y: event.canvasY });\n          _isPressing = false;\n          break;\n      }\n    }\n    return false;\n\n  };\n\n  this.handleGesture = function (event)\n  {\n    if (av.isMobileDevice()) {\n      if (_isPressing) {\n        switch (event.type) {\n\n          case \"dragstart\":\n          case \"dragmove\":\n            this.onMouseMove({ x: event.canvasX, y: event.canvasY });\n            break;\n\n          case \"dragend\":\n            this.onMouseMove({ x: event.canvasX, y: event.canvasY });\n            _isPressing = false;\n            break;\n\n          case \"pinchstart\":\n          case \"pinchmove\":\n          case \"pinchend\":\n            break;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * Handler to mouse move events, used to snap in markup edit mode.\n   *\n   * @param mousePosition\n   * @private\n   */\n  this.onMouseDown = function (mousePosition) {\n    return this.onMouseMove(mousePosition);\n  };\n\n  /**\n   * Handler to mouse move events, used to snap in markup edit mode.\n   *\n   * @param mousePosition\n   * @private\n   */\n  this.onMouseMove = function (mousePosition) {var _result$model, _viewer$model;\n\n    this.clearSnapped();\n\n    var result = _viewer.impl.snappingHitTest(mousePosition.x, mousePosition.y, false);\n\n    if (!result && _snapToPixel) {\n      var vpVec = _viewer.impl.clientToViewport(mousePosition.x, mousePosition.y);\n      let point = _viewer.impl.intersectGroundViewport(vpVec);\n      result = { intersectPoint: point };\n    }\n\n    if (!result || !result.intersectPoint)\n    return false;\n\n    const isLeaflet = ((_result$model = result.model) === null || _result$model === void 0 ? void 0 : _result$model.isLeaflet()) || _viewer.impl.is2d && ((_viewer$model = _viewer.model) === null || _viewer$model === void 0 ? void 0 : _viewer$model.isLeaflet());\n    // 3D Snapping\n    if (result.face) {\n      this.snapping3D(result);\n    }\n    // 2D Snapping\n    else if ((result.dbId || result.dbId === 0) && !isLeaflet) {\n      this.snapping2D(result);\n    }\n    // Pixel Snapping\n    else {\n      const isPixelSnap = _snapToPixel || isLeaflet;\n      if (isPixelSnap) {\n        this.snappingRasterPixel(result);\n      }\n    }\n\n    this.snapMidpoint();\n\n    if (_snapFilter && !_snapFilter(_snapResult)) {\n      this.clearSnapped();\n      return false;\n    }\n\n    return true;\n  };\n}\n\nav.GlobalManagerMixin.call(Snapper.prototype);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Snapping/Snapper.js\n");

                /***/
            }),

        /***/
        "./extensions/Snapping/SnapperIndicator.js":
            /*!*************************************************!*\
              !*** ./extensions/Snapping/SnapperIndicator.js ***!
              \*************************************************/
            /***/
            ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

                "use strict";
                eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NullSnapperIndicator: () => (/* binding */ NullSnapperIndicator),\n/* harmony export */   SnapperIndicator: () => (/* binding */ SnapperIndicator),\n/* harmony export */   getXYZFromPos: () => (/* binding */ getXYZFromPos)\n/* harmony export */ });\nconst MeasureCommon = Autodesk.Viewing.MeasureCommon;\nconst isEqualVectors = MeasureCommon.isEqualVectors;\nconst EPSILON = MeasureCommon.EPSILON;\nconst SnapType = MeasureCommon.SnapType;\n\nconst NO_OVERLAY = 0;\nconst FACE_OVERLAY = 1;\nconst EDGE_OVERLAY = 2;\nconst POINT_OVERLAY = 3;\n\nconst GEOMETRIES_OVERLAY = 'MeasureTool-snapper-geometries';\nconst INDICATOR_OVERLAY = 'MeasureTool-snapper-indicator';\n\nconst _geometryLineWidth = 0.3;\nconst _indicatorLineWidth = 0.2;\nconst _indicatorSize = 1.2;\nconst _indicatorColor = 0xff7700;\nconst _geometryColor = 0x00CC00;\n\nlet _point = null;\n\nconst tmpVec3 = new THREE.Vector3();\n/**\n * \n * @param {BufferAttribute} positionAttribute \n * @param {number} idx \n * @returns {THREE.Vector3} Vector3 corresponding to the indicated index. The returned value will be overriden by\n * subsequent calls\n */\nfunction getXYZFromPos(positionAttribute, idx) {\n  tmpVec3.x = positionAttribute.getX(idx);\n  tmpVec3.y = positionAttribute.getY(idx);\n  tmpVec3.z = positionAttribute.getZ(idx);\n  return tmpVec3;\n}\n\nclass NullSnapperIndicator {\n  isNull() {\n    return true;\n  }\n\n  render() {}\n  removeOverlay(overlayName) {}\n  clearOverlay(overlayName) {}\n  clearOverlays() {}\n  addOverlay(overlayName, mesh) {}\n  drawFace(geom, material, overlayName) {}\n  cylinderMesh(pointX, pointY, material, width) {\n    return new THREE.Mesh();\n  }\n  renderGeometry(snapResult) {}\n  renderVertexIndicator(snapResult) {}\n  renderMidpointIndicator(snapResult) {}\n  renderEdgeIndicator(snapResult) {}\n  renderCircleIndicator(snapResult) {}\n  renderPerpendicular(snapResult) {}\n  renderPixelIndicator(snapResult) {}\n  renderIndicator(snapResult) {}\n  drawLine(geom, material, width, overlayName) {}\n  drawPoint(point, material, overlayName) {}\n  drawCircle(point, material, overlayName) {}\n  setScale(point) {\n    return 1;\n  }\n  setPointScale(pointMesh) {}\n  setCircleScale(torusMesh) {}\n  setEdgeScale(cylinderMesh) {}\n  updatePointScale(overlayName) {}\n  updateEdgeScale(overlayName) {}\n  onCameraChange() {}\n  destroy() {}\n}\n\nclass SnapperIndicator extends NullSnapperIndicator {\n  constructor(viewer, snapper) {\n    super();\n\n    this.viewer = viewer;\n    this.snapper = snapper;\n    this.overlayType = NO_OVERLAY;\n    this.previewsIntersectPoint = null;\n\n    this.viewer.impl.createOverlayScene(GEOMETRIES_OVERLAY);\n    this.viewer.impl.createOverlayScene(INDICATOR_OVERLAY);\n\n    this.geometryMaterial = new THREE.MeshPhongMaterial({\n      color: _geometryColor,\n      opacity: 0.5,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      side: THREE.DoubleSide\n    });\n\n    this.indicatorMaterial = new THREE.MeshBasicMaterial({\n      color: _indicatorColor,\n      opacity: 1,\n      transparent: false,\n      depthTest: false,\n      depthWrite: false,\n      side: THREE.DoubleSide\n    });\n  }\n\n  isNull() {\n    return false;\n  }\n\n  render() {\n\n    const snapResult = this.snapper.getSnapResult();\n\n    if (!isEqualVectors(this.previewsIntersectPoint, snapResult.intersectPoint, EPSILON)) {\n      this.clearOverlay(GEOMETRIES_OVERLAY);\n    }\n\n    this.clearOverlay(INDICATOR_OVERLAY);\n\n    if (snapResult.isEmpty())\n    return;\n\n    if (this.snapper.renderSnappedGeometry ||\n    snapResult.hasTopology && this.snapper.renderSnappedTopology) {\n      this.renderGeometry(snapResult);\n    }\n    this.renderIndicator(snapResult);\n\n    this.previewsIntersectPoint = snapResult.intersectPoint.clone();\n  }\n\n  removeOverlay(overlayName) {\n\n    this.viewer.impl.clearOverlay(overlayName, true);\n    this.viewer.impl.removeOverlayScene(overlayName);\n\n  }\n\n  clearOverlay(overlayName) {\n\n    this.removeOverlay(overlayName);\n    this.viewer.impl.createOverlayScene(overlayName);\n\n  }\n\n  clearOverlays() {\n\n    this.removeOverlay(GEOMETRIES_OVERLAY);\n    this.viewer.impl.createOverlayScene(GEOMETRIES_OVERLAY);\n\n    this.removeOverlay(INDICATOR_OVERLAY);\n    this.viewer.impl.createOverlayScene(INDICATOR_OVERLAY);\n\n    this.previewsIntersectPoint = null;\n\n  }\n\n  addOverlay(overlayName, mesh) {\n\n    this.viewer.impl.addOverlay(overlayName, mesh);\n\n  }\n\n  /**\n   * Draw the planar face\n   * @param geom - Geometry which needs to be draw.\n   * @param material - Material for the geometry.\n   * @param overlayName - Name of the overlay.\n   */\n  drawFace(geom, material, overlayName) {\n\n    const snapperPlane = new THREE.Mesh(geom, material, true);\n\n    if (overlayName === GEOMETRIES_OVERLAY) {\n      this.overlayType = FACE_OVERLAY;\n    }\n\n    this.addOverlay(overlayName, snapperPlane);\n\n  }\n\n  cylinderMesh(pointX, pointY, material, width) {\n\n    const direction = new THREE.Vector3().subVectors(pointY, pointX);\n    const orientation = new THREE.Matrix4();\n    orientation.lookAt(pointX, pointY, new THREE.Object3D().up);\n    orientation.multiply(new THREE.Matrix4().set(1, 0, 0, 0,\n    0, 0, 1, 0,\n    0, -direction.length(), 0, 0,\n    0, 0, 0, 1));\n\n    width = width || 0.5;\n    let cylinder = new THREE.CylinderGeometry(width, width, 1.0, 8, 1, true);\n    const edge = new THREE.Mesh(cylinder, material);\n    cylinder = null;\n\n    edge.applyMatrix4(orientation);\n    edge.position.x = (pointY.x + pointX.x) / 2;\n    edge.position.y = (pointY.y + pointX.y) / 2;\n    edge.position.z = (pointY.z + pointX.z) / 2;\n    return edge;\n  }\n\n  renderGeometry(snapResult) {\n\n    if (isEqualVectors(this.previewsIntersectPoint, snapResult.intersectPoint, EPSILON)) {\n      return;\n    }\n\n    switch (snapResult.geomType) {\n      case SnapType.SNAP_VERTEX:\n        SnapType.RASTER_PIXEL;\n        this.drawPoint(snapResult.geomVertex, this.geometryMaterial, GEOMETRIES_OVERLAY);\n        break;\n\n      case SnapType.SNAP_EDGE:\n      case SnapType.SNAP_CURVEDEDGE:\n      case SnapType.SNAP_CIRCULARARC:\n      case SnapType.SNAP_MIDPOINT:\n        this.drawLine(snapResult.geomEdge, this.geometryMaterial, _geometryLineWidth, GEOMETRIES_OVERLAY);\n        break;\n\n      case SnapType.SNAP_FACE:\n      case SnapType.SNAP_CURVEDFACE:\n        this.drawFace(snapResult.geomFace, this.geometryMaterial, GEOMETRIES_OVERLAY);\n        break;\n    }\n  }\n\n  /**\n   * Renders a square around the given snap result.\n   * Is used when you’re snapping on a vertex, intersection, circular\n   * arc on a F2D sheet, and the curved face.\n   * @param {Autodesk.Viewing.MeasureCommon.SnapResult} snapResult\n   */\n  renderVertexIndicator(snapResult) {\n\n    const pos = MeasureCommon.getSnapResultPosition(snapResult, this.viewer);\n    const scale = this.setScale(pos);\n    const length = _indicatorSize * scale;\n\n    const rightVec = this.viewer.navigation.getCameraRightVector().multiplyScalar(length);\n    const upVec = this.viewer.navigation.getCameraUpVector().multiplyScalar(length);\n\n    const geom = new THREE.BufferGeometry();\n\n    const vertices = [];\n    const p = new THREE.Vector3();\n\n    // Upper line\n    p.addVectors(pos, rightVec);\n    p.addVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.subVectors(pos, rightVec);\n    p.addVectors(p, upVec);\n    vertices[1] = p.clone();\n\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Bottom line\n    p.addVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Left line\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.subVectors(pos, rightVec);\n    p.addVectors(p, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Right line\n    p.addVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.addVectors(pos, rightVec);\n    p.addVectors(p, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n  }\n\n  /**\n   * Renders a triangle around the given snap result\n   * on a midpoint\n   * @param {Autodesk.Viewing.MeasureCommon.SnapResult} snapResult\n   */\n  renderMidpointIndicator(snapResult) {\n\n    const pos = snapResult.geomVertex;\n    const scale = this.setScale(pos);\n    const length = _indicatorSize * scale;\n\n    const rightVec = this.viewer.navigation.getCameraRightVector().multiplyScalar(length);\n    const upVec = this.viewer.navigation.getCameraUpVector().multiplyScalar(length);\n\n    const geom = new THREE.BufferGeometry();\n    const vertices = [];\n    const p = new THREE.Vector3();\n\n    // Bottom line\n    p.addVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Left line\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.addVectors(pos, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Right line\n    p.addVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.addVectors(pos, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n  }\n\n  /**\n   * Renders an upside-down Y around the given snap result\n   * on an edge or a curved edge..\n   * @param {Autodesk.Viewing.MeasureCommon.SnapResult} snapResult\n   */\n  renderEdgeIndicator(snapResult) {\n\n    const pos = MeasureCommon.getSnapResultPosition(snapResult, this.viewer);\n    const scale = this.setScale(pos);\n    const length = _indicatorSize * scale;\n\n    const rightVec = this.viewer.navigation.getCameraRightVector().multiplyScalar(length);\n    const upVec = this.viewer.navigation.getCameraUpVector().multiplyScalar(length);\n\n    const geom = new THREE.BufferGeometry();\n    const vertices = [];\n    const p = new THREE.Vector3();\n\n    // Bottom line\n    p.addVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    vertices[1] = pos.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Left line\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    vertices[1] = pos.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Right line\n    p.addVectors(pos, upVec);\n    vertices[0] = p.clone();\n    vertices[1] = pos.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n  }\n\n  /**\n   * Renders an circle on a center of a circle\n   * and circular arc for other than F2D sheets.\n   * @param {Autodesk.Viewing.MeasureCommon.SnapResult} snapResult\n   */\n  renderCircleIndicator(snapResult) {\n\n    const pos = MeasureCommon.getSnapResultPosition(snapResult, this.viewer);\n    this.drawCircle(pos, this.indicatorMaterial, INDICATOR_OVERLAY);\n\n  }\n\n  /**\n   * Renders an right-angle ( |_ ) indicator around the given snap result\n   * when the result is perpendicular.\n   * @param {Autodesk.Viewing.MeasureCommon.SnapResult} snapResult\n   */\n  renderPerpendicular(snapResult) {\n\n    const pos = MeasureCommon.getSnapResultPosition(snapResult, this.viewer);\n    const scale = this.setScale(pos);\n    const length = _indicatorSize * scale;\n\n    const rightVec = this.viewer.navigation.getCameraRightVector().multiplyScalar(length);\n    const upVec = this.viewer.navigation.getCameraUpVector().multiplyScalar(length);\n\n    const geom = new THREE.BufferGeometry();\n    const vertices = [];\n    const p = new THREE.Vector3();\n\n    // Upper line\n    vertices[0] = pos.clone();\n    p.subVectors(pos, rightVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Bottom line\n    p.addVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Left line\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    p.subVectors(pos, rightVec);\n    p.addVectors(p, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Right line\n    vertices[0] = pos.clone();\n    p.subVectors(pos, upVec);\n    vertices[1] = p.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n  }\n\n  /**\n   * Renders an X around the given snap result.\n   * Usually shown when using \"Free Measure\" mode is enabled.\n   * @param {Autodesk.Viewing.MeasureCommon.SnapResult} snapResult\n   */\n  renderPixelIndicator(snapResult) {\n\n    const pos = MeasureCommon.getSnapResultPosition(snapResult, this.viewer);\n    const scale = this.setScale(pos);\n    const length = _indicatorSize * scale;\n\n    const rightVec = this.viewer.navigation.getCameraRightVector().multiplyScalar(length);\n    const upVec = this.viewer.navigation.getCameraUpVector().multiplyScalar(length);\n\n    const geom = new THREE.BufferGeometry();\n    const vertices = [];\n    const p = new THREE.Vector3();\n\n    // Top-left line\n    p.subVectors(pos, rightVec);\n    p.addVectors(p, upVec);\n    vertices[0] = p.clone();\n    vertices[1] = pos.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Top-right line\n    p.addVectors(pos, rightVec);\n    p.addVectors(p, upVec);\n    vertices[0] = p.clone();\n    vertices[1] = pos.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Bottom-right line\n    p.addVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    vertices[1] = pos.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n    // Bottom-left line\n    p.subVectors(pos, rightVec);\n    p.subVectors(p, upVec);\n    vertices[0] = p.clone();\n    vertices[1] = pos.clone();\n    geom.setFromPoints(vertices);\n    this.drawLine(geom, this.indicatorMaterial, _indicatorLineWidth, INDICATOR_OVERLAY);\n\n  }\n\n  renderIndicator(snapResult) {\n\n    if (snapResult.isPerpendicular) {\n      this.renderPerpendicular(snapResult);\n      return;\n    }\n\n    if (snapResult.snapToArc) {\n      if (snapResult.isArc && snapResult.geomType === SnapType.SNAP_CIRCULARARC && this.viewer.model.is2d() && !this.viewer.model.isPdf()) {\n        this.renderVertexIndicator(snapResult);\n      }\n      return;\n    }\n\n\n    switch (snapResult.geomType) {\n      case SnapType.SNAP_VERTEX:\n      case SnapType.SNAP_INTERSECTION:\n        this.renderVertexIndicator(snapResult);\n        break;\n\n      case SnapType.SNAP_MIDPOINT:\n        this.renderMidpointIndicator(snapResult);\n        break;\n\n      case SnapType.SNAP_CIRCLE_CENTER:\n        this.renderCircleIndicator(snapResult);\n        break;\n\n      case SnapType.SNAP_EDGE:\n      case SnapType.SNAP_CURVEDEDGE:\n        this.renderEdgeIndicator(snapResult);\n        break;\n\n      case SnapType.SNAP_CIRCULARARC:\n        if (this.viewer.model.is2d()) {\n          this.renderVertexIndicator(snapResult);\n        } else {\n          this.renderCircleIndicator(snapResult);\n        }\n        break;\n\n      case SnapType.SNAP_FACE:\n      case SnapType.SNAP_CURVEDFACE:\n        this.renderVertexIndicator(snapResult);\n        break;\n\n      case SnapType.RASTER_PIXEL:\n        this.renderPixelIndicator(snapResult);\n        break;\n    }\n  }\n\n  /**\n   * Draws a line in an overlyay\n   * @param {THREE.Geometry|THREE.BufferGeometry} geom \n   * @param {THREE.Material} material \n   * @param {number} width \n   * @param {string} overlayName \n   */\n  drawLine(geom, material, width, overlayName) {\n\n    // Line Pieces\n    if (overlayName === GEOMETRIES_OVERLAY) {\n      this.overlayType = EDGE_OVERLAY;\n    }\n\n    let verticesLength, geomPos;\n    if (geom instanceof THREE.Geometry) {\n      console.warn('SnapperIndicator.drawLine(geom, material, width, overlayName): THREE.Geometry has been depecrated and the geom argument should use a THREE.BufferGeometry instead');\n      verticesLength = geom.vertices.length;\n    } else {\n      geomPos = geom.getAttribute('position');\n      verticesLength = geomPos.count;\n    }\n    for (let i = 0; i < verticesLength; i += 2) {\n      let cylinder;\n      if (geom instanceof THREE.Geometry) {\n        cylinder = this.cylinderMesh(geom.vertices[i], geom.vertices[i + 1], material, width);\n      } else {\n        cylinder = this.cylinderMesh(getXYZFromPos(geomPos, i).clone(), getXYZFromPos(geomPos, i + 1).clone(), material, width);\n      }\n      this.setEdgeScale(cylinder);\n      this.addOverlay(overlayName, cylinder);\n    }\n  }\n\n  drawPoint(point, material, overlayName) {\n\n    // Because every point is snappable in PDFs, don't display the green dot for PDFs.\n    if (this.viewer.model.isLeaflet()) {\n      return;\n    }\n\n    if (!_point)\n    _point = new THREE.SphereGeometry(1.0);\n\n    const pointMesh = new THREE.Mesh(_point, material);\n    pointMesh.position.set(point.x, point.y, point.z);\n\n    this.setPointScale(pointMesh);\n\n    if (overlayName === GEOMETRIES_OVERLAY) {\n      this.overlayType = POINT_OVERLAY;\n    }\n\n    this.addOverlay(overlayName, pointMesh);\n\n  }\n\n  drawCircle(point, material, overlayName) {\n\n    let torus = new THREE.TorusGeometry(_indicatorSize, _indicatorLineWidth, 2, 20);\n    const torusMesh = new THREE.Mesh(torus, material);\n    torusMesh.lookAt(this.viewer.navigation.getEyeVector().normalize());\n    torus = null;\n\n    torusMesh.position.set(point.x, point.y, point.z);\n\n    this.setCircleScale(torusMesh);\n\n    this.addOverlay(overlayName, torusMesh);\n\n  }\n\n  setScale(point) {\n\n    const pixelSize = 5;\n\n    const navapi = this.viewer.navigation;\n    const camera = navapi.getCamera();\n    const position = navapi.getPosition();\n\n    const p = point.clone();\n\n    const distance = camera.isPerspective ? p.sub(position).length() :\n    navapi.getEyeVector().length();\n\n    const fov = navapi.getVerticalFov();\n    const worldHeight = 2.0 * distance * Math.tan(THREE.Math.degToRad(fov * 0.5));\n\n    const viewport = navapi.getScreenViewport();\n    const scale = pixelSize * worldHeight / viewport.height;\n\n    return scale;\n  }\n\n  setPointScale(pointMesh) {\n\n    const scale = this.setScale(pointMesh.position);\n    pointMesh.scale.x = scale;\n    pointMesh.scale.y = scale;\n    pointMesh.scale.z = scale;\n\n  }\n\n  setCircleScale(torusMesh) {\n\n    const scale = this.setScale(torusMesh.position);\n    torusMesh.scale.x = scale;\n    torusMesh.scale.y = scale;\n  }\n\n  setEdgeScale(cylinderMesh) {\n\n    const scale = this.setScale(cylinderMesh.position);\n    cylinderMesh.scale.x = scale;\n    cylinderMesh.scale.z = scale;\n  }\n\n  updatePointScale(overlayName) {\n\n    if (this.overlayType !== POINT_OVERLAY)\n    return;\n\n    const overlay = this.viewer.impl.overlayScenes[overlayName];\n    if (overlay) {\n      const scene = overlay.scene;\n\n      for (let i = 0; i < scene.children.length; i++) {\n        const pointMesh = scene.children[i];\n        if (pointMesh) {\n\n          this.setPointScale(pointMesh);\n        }\n      }\n    }\n  }\n\n  updateEdgeScale(overlayName) {\n\n    if (this.overlayType !== EDGE_OVERLAY)\n    return;\n\n    const overlay = this.viewer.impl.overlayScenes[overlayName];\n    if (overlay) {\n      const scene = overlay.scene;\n\n      for (let i = 0; i < scene.children.length; i++) {\n        const cylinderMesh = scene.children[i];\n        if (cylinderMesh) {\n\n          this.setEdgeScale(cylinderMesh);\n        }\n      }\n    }\n  }\n\n  onCameraChange() {\n\n    this.updatePointScale(GEOMETRIES_OVERLAY);\n    this.updateEdgeScale(GEOMETRIES_OVERLAY);\n\n    // if (!this.snapper.markupMode) {\n    this.render();\n    // }\n  }\n\n  destroy() {\n\n    this.removeOverlay(GEOMETRIES_OVERLAY);\n    this.removeOverlay(INDICATOR_OVERLAY);\n\n    if (_point) {\n      _point.dispose();\n      _point = null;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./extensions/Snapping/SnapperIndicator.js\n");

                /***/
            }),

        /***/
        "./extensions/Snapping/index.js":
            /*!**************************************!*\
              !*** ./extensions/Snapping/index.js ***!
              \**************************************/
            /***/
            ((module, __unused_webpack_exports, __webpack_require__) => {

                eval("\nvar av = Autodesk.Viewing;\n\n/**\n * @namespace Autodesk.Viewing.Extensions.Snapping\n */\nvar namespace = AutodeskNamespace('Autodesk.Viewing.Extensions.Snapping');\n\n/**\n * @param m\n * @param ns\n * @private\n */\nfunction _export(m, ns) {\n  for (var prop in m) {\n    if (Object.prototype.hasOwnProperty.call(m, prop)) {\n      //Export directly into the module (e.g. for node.js use, where LMV is used via require instead from global namespace)\n      module.exports[prop] = m[prop];\n\n      //Export into the desired viewer namespace\n      ns[prop] = m[prop];\n    }\n  }\n}\n\n_export(__webpack_require__(/*! ./SnapMath.js */ \"./extensions/Snapping/SnapMath.js\"), namespace);\n_export(__webpack_require__(/*! ./Snapper.js */ \"./extensions/Snapping/Snapper.js\"), namespace);\n_export(__webpack_require__(/*! ./SnapperIndicator.js */ \"./extensions/Snapping/SnapperIndicator.js\"), namespace);\n\n\n/**\n * Utility extension that provides access to the {@link Autodesk.Viewing.Extensions.Snapping.Snapper} tool.\n * \n * The extension id is: `Autodesk.Snapping`\n * \n * @example\n *   viewer.loadExtension('Autodesk.Snapping')\n *  \n * @memberof Autodesk.Viewing.Extensions\n * @alias Autodesk.Viewing.Extensions.SnappingExtension\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n * @class\n */\nclass SnappingExtension extends av.Extension {\n\n  /**\n   * @param {Viewer3D} viewer - Viewer instance\n   * @param {object} options - Configurations for the extension\n   * @alias Autodesk.Viewing.Extensions.SnappingExtension\n   * @class\n   */\n  constructor(viewer, options) {\n    super(viewer, options);\n  }\n\n  /**\n   * Load the extension.\n   *\n   * @returns {Promise} that resolves when dependent extension finishes loading.\n   * \n   * @alias Autodesk.Viewing.Extensions.SnappingExtension#load\n   */\n  load() {\n    // Load the required dependency (and return the pending load as the load completion Promise)\n    return this.viewer.loadExtension('Autodesk.CompGeom');\n  }\n\n  /**\n   * Unloads the extension.\n   * It does not unload dependent extensions.\n   *\n   * @returns {boolean} Always returns true\n   * \n   * @alias Autodesk.Viewing.Extensions.SnappingExtension#unload\n   */\n  unload() {return true;}\n\n\n  /**\n   * Unused method.\n   *\n   * @returns {boolean} Always returns true\n   * \n   * @alias Autodesk.Viewing.Extensions.SnappingExtension#activate\n   */\n  activate() {return true;}\n\n  /**\n   * Unused method.\n   *\n   * @returns {boolean} Always returns false\n   * \n   * @alias Autodesk.Viewing.Extensions.SnappingExtension#deactivate\n   */\n  deactivate() {return false;}\n}\n\n// The ExtensionManager requires an extension to be registered.\nav.theExtensionManager.registerExtension('Autodesk.Snapping', SnappingExtension);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9leHRlbnNpb25zL1NuYXBwaW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFDQSxJQUFJQSxFQUFFLEdBQUdDLFFBQVEsQ0FBQ0MsT0FBTzs7QUFFekI7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsU0FBUyxHQUFHQyxpQkFBaUIsQ0FBQyxzQ0FBc0MsQ0FBQzs7QUFFekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLE9BQU9BLENBQUNDLENBQUMsRUFBRUMsRUFBRSxFQUFFO0VBQ3BCLEtBQUssSUFBSUMsSUFBSSxJQUFJRixDQUFDLEVBQUU7SUFDaEIsSUFBSUcsTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTixDQUFDLEVBQUVFLElBQUksQ0FBQyxFQUFFO01BQy9DO01BQ0FLLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDTixJQUFJLENBQUMsR0FBR0YsQ0FBQyxDQUFDRSxJQUFJLENBQUM7O01BRTlCO01BQ0FELEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLEdBQUdGLENBQUMsQ0FBQ0UsSUFBSSxDQUFDO0lBQ3RCO0VBQ0o7QUFDSjs7QUFFQUgsT0FBTyxDQUFDVSxtQkFBTyxDQUFDLHdEQUFlLENBQUMsRUFBRVosU0FBUyxDQUFDO0FBQzVDRSxPQUFPLENBQUNVLG1CQUFPLENBQUMsc0RBQWMsQ0FBQyxFQUFFWixTQUFTLENBQUM7QUFDM0NFLE9BQU8sQ0FBQ1UsbUJBQU8sQ0FBQyx3RUFBdUIsQ0FBQyxFQUFFWixTQUFTLENBQUM7OztBQUdwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1hLGlCQUFpQixTQUFTaEIsRUFBRSxDQUFDaUIsU0FBUyxDQUFDOztFQUV6QztBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsV0FBV0EsQ0FBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUU7SUFDekIsS0FBSyxDQUFDRCxNQUFNLEVBQUVDLE9BQU8sQ0FBQztFQUMxQjs7RUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxJQUFJQSxDQUFBLEVBQUc7SUFDSDtJQUNBLE9BQU8sSUFBSSxDQUFDRixNQUFNLENBQUNHLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztFQUN6RDs7RUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLE1BQU1BLENBQUEsRUFBRyxDQUFFLE9BQU8sSUFBSSxDQUFFOzs7RUFHeEI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsUUFBUUEsQ0FBQSxFQUFHLENBQUUsT0FBTyxJQUFJLENBQUU7O0VBRTFCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLFVBQVVBLENBQUEsRUFBRyxDQUFFLE9BQU8sS0FBSyxDQUFFO0FBQ2pDOztBQUVBO0FBQ0F6QixFQUFFLENBQUMwQixtQkFBbUIsQ0FBQ0MsaUJBQWlCLENBQUMsbUJBQW1CLEVBQUVYLGlCQUFpQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQXV0b2Rlc2suRXh0ZW5zaW9ucy8uL2V4dGVuc2lvbnMvU25hcHBpbmcvaW5kZXguanM/Y2JhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBhdiA9IEF1dG9kZXNrLlZpZXdpbmc7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbnMuU25hcHBpbmdcbiAqL1xudmFyIG5hbWVzcGFjZSA9IEF1dG9kZXNrTmFtZXNwYWNlKCdBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbnMuU25hcHBpbmcnKTtcblxuLyoqXG4gKiBAcGFyYW0gbVxuICogQHBhcmFtIG5zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfZXhwb3J0KG0sIG5zKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBtKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobSwgcHJvcCkpIHtcbiAgICAgICAgICAgIC8vRXhwb3J0IGRpcmVjdGx5IGludG8gdGhlIG1vZHVsZSAoZS5nLiBmb3Igbm9kZS5qcyB1c2UsIHdoZXJlIExNViBpcyB1c2VkIHZpYSByZXF1aXJlIGluc3RlYWQgZnJvbSBnbG9iYWwgbmFtZXNwYWNlKVxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHNbcHJvcF0gPSBtW3Byb3BdO1xuXG4gICAgICAgICAgICAvL0V4cG9ydCBpbnRvIHRoZSBkZXNpcmVkIHZpZXdlciBuYW1lc3BhY2VcbiAgICAgICAgICAgIG5zW3Byb3BdID0gbVtwcm9wXTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuX2V4cG9ydChyZXF1aXJlKFwiLi9TbmFwTWF0aC5qc1wiKSwgbmFtZXNwYWNlKTtcbl9leHBvcnQocmVxdWlyZShcIi4vU25hcHBlci5qc1wiKSwgbmFtZXNwYWNlKTtcbl9leHBvcnQocmVxdWlyZShcIi4vU25hcHBlckluZGljYXRvci5qc1wiKSwgbmFtZXNwYWNlKTtcblxuXG4vKipcbiAqIFV0aWxpdHkgZXh0ZW5zaW9uIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSB7QGxpbmsgQXV0b2Rlc2suVmlld2luZy5FeHRlbnNpb25zLlNuYXBwaW5nLlNuYXBwZXJ9IHRvb2wuXG4gKiBcbiAqIFRoZSBleHRlbnNpb24gaWQgaXM6IGBBdXRvZGVzay5TbmFwcGluZ2BcbiAqIFxuICogQGV4YW1wbGVcbiAqICAgdmlld2VyLmxvYWRFeHRlbnNpb24oJ0F1dG9kZXNrLlNuYXBwaW5nJylcbiAqICBcbiAqIEBtZW1iZXJvZiBBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbnNcbiAqIEBhbGlhcyBBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbnMuU25hcHBpbmdFeHRlbnNpb25cbiAqIEBzZWUge0BsaW5rIEF1dG9kZXNrLlZpZXdpbmcuRXh0ZW5zaW9ufSBmb3IgY29tbW9uIGluaGVyaXRlZCBtZXRob2RzLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIFNuYXBwaW5nRXh0ZW5zaW9uIGV4dGVuZHMgYXYuRXh0ZW5zaW9uIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Vmlld2VyM0R9IHZpZXdlciAtIFZpZXdlciBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQ29uZmlndXJhdGlvbnMgZm9yIHRoZSBleHRlbnNpb25cbiAgICAgKiBAYWxpYXMgQXV0b2Rlc2suVmlld2luZy5FeHRlbnNpb25zLlNuYXBwaW5nRXh0ZW5zaW9uXG4gICAgICogQGNsYXNzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodmlld2VyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHZpZXdlciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZXh0ZW5zaW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IHRoYXQgcmVzb2x2ZXMgd2hlbiBkZXBlbmRlbnQgZXh0ZW5zaW9uIGZpbmlzaGVzIGxvYWRpbmcuXG4gICAgICogXG4gICAgICogQGFsaWFzIEF1dG9kZXNrLlZpZXdpbmcuRXh0ZW5zaW9ucy5TbmFwcGluZ0V4dGVuc2lvbiNsb2FkXG4gICAgICovXG4gICAgbG9hZCgpIHsgXG4gICAgICAgIC8vIExvYWQgdGhlIHJlcXVpcmVkIGRlcGVuZGVuY3kgKGFuZCByZXR1cm4gdGhlIHBlbmRpbmcgbG9hZCBhcyB0aGUgbG9hZCBjb21wbGV0aW9uIFByb21pc2UpXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdlci5sb2FkRXh0ZW5zaW9uKCdBdXRvZGVzay5Db21wR2VvbScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVubG9hZHMgdGhlIGV4dGVuc2lvbi5cbiAgICAgKiBJdCBkb2VzIG5vdCB1bmxvYWQgZGVwZW5kZW50IGV4dGVuc2lvbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gQWx3YXlzIHJldHVybnMgdHJ1ZVxuICAgICAqIFxuICAgICAqIEBhbGlhcyBBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbnMuU25hcHBpbmdFeHRlbnNpb24jdW5sb2FkXG4gICAgICovXG4gICAgdW5sb2FkKCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cbiAgICAvKipcbiAgICAgKiBVbnVzZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IEFsd2F5cyByZXR1cm5zIHRydWVcbiAgICAgKiBcbiAgICAgKiBAYWxpYXMgQXV0b2Rlc2suVmlld2luZy5FeHRlbnNpb25zLlNuYXBwaW5nRXh0ZW5zaW9uI2FjdGl2YXRlXG4gICAgICovXG4gICAgYWN0aXZhdGUoKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgICAvKipcbiAgICAgKiBVbnVzZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IEFsd2F5cyByZXR1cm5zIGZhbHNlXG4gICAgICogXG4gICAgICogQGFsaWFzIEF1dG9kZXNrLlZpZXdpbmcuRXh0ZW5zaW9ucy5TbmFwcGluZ0V4dGVuc2lvbiNkZWFjdGl2YXRlXG4gICAgICovXG4gICAgZGVhY3RpdmF0ZSgpIHsgcmV0dXJuIGZhbHNlOyB9XG59XG5cbi8vIFRoZSBFeHRlbnNpb25NYW5hZ2VyIHJlcXVpcmVzIGFuIGV4dGVuc2lvbiB0byBiZSByZWdpc3RlcmVkLlxuYXYudGhlRXh0ZW5zaW9uTWFuYWdlci5yZWdpc3RlckV4dGVuc2lvbignQXV0b2Rlc2suU25hcHBpbmcnLCBTbmFwcGluZ0V4dGVuc2lvbik7XG5cbiJdLCJuYW1lcyI6WyJhdiIsIkF1dG9kZXNrIiwiVmlld2luZyIsIm5hbWVzcGFjZSIsIkF1dG9kZXNrTmFtZXNwYWNlIiwiX2V4cG9ydCIsIm0iLCJucyIsInByb3AiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsIlNuYXBwaW5nRXh0ZW5zaW9uIiwiRXh0ZW5zaW9uIiwiY29uc3RydWN0b3IiLCJ2aWV3ZXIiLCJvcHRpb25zIiwibG9hZCIsImxvYWRFeHRlbnNpb24iLCJ1bmxvYWQiLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJ0aGVFeHRlbnNpb25NYW5hZ2VyIiwicmVnaXN0ZXJFeHRlbnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./extensions/Snapping/index.js\n");

                /***/
            })

        /******/
    });
    /************************************************************************/
    /******/ // The module cache
    /******/
    var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/
        if (cachedModule !== undefined) {
            /******/
            return cachedModule.exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = __webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/
            exports: {}
            /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
    }
    /******/
    /************************************************************************/
    /******/
    /* webpack/runtime/define property getters */
    /******/
    (() => {
        /******/ // define getter functions for harmony exports
        /******/
        __webpack_require__.d = (exports, definition) => {
            /******/
            for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                    /******/
                    Object.defineProperty(exports, key, {
                        enumerable: true,
                        get: definition[key]
                    });
                    /******/
                }
                /******/
            }
            /******/
        };
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/hasOwnProperty shorthand */
    /******/
    (() => {
        /******/
        __webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
        /******/
    })();
    /******/
    /******/
    /* webpack/runtime/make namespace object */
    /******/
    (() => {
        /******/ // define __esModule on exports
        /******/
        __webpack_require__.r = (exports) => {
            /******/
            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/
                Object.defineProperty(exports, Symbol.toStringTag, {
                    value: 'Module'
                });
                /******/
            }
            /******/
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            /******/
        };
        /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module is referenced by other modules so it can't be inlined
    /******/
    var __webpack_exports__ = __webpack_require__("./extensions/Snapping/index.js");
    /******/
    Autodesk.Extensions.Snapping = __webpack_exports__;
    /******/
    /******/
})();